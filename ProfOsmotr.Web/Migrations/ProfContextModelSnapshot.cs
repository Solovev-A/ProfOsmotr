// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProfOsmotr.DAL;

namespace ProfOsmotr.Web.Migrations
{
    [DbContext(typeof(ProfContext))]
    partial class ProfContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.13");

            modelBuilder.Entity("OrderExaminationOrderItem", b =>
                {
                    b.Property<int>("OrderExaminationsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderItemsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("OrderExaminationsId", "OrderItemsId");

                    b.HasIndex("OrderItemsId");

                    b.ToTable("OrderExaminationOrderItem");
                });

            modelBuilder.Entity("OrderItemProfession", b =>
                {
                    b.Property<int>("OrderItemsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProfessionsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("OrderItemsId", "ProfessionsId");

                    b.HasIndex("ProfessionsId");

                    b.ToTable("OrderItemProfession");
                });

            modelBuilder.Entity("ProfOsmotr.DAL.ActualClinicService", b =>
                {
                    b.Property<int>("OrderExaminationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClinicId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ServiceId")
                        .HasColumnType("INTEGER");

                    b.HasKey("OrderExaminationId", "ClinicId");

                    b.HasIndex("ClinicId");

                    b.HasIndex("ServiceId", "OrderExaminationId", "ClinicId");

                    b.ToTable("ActualClinicService");
                });

            modelBuilder.Entity("ProfOsmotr.DAL.Calculation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClinicId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreatorId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsModified")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("CreatorId");

                    b.ToTable("Calculations");
                });

            modelBuilder.Entity("ProfOsmotr.DAL.CalculationResultItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Amount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CalculationId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ServiceClinicId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ServiceOrderExaminationId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CalculationId");

                    b.HasIndex("ServiceId", "ServiceOrderExaminationId", "ServiceClinicId");

                    b.ToTable("CalculationResultItems");
                });

            modelBuilder.Entity("ProfOsmotr.DAL.CalculationSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CalculationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumberOfPersons")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumberOfPersonsOver40")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumberOfWomen")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumberOfWomenOver40")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProfessionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CalculationId");

                    b.HasIndex("ProfessionId");

                    b.ToTable("CalculationSource");
                });

            modelBuilder.Entity("ProfOsmotr.DAL.CheckupResult", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("CheckupResult");
                });

            modelBuilder.Entity("ProfOsmotr.DAL.Clinic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Clinics");
                });

            modelBuilder.Entity("ProfOsmotr.DAL.ClinicDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<int>("ClinicId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<string>("ShortName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId")
                        .IsUnique();

                    b.ToTable("ClinicDetails");
                });

            modelBuilder.Entity("ProfOsmotr.DAL.ClinicRegisterRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Approved")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Processed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SenderId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ShortName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SenderId");

                    b.ToTable("ClinicRegisterRequests");
                });

            modelBuilder.Entity("ProfOsmotr.DAL.ContingentCheckupIndexValue", b =>
                {
                    b.Property<int>("ContingentCheckupStatusId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ExaminationResultIndexId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("ContingentCheckupStatusId", "ExaminationResultIndexId");

                    b.HasIndex("ExaminationResultIndexId");

                    b.ToTable("ContingentCheckupIndexValue");
                });

            modelBuilder.Entity("ProfOsmotr.DAL.ContingentCheckupStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CheckupResultId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CheckupStarted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DateOfCompletion")
                        .HasColumnType("TEXT");

                    b.Property<int?>("EmployerDepartmentId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LastEditorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MedicalReport")
                        .HasColumnType("TEXT");

                    b.Property<bool>("NeedDispensaryObservation")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NeedExaminationAtOccupationalPathologyCenter")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NeedInpatientExamunationAndTreatment")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NeedOutpatientExamunationAndTreatment")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NeedSpaTreatment")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PatientId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PeriodicMedicalExaminationId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ProfessionId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RegistrationJournalEntryNumber")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasAlternateKey("PeriodicMedicalExaminationId", "PatientId");

                    b.HasIndex("CheckupResultId");

                    b.HasIndex("EmployerDepartmentId");

                    b.HasIndex("LastEditorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ProfessionId");

                    b.ToTable("ContingentCheckupStatuses");
                });

            modelBuilder.Entity("ProfOsmotr.DAL.Employer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClinicId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("HeadFirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("HeadLastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("HeadPatronymicName")
                        .HasColumnType("TEXT");

                    b.Property<string>("HeadPosition")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.ToTable("Employers");
                });

            modelBuilder.Entity("ProfOsmotr.DAL.EmployerData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EmployeesPersistentlyDisabled")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EmployeesTotal")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EmployeesUnder18")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EmployeesWomen")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WorkingWithHarmfulFactorsPersistentlyDisabled")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WorkingWithHarmfulFactorsTotal")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WorkingWithHarmfulFactorsUnder18")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WorkingWithHarmfulFactorsWomen")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WorkingWithJobTypesPersistentlyDisabled")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WorkingWithJobTypesTotal")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WorkingWithJobTypesUnder18")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WorkingWithJobTypesWomen")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("EmployerData");
                });

            modelBuilder.Entity("ProfOsmotr.DAL.EmployerDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("ParentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("EmployerDepartment");
                });

            modelBuilder.Entity("ProfOsmotr.DAL.ExaminationResultIndex", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderExaminationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<string>("UnitOfMeasure")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OrderExaminationId");

                    b.ToTable("ExaminationResultIndexes");
                });

            modelBuilder.Entity("ProfOsmotr.DAL.Gender", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Gender");
                });

            modelBuilder.Entity("ProfOsmotr.DAL.ICD10Chapter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Block")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ICD10Chapters");
                });

            modelBuilder.Entity("ProfOsmotr.DAL.IndividualCheckupIndexValue", b =>
                {
                    b.Property<int>("IndividualCheckupStatusId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ExaminationResultIndexId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("IndividualCheckupStatusId", "ExaminationResultIndexId");

                    b.HasIndex("ExaminationResultIndexId");

                    b.ToTable("IndividualCheckupIndexValue");
                });

            modelBuilder.Entity("ProfOsmotr.DAL.IndividualCheckupStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CheckupResultId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DateOfCompletion")
                        .HasColumnType("TEXT");

                    b.Property<int?>("EmployerDepartmentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LastEditorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MedicalReport")
                        .HasColumnType("TEXT");

                    b.Property<int>("PatientId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PreliminaryMedicalExaminationId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ProfessionId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RegistrationJournalEntryNumber")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasAlternateKey("PreliminaryMedicalExaminationId", "PatientId");

                    b.HasIndex("CheckupResultId");

                    b.HasIndex("EmployerDepartmentId");

                    b.HasIndex("LastEditorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PreliminaryMedicalExaminationId")
                        .IsUnique();

                    b.HasIndex("ProfessionId");

                    b.ToTable("IndividualCheckupStatuses");
                });

            modelBuilder.Entity("ProfOsmotr.DAL.NewlyDiagnosedChronicSomaticDisease", b =>
                {
                    b.Property<int>("ContingentCheckupStatusId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ICD10ChapterId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Cases")
                        .HasColumnType("INTEGER");

                    b.HasKey("ContingentCheckupStatusId", "ICD10ChapterId");

                    b.HasIndex("ICD10ChapterId");

                    b.ToTable("NewlyDiagnosedChronicSomaticDisease");
                });

            modelBuilder.Entity("ProfOsmotr.DAL.NewlyDiagnosedOccupationalDisease", b =>
                {
                    b.Property<int>("ContingentCheckupStatusId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ICD10ChapterId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Cases")
                        .HasColumnType("INTEGER");

                    b.HasKey("ContingentCheckupStatusId", "ICD10ChapterId");

                    b.HasIndex("ICD10ChapterId");

                    b.ToTable("NewlyDiagnosedOccupationalDisease");
                });

            modelBuilder.Entity("ProfOsmotr.DAL.OrderExamination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DefaultServiceDetailsId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TargetGroupId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DefaultServiceDetailsId");

                    b.HasIndex("TargetGroupId");

                    b.ToTable("OrderExaminations");
                });

            modelBuilder.Entity("ProfOsmotr.DAL.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("ProfOsmotr.DAL.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<int>("ClinicId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("GenderId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PatronymicName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("GenderId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("ProfOsmotr.DAL.PeriodicMedicalExamination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClinicId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Completed")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EmployerDataId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EmployerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ExaminationYear")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LastEditorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Recommendations")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ReportDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("EmployerDataId");

                    b.HasIndex("EmployerId");

                    b.HasIndex("LastEditorId");

                    b.ToTable("PeriodicMedicalExaminations");
                });

            modelBuilder.Entity("ProfOsmotr.DAL.PreliminaryMedicalExamination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClinicId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Completed")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EmployerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LastEditorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Recommendations")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("EmployerId");

                    b.HasIndex("LastEditorId");

                    b.ToTable("PreliminaryMedicalExaminations");
                });

            modelBuilder.Entity("ProfOsmotr.DAL.Profession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Professions");
                });

            modelBuilder.Entity("ProfOsmotr.DAL.Role", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("ProfOsmotr.DAL.Service", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderExaminationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClinicId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int>("ServiceAvailabilityGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ServiceDetailsId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id", "OrderExaminationId", "ClinicId");

                    b.HasIndex("ClinicId");

                    b.HasIndex("OrderExaminationId");

                    b.HasIndex("ServiceAvailabilityGroupId");

                    b.HasIndex("ServiceDetailsId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("ProfOsmotr.DAL.ServiceAvailabilityGroup", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ServiceAvailabilityGroups");
                });

            modelBuilder.Entity("ProfOsmotr.DAL.ServiceDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ServiceDetails");
                });

            modelBuilder.Entity("ProfOsmotr.DAL.TargetGroup", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TargetGroup");
                });

            modelBuilder.Entity("ProfOsmotr.DAL.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ClinicId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasAlternateKey("Username");

                    b.HasIndex("ClinicId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ProfOsmotr.DAL.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Position")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserProfile");
                });

            modelBuilder.Entity("OrderExaminationOrderItem", b =>
                {
                    b.HasOne("ProfOsmotr.DAL.OrderExamination", null)
                        .WithMany()
                        .HasForeignKey("OrderExaminationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProfOsmotr.DAL.OrderItem", null)
                        .WithMany()
                        .HasForeignKey("OrderItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OrderItemProfession", b =>
                {
                    b.HasOne("ProfOsmotr.DAL.OrderItem", null)
                        .WithMany()
                        .HasForeignKey("OrderItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProfOsmotr.DAL.Profession", null)
                        .WithMany()
                        .HasForeignKey("ProfessionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProfOsmotr.DAL.ActualClinicService", b =>
                {
                    b.HasOne("ProfOsmotr.DAL.Clinic", "Clinic")
                        .WithMany("ActualClinicServices")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProfOsmotr.DAL.OrderExamination", "OrderExamination")
                        .WithMany("ActualClinicServices")
                        .HasForeignKey("OrderExaminationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProfOsmotr.DAL.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId", "OrderExaminationId", "ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");

                    b.Navigation("OrderExamination");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("ProfOsmotr.DAL.Calculation", b =>
                {
                    b.HasOne("ProfOsmotr.DAL.Clinic", "Clinic")
                        .WithMany("Calculations")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProfOsmotr.DAL.User", "Creator")
                        .WithMany("Calculations")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("ProfOsmotr.DAL.CalculationResultItem", b =>
                {
                    b.HasOne("ProfOsmotr.DAL.Calculation", "Calculation")
                        .WithMany("CalculationResultItems")
                        .HasForeignKey("CalculationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProfOsmotr.DAL.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId", "ServiceOrderExaminationId", "ServiceClinicId");

                    b.Navigation("Calculation");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("ProfOsmotr.DAL.CalculationSource", b =>
                {
                    b.HasOne("ProfOsmotr.DAL.Calculation", "Calculation")
                        .WithMany("CalculationSources")
                        .HasForeignKey("CalculationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProfOsmotr.DAL.Profession", "Profession")
                        .WithMany()
                        .HasForeignKey("ProfessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Calculation");

                    b.Navigation("Profession");
                });

            modelBuilder.Entity("ProfOsmotr.DAL.ClinicDetails", b =>
                {
                    b.HasOne("ProfOsmotr.DAL.Clinic", "Clinic")
                        .WithOne("ClinicDetails")
                        .HasForeignKey("ProfOsmotr.DAL.ClinicDetails", "ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("ProfOsmotr.DAL.ClinicRegisterRequest", b =>
                {
                    b.HasOne("ProfOsmotr.DAL.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("ProfOsmotr.DAL.ContingentCheckupIndexValue", b =>
                {
                    b.HasOne("ProfOsmotr.DAL.ContingentCheckupStatus", "ContingentCheckupStatus")
                        .WithMany("ContingentCheckupIndexValues")
                        .HasForeignKey("ContingentCheckupStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProfOsmotr.DAL.ExaminationResultIndex", "ExaminationResultIndex")
                        .WithMany()
                        .HasForeignKey("ExaminationResultIndexId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContingentCheckupStatus");

                    b.Navigation("ExaminationResultIndex");
                });

            modelBuilder.Entity("ProfOsmotr.DAL.ContingentCheckupStatus", b =>
                {
                    b.HasOne("ProfOsmotr.DAL.CheckupResult", "CheckupResult")
                        .WithMany()
                        .HasForeignKey("CheckupResultId");

                    b.HasOne("ProfOsmotr.DAL.EmployerDepartment", "EmployerDepartment")
                        .WithMany()
                        .HasForeignKey("EmployerDepartmentId");

                    b.HasOne("ProfOsmotr.DAL.User", "LastEditor")
                        .WithMany()
                        .HasForeignKey("LastEditorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProfOsmotr.DAL.Patient", "Patient")
                        .WithMany("ContingentCheckupStatuses")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProfOsmotr.DAL.PeriodicMedicalExamination", "PeriodicMedicalExamination")
                        .WithMany("Statuses")
                        .HasForeignKey("PeriodicMedicalExaminationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProfOsmotr.DAL.Profession", "Profession")
                        .WithMany("ContingentCheckupStatuses")
                        .HasForeignKey("ProfessionId");

                    b.Navigation("CheckupResult");

                    b.Navigation("EmployerDepartment");

                    b.Navigation("LastEditor");

                    b.Navigation("Patient");

                    b.Navigation("PeriodicMedicalExamination");

                    b.Navigation("Profession");
                });

            modelBuilder.Entity("ProfOsmotr.DAL.Employer", b =>
                {
                    b.HasOne("ProfOsmotr.DAL.Clinic", "Clinic")
                        .WithMany()
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("ProfOsmotr.DAL.EmployerDepartment", b =>
                {
                    b.HasOne("ProfOsmotr.DAL.Employer", "Parent")
                        .WithMany("Departments")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("ProfOsmotr.DAL.ExaminationResultIndex", b =>
                {
                    b.HasOne("ProfOsmotr.DAL.OrderExamination", "OrderExamination")
                        .WithMany("ExaminationResultIndexes")
                        .HasForeignKey("OrderExaminationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderExamination");
                });

            modelBuilder.Entity("ProfOsmotr.DAL.IndividualCheckupIndexValue", b =>
                {
                    b.HasOne("ProfOsmotr.DAL.ExaminationResultIndex", "ExaminationResultIndex")
                        .WithMany()
                        .HasForeignKey("ExaminationResultIndexId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProfOsmotr.DAL.IndividualCheckupStatus", "IndividualCheckupStatus")
                        .WithMany("IndividualCheckupIndexValues")
                        .HasForeignKey("IndividualCheckupStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExaminationResultIndex");

                    b.Navigation("IndividualCheckupStatus");
                });

            modelBuilder.Entity("ProfOsmotr.DAL.IndividualCheckupStatus", b =>
                {
                    b.HasOne("ProfOsmotr.DAL.CheckupResult", "CheckupResult")
                        .WithMany()
                        .HasForeignKey("CheckupResultId");

                    b.HasOne("ProfOsmotr.DAL.EmployerDepartment", "EmployerDepartment")
                        .WithMany()
                        .HasForeignKey("EmployerDepartmentId");

                    b.HasOne("ProfOsmotr.DAL.User", "LastEditor")
                        .WithMany()
                        .HasForeignKey("LastEditorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProfOsmotr.DAL.Patient", "Patient")
                        .WithMany("IndividualCheckupStatuses")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProfOsmotr.DAL.PreliminaryMedicalExamination", "PreliminaryMedicalExamination")
                        .WithOne("CheckupStatus")
                        .HasForeignKey("ProfOsmotr.DAL.IndividualCheckupStatus", "PreliminaryMedicalExaminationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProfOsmotr.DAL.Profession", "Profession")
                        .WithMany("IndividualCheckupStatuses")
                        .HasForeignKey("ProfessionId");

                    b.Navigation("CheckupResult");

                    b.Navigation("EmployerDepartment");

                    b.Navigation("LastEditor");

                    b.Navigation("Patient");

                    b.Navigation("PreliminaryMedicalExamination");

                    b.Navigation("Profession");
                });

            modelBuilder.Entity("ProfOsmotr.DAL.NewlyDiagnosedChronicSomaticDisease", b =>
                {
                    b.HasOne("ProfOsmotr.DAL.ContingentCheckupStatus", "ContingentCheckupStatus")
                        .WithMany("NewlyDiagnosedChronicSomaticDiseases")
                        .HasForeignKey("ContingentCheckupStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProfOsmotr.DAL.ICD10Chapter", "ICD10Chapter")
                        .WithMany()
                        .HasForeignKey("ICD10ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContingentCheckupStatus");

                    b.Navigation("ICD10Chapter");
                });

            modelBuilder.Entity("ProfOsmotr.DAL.NewlyDiagnosedOccupationalDisease", b =>
                {
                    b.HasOne("ProfOsmotr.DAL.ContingentCheckupStatus", "ContingentCheckupStatus")
                        .WithMany("NewlyDiagnosedOccupationalDiseases")
                        .HasForeignKey("ContingentCheckupStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProfOsmotr.DAL.ICD10Chapter", "ICD10Chapter")
                        .WithMany()
                        .HasForeignKey("ICD10ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContingentCheckupStatus");

                    b.Navigation("ICD10Chapter");
                });

            modelBuilder.Entity("ProfOsmotr.DAL.OrderExamination", b =>
                {
                    b.HasOne("ProfOsmotr.DAL.ServiceDetails", "DefaultServiceDetails")
                        .WithMany()
                        .HasForeignKey("DefaultServiceDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProfOsmotr.DAL.TargetGroup", "TargetGroup")
                        .WithMany()
                        .HasForeignKey("TargetGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DefaultServiceDetails");

                    b.Navigation("TargetGroup");
                });

            modelBuilder.Entity("ProfOsmotr.DAL.Patient", b =>
                {
                    b.HasOne("ProfOsmotr.DAL.Clinic", "Clinic")
                        .WithMany()
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProfOsmotr.DAL.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("ProfOsmotr.DAL.PeriodicMedicalExamination", b =>
                {
                    b.HasOne("ProfOsmotr.DAL.Clinic", "Clinic")
                        .WithMany()
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProfOsmotr.DAL.EmployerData", "EmployerData")
                        .WithMany()
                        .HasForeignKey("EmployerDataId");

                    b.HasOne("ProfOsmotr.DAL.Employer", "Employer")
                        .WithMany("PeriodicMedicalExaminations")
                        .HasForeignKey("EmployerId");

                    b.HasOne("ProfOsmotr.DAL.User", "LastEditor")
                        .WithMany()
                        .HasForeignKey("LastEditorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");

                    b.Navigation("Employer");

                    b.Navigation("EmployerData");

                    b.Navigation("LastEditor");
                });

            modelBuilder.Entity("ProfOsmotr.DAL.PreliminaryMedicalExamination", b =>
                {
                    b.HasOne("ProfOsmotr.DAL.Clinic", "Clinic")
                        .WithMany()
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProfOsmotr.DAL.Employer", "Employer")
                        .WithMany()
                        .HasForeignKey("EmployerId");

                    b.HasOne("ProfOsmotr.DAL.User", "LastEditor")
                        .WithMany()
                        .HasForeignKey("LastEditorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");

                    b.Navigation("Employer");

                    b.Navigation("LastEditor");
                });

            modelBuilder.Entity("ProfOsmotr.DAL.Service", b =>
                {
                    b.HasOne("ProfOsmotr.DAL.Clinic", "Clinic")
                        .WithMany("Services")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProfOsmotr.DAL.OrderExamination", "OrderExamination")
                        .WithMany("Services")
                        .HasForeignKey("OrderExaminationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProfOsmotr.DAL.ServiceAvailabilityGroup", "ServiceAvailabilityGroup")
                        .WithMany()
                        .HasForeignKey("ServiceAvailabilityGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProfOsmotr.DAL.ServiceDetails", "ServiceDetails")
                        .WithMany()
                        .HasForeignKey("ServiceDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");

                    b.Navigation("OrderExamination");

                    b.Navigation("ServiceAvailabilityGroup");

                    b.Navigation("ServiceDetails");
                });

            modelBuilder.Entity("ProfOsmotr.DAL.User", b =>
                {
                    b.HasOne("ProfOsmotr.DAL.Clinic", "Clinic")
                        .WithMany("Users")
                        .HasForeignKey("ClinicId");

                    b.HasOne("ProfOsmotr.DAL.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ProfOsmotr.DAL.UserProfile", b =>
                {
                    b.HasOne("ProfOsmotr.DAL.User", "User")
                        .WithOne("UserProfile")
                        .HasForeignKey("ProfOsmotr.DAL.UserProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProfOsmotr.DAL.Calculation", b =>
                {
                    b.Navigation("CalculationResultItems");

                    b.Navigation("CalculationSources");
                });

            modelBuilder.Entity("ProfOsmotr.DAL.Clinic", b =>
                {
                    b.Navigation("ActualClinicServices");

                    b.Navigation("Calculations");

                    b.Navigation("ClinicDetails");

                    b.Navigation("Services");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ProfOsmotr.DAL.ContingentCheckupStatus", b =>
                {
                    b.Navigation("ContingentCheckupIndexValues");

                    b.Navigation("NewlyDiagnosedChronicSomaticDiseases");

                    b.Navigation("NewlyDiagnosedOccupationalDiseases");
                });

            modelBuilder.Entity("ProfOsmotr.DAL.Employer", b =>
                {
                    b.Navigation("Departments");

                    b.Navigation("PeriodicMedicalExaminations");
                });

            modelBuilder.Entity("ProfOsmotr.DAL.IndividualCheckupStatus", b =>
                {
                    b.Navigation("IndividualCheckupIndexValues");
                });

            modelBuilder.Entity("ProfOsmotr.DAL.OrderExamination", b =>
                {
                    b.Navigation("ActualClinicServices");

                    b.Navigation("ExaminationResultIndexes");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("ProfOsmotr.DAL.Patient", b =>
                {
                    b.Navigation("ContingentCheckupStatuses");

                    b.Navigation("IndividualCheckupStatuses");
                });

            modelBuilder.Entity("ProfOsmotr.DAL.PeriodicMedicalExamination", b =>
                {
                    b.Navigation("Statuses");
                });

            modelBuilder.Entity("ProfOsmotr.DAL.PreliminaryMedicalExamination", b =>
                {
                    b.Navigation("CheckupStatus");
                });

            modelBuilder.Entity("ProfOsmotr.DAL.Profession", b =>
                {
                    b.Navigation("ContingentCheckupStatuses");

                    b.Navigation("IndividualCheckupStatuses");
                });

            modelBuilder.Entity("ProfOsmotr.DAL.User", b =>
                {
                    b.Navigation("Calculations");

                    b.Navigation("UserProfile");
                });
#pragma warning restore 612, 618
        }
    }
}
