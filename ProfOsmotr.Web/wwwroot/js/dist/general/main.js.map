{"version":3,"sources":["webpack://ProfOsmotr.Web/./wwwroot/js/src/util/common.js","webpack://ProfOsmotr.Web/./wwwroot/js/src/util/custom-validation.js","webpack://ProfOsmotr.Web/./wwwroot/js/src/util/profession-input.js","webpack://ProfOsmotr.Web/./wwwroot/js/src/util/modal/custom-modal-base.js","webpack://ProfOsmotr.Web/./wwwroot/js/src/util/modal/modal-form.js","webpack://ProfOsmotr.Web/./wwwroot/js/src/util/custom-datatable.js","webpack://ProfOsmotr.Web/./wwwroot/js/src/util/success-toast.js","webpack://ProfOsmotr.Web/./wwwroot/js/src/util/modal/modal-datatable.js","webpack://ProfOsmotr.Web/./wwwroot/js/src/order-examinations.js","webpack://ProfOsmotr.Web/./wwwroot/js/src/order-examination-indexes.js","webpack://ProfOsmotr.Web/./wwwroot/js/src/order-items.js","webpack://ProfOsmotr.Web/./wwwroot/js/src/main.js","webpack://ProfOsmotr.Web/./wwwroot/js/src/util/script-manager.js","webpack://ProfOsmotr.Web/./wwwroot/js/src/calculation-company.js","webpack://ProfOsmotr.Web/./wwwroot/js/src/util/simple-list.js","webpack://ProfOsmotr.Web/./wwwroot/js/src/calculation-edit.js","webpack://ProfOsmotr.Web/./wwwroot/js/src/calculation-single.js","webpack://ProfOsmotr.Web/./wwwroot/js/src/catalog-list.js","webpack://ProfOsmotr.Web/./wwwroot/js/src/clinic-list.js","webpack://ProfOsmotr.Web/./wwwroot/js/src/clinic-settings.js","webpack://ProfOsmotr.Web/./wwwroot/js/src/register-create-request.js","webpack://ProfOsmotr.Web/./wwwroot/js/src/register-requests.js","webpack://ProfOsmotr.Web/./wwwroot/js/src/user-list.js","webpack://ProfOsmotr.Web/./wwwroot/js/src/user-login.js","webpack://ProfOsmotr.Web/webpack/bootstrap","webpack://ProfOsmotr.Web/webpack/runtime/define property getters","webpack://ProfOsmotr.Web/webpack/runtime/global","webpack://ProfOsmotr.Web/webpack/runtime/hasOwnProperty shorthand","webpack://ProfOsmotr.Web/webpack/runtime/make namespace object","webpack://ProfOsmotr.Web/webpack/runtime/jsonp chunk loading","webpack://ProfOsmotr.Web/webpack/startup"],"names":["async","fetchDecorator","url","config","response","fetch","ok","json","status","errorResponse","success","message","error","errors","alert","processBadRequestResult","str","parseFloat","replace","number","toLocaleString","undefined","obj","i","html","div","document","createElement","innerHTML","firstElementChild","method","credentials","dataObject","headers","body","JSON","stringify","CustomValidation","input","validityCheck","this","invalidityMessage","inputNode","registerListener","ValidityCheck","isInvalid","validate","inputs","length","checkInput","addValidation","resetValidation","classList","remove","prototype","checkValidity","rerenderValidity","setCustomValidity","addEventListener","VALID_CLASSNAME","INVALID_CLASSNAME","MESSAGE_BLOCK_CLASSNAME","nextNode","nextSibling","add","contains","invalidityMessageBlock","innerText","parentNode","insertBefore","DefaultChecks","phone","value","match","email","username","password","requiredText500","requiredText70","requiredText20","positiveInteger","Number","isInteger","price","initOrderItemsSelect","orderData","selector","$","select2","data","map","getSelect2Data","multiple","placeholder","theme","width","hasClass","templateResult","option","text","templateSelection","key","language","noResults","workWithSelect","orderItem","id","name","CLASSNAME_DISPLAY_NONE","options","_modalElement","model","buttonsData","_build","buttonData","element","disabled","visibility","_id","counter","existing","getElementById","getId","modal","show","_prepareToShow","extend","_setTitle","enableButtons","_createModalElement","_createModalBody","_createButtons","_addModalHiddenEventListener","on","_onModalHidden","bind","appendChild","bodyContent","_getModalBodyContent","Error","modalBody","querySelector","buttons","parent","buttonConfig","button","_getButton","push","className","event","preventDefault","target","_getContentValidationResult","action","path","props","split","title","titleElement","RENDER_DATA_ATTR_VALUE","super","_dataElements","forEach","dispatchEvent","Event","_form","_createForm","reset","_seedData","dataObj","dataElement","_createDataElement","_addFormEventListeners","querySelectorAll","item","onElementValueChanged","dataset","_getPathById","type","_updateModel","checked","isDisabled","readonly","control","_getInput","template","label","container","checkbox","firstChild","_getCheckbox","_getFormControl","_getVisibleDataElement","select","_getSelect","_addValidation","render","_getDataContainer","row","tagName","CLASSNAME_CUSTOM_MODAL","_getValue","DefaultDt","style","rows","_","order","orderMulti","processing","scrollerConfig","scrollY","scrollCollapse","deferRender","scroller","serverSideAjax","contentType","d","dom","_options","_applyOptions","_table","tableId","DataTable","_config","ajax","reload","console","log","ajaxUrl","scroll","serverSide","Object","assign","advanced","_applyDomConfig","buttonDomFlag","paginationDomFlag","_scroller","Default","_createToastElement","toast","dataTableOptions","_getDataTableId","dataTable","getTable","sourceURL","then","newData","clear","draw","_createTable","seedTable","tr","column","columns","th","thead","table","_dataTableId","OrderExaminationsPage","succesToast","_this","_getExaminationsData","_createDataTable","_createExaminationModal","_createExaminationIndexesModal","_examinationsData","_getTableData","ordering","e","dt","_examinationModal","selected","editing","_examinationIndexes","examinationsTable","targetGroups","group","Option","_onSaveExamination","successToast","_indexModal","_getIndexConfig","mainModal","_getMainConfig","_fixMultipleModalsOverlay","examinationdId","examinationName","examination","zIndex","css","setTimeout","not","addClass","_removeIndex","_onIndexSave","examinationId","hide","orderExaminations","_convertToTableData","targetGroup","targetGroupId","find","defaultServiceDetails","isMandatory","defaultServiceCode","code","defaultServiceFullName","fullName","updatedExamination","index","node","call","newExamination","SELECTOR_EXAMINATIONS","OrderItemsPage","_getOrderData","_createModal","_orderItems","_orderExaminationsMap","Map","_getDataTableData","ex","join","_showModal","_removeItem","orderTable","_onSave","orderItemModal","_initSelect2","orderItemResource","examinations","get","select2Data","Array","from","entries","parseInt","updatedItem","newItem","itemData","confirm","succeed","elementsToDisableOnEditItem","val","trigger","scriptManager","namespace","pageId","_getPageId","_fire","page","funcName","professionConstructor","inputsToValidateOnAddProfession","inputsToValidateOnCreateCalculation","SELECTOR_ORDER_ITEMS_SELECT","SELECTOR_COMPANY_NAME_INPUT","professionsList","_modelMap","_listElement","_processButtonRemoveItem","itemTemplate","array","source","includes","itemElement","_renderNewItem","_addEventListeners","set","values","delete","_buttonRemoveItem","removeChild","parentElement","reverse","ProfessionName","NumberOfPersons","NumberOfWomen","NumberOfWomenOver40","NumberOfPersonsOver40","numberOfPersonsValidityCheck","isInvalidNumberOfPersons","numberOfPersonsOver40ValidityCheck","isInvalidNumberOfPersonsOver40","numberOfWomenValidityCheck","isInvalidNumberOfWomen","numberOfWomenOver40ValidityCheck","isInvalidNumberOfWomenOver40","numberInputs","getElementsByClassName","checkAllNumbersOnOneChange","startValidateNumbers","companyData","calculationSource","professions","getData","calculation","location","priceInputs","SELECTOR_RESULT_ITEM_BASE","amountInputs","sumElements","groupSelects","onPriceChanged","isPriceInputInvalid","resultId","getResultId","amountInput","getAmountInput","isAmountInputInvalid","getSumElement","calculateSum","calculateTotalSum","onAmountChanged","priceInput","getPriceInput","formInput","onGroupChange","sumInput","checkInputsValidityOnSelectChange","selectedIndex","showInputs","hideInputs","getInput","totalSum","Results","calculationId","resultItems","formGroup","slice","amount","groupId","createUpdateCalculationRequestData","professionNameInput","singleCalc","professionName","orderItems","isWoman","womenCount","isOver40","numberOfPersons","numberOfWomen","numberOfWomenOver40","numberOfPersonsOver40","getCalculationSource","SELECTOR_SERVICE_CODE","SELECTOR_SERVICE_FULL_NAME","SELECTOR_SERVICE_PRICE","SELECTOR_SERVICE_GROUP","modalOptions","requestData","orderExaminationId","serviceAvailabilityGroupId","service","updated","tableRow","Date","updateTime","groupCell","serviceAvailabilityGroupName","renderCatalogChanges","serviceModal","ID_DATATABLE_CLINIC_LIST","currentUserId","clinic","onManageClinic","isBlocked","searchable","orderable","needBlock","ajaxReload","fullNameInput","shortNameInput","addressInput","phoneInput","emailInput","saveButton","form","ClinicDetails","formData","FormData","fromEntries","candidateFullNameInput","candidateShortNameInput","candidateAddressInput","candidatePhoneInput","candidateEmailInput","candidateModeratorNameInput","candidateModeratorPositionInput","candidateModeratorUsernameInput","candidateModeratorPasswordInput","validatedRegisterRequestInputs","submitRegisterRequestBtn","RegisterRequest","shortName","address","user","position","_createDataTables","_createRegisterRequestsModal","columnsBase","tableButtons","registerRequestModal","newRequestsTableConfig","newRequestsDataTable","processedRequestsTableColumns","processedRequestTableConfig","processedRequestsDataTable","_manageRegisterRequest","approved","processed","isGlobal","global","usernameData","passwordData","confirmPasswordData","getConfirmPasswordData","confirmPasswordData2","nameData","positionData","createUserModalConfig","getRoleData","roleId","role","result","processResult","createUserModal","editProfileModalConfig","editProfileModal","changePasswordModal","dataTableConfig","clinicCol","inputToConfirmSelector","getConfirmPasswordValidityCheck","getRoleOptions","login","loginErrorMessage","loginButton","load","__webpack_module_cache__","__webpack_require__","moduleId","exports","module","__webpack_modules__","m","definition","o","defineProperty","enumerable","g","globalThis","Function","window","prop","hasOwnProperty","r","Symbol","toStringTag","installedChunks","179","deferredModules","checkDeferredModules","checkDeferredModulesImpl","deferredModule","fulfilled","j","depId","splice","s","x","chunkLoadingGlobal","webpackJsonpCallback","chunkId","chunkIds","moreModules","runtime","executeModules","resolves","parentChunkLoadingFunction","shift","apply","self"],"mappings":"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","file":"main.js","sourcesContent":["﻿const Util = {\r\n    customParseFloat: function (str) {\r\n        return parseFloat(str.replace(',', '.').replace(/\\s/g, ''));\r\n    },\r\n\r\n    toCurrencyString: function (number) {\r\n        return number.toLocaleString(undefined,\r\n            {\r\n                'minimumFractionDigits': 2,\r\n                'maximumFractionDigits': 2,\r\n                'useGrouping': false\r\n            });\r\n    },\r\n\r\n    escapeHTML: function (str) {\r\n        if (typeof (str) !== 'string')\r\n            return null;\r\n        return str\r\n            .replace(/&/g, \"&amp;\")\r\n            .replace(/</g, \"&lt;\")\r\n            .replace(/>/g, \"&gt;\")\r\n            .replace(/\"/g, \"&quot;\")\r\n            .replace(/'/g, \"&#039;\");\r\n    },\r\n\r\n    isEmpty: function (obj) {\r\n        for (let i in obj)\r\n            return false;\r\n        return true;\r\n    },\r\n\r\n    toElement: function (html) {\r\n        let div = document.createElement('div');\r\n        div.innerHTML = html;\r\n        return div.firstElementChild;\r\n    },\r\n\r\n    deleteResource: async function (url) {\r\n        return await fetchDecorator(url, {\r\n            method: 'DELETE',\r\n            credentials: 'same-origin'\r\n        });\r\n    },\r\n\r\n    getData: async function (url) {\r\n        return await fetchDecorator(url, {\r\n            credentials: 'same-origin'\r\n        });\r\n    },\r\n\r\n    postData: async function (url, dataObject) {\r\n        return await fetchDecorator(url, {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json;charset=utf-8' },\r\n            credentials: 'same-origin',\r\n            body: JSON.stringify(dataObject)\r\n        });\r\n    },\r\n\r\n    removeAllChildren: function (node) {\r\n        while (node.firstChild) {\r\n            node.removeChild(node.lastChild);\r\n        }\r\n    }\r\n};\r\n\r\nasync function fetchDecorator(url, config) {\r\n    const response = await fetch(url, config);\r\n    if (response.ok) {\r\n        return await response.json();\r\n    }\r\n    await processBadRequestResult(response);\r\n    return undefined;\r\n}\r\n\r\nasync function processBadRequestResult(response) {\r\n    if (response.status === 400) {\r\n        let errorResponse = await response.json();\r\n        if (errorResponse.success === false) {\r\n            let message = 'Во время обработки запроса возникла ошибка. Обратитесь к администратору.\\n';\r\n            for (let error of errorResponse.errors) {\r\n                message += error + '\\n'\r\n            }\r\n            alert(message);\r\n        }\r\n    }\r\n    else {\r\n        alert('Во время обработки запроса произошла ошибка. Код ошибки: ' + response.status);\r\n    }\r\n}\r\n\r\nexport default Util;","﻿function CustomValidation(input, validityCheck) {\r\n    this.invalidityMessage;\r\n    this.inputNode = input;\r\n    this.validityCheck = validityCheck;\r\n\r\n    this.registerListener();\r\n}\r\n\r\nfunction ValidityCheck(invalidityMessage, isInvalid) {\r\n    this.invalidityMessage = invalidityMessage;\r\n    this.isInvalid = isInvalid;\r\n}\r\n\r\nCustomValidation.prototype = {\r\n    checkValidity: function (input) {\r\n        let isInvalid = this.validityCheck.isInvalid(input);\r\n        if (isInvalid) {\r\n            this.invalidityMessage = this.validityCheck.invalidityMessage;\r\n        }\r\n        else {\r\n            this.invalidityMessage = null;\r\n        }\r\n        this.rerenderValidity(input, isInvalid);\r\n    },\r\n    checkInput: function () {\r\n        this.inputNode.CustomValidation.invalidityMessage = null;\r\n        this.checkValidity(this.inputNode);\r\n\r\n        if (this.inputNode.CustomValidation.invalidityMessage == null) {\r\n            this.inputNode.setCustomValidity('');\r\n        }\r\n        else {\r\n            var message = this.inputNode.CustomValidation.invalidityMessage;\r\n            this.inputNode.setCustomValidity(message);\r\n        }\r\n    },\r\n    registerListener: function () {\r\n        var CustomValidation = this;\r\n        this.inputNode.addEventListener('keyup', function () {\r\n            CustomValidation.checkInput();\r\n        });\r\n    },\r\n    rerenderValidity: function (input, isInvalid) {\r\n        const VALID_CLASSNAME = 'is-valid';\r\n        const INVALID_CLASSNAME = 'is-invalid';\r\n        const MESSAGE_BLOCK_CLASSNAME = 'invalid-feedback';\r\n\r\n        let nextNode = input.nextSibling;\r\n        if (isInvalid) {\r\n            input.classList.add(INVALID_CLASSNAME);\r\n            input.classList.remove(VALID_CLASSNAME);\r\n            if (!nextNode || !nextNode.classList || !nextNode.classList.contains(MESSAGE_BLOCK_CLASSNAME)) {\r\n                let invalidityMessageBlock = document.createElement('div');\r\n                invalidityMessageBlock.classList.add(MESSAGE_BLOCK_CLASSNAME);\r\n                invalidityMessageBlock.innerText = this.invalidityMessage;\r\n                input.parentNode.insertBefore(invalidityMessageBlock, nextNode);\r\n            }\r\n        }\r\n        else {\r\n            input.classList.add(VALID_CLASSNAME);\r\n            input.classList.remove(INVALID_CLASSNAME);\r\n            if (nextNode && nextNode.classList && nextNode.classList.contains(MESSAGE_BLOCK_CLASSNAME))\r\n                nextNode.remove();\r\n        }\r\n    }\r\n};\r\n\r\nfunction validate(inputs) {\r\n    for (var i = 0; i < inputs.length; i++) {\r\n        if (inputs[i].CustomValidation)\r\n            inputs[i].CustomValidation.checkInput();\r\n    }\r\n}\r\n\r\nfunction addValidation(input, validityCheck) {\r\n    input.CustomValidation = new CustomValidation(input, validityCheck);\r\n}\r\n\r\nfunction resetValidation(inputs) {\r\n    for (let input of inputs) {\r\n        input.classList.remove('is-valid');\r\n        input.classList.remove('is-invalid');\r\n    }\r\n}\r\n\r\nconst DefaultChecks = {\r\n    phone: new ValidityCheck(\r\n        'Должен соответствовать шаблону: +7 123 4567890',\r\n        input => !input.value.match(/^\\+7 \\d{3} \\d{7}$/)),\r\n\r\n    email: new ValidityCheck(\r\n        'Должно быть похоже на xxx@yyyy.zz',\r\n        input => !input.value.match(/\\S+@\\S+\\.\\S+/) || input.value.length > 300),\r\n\r\n    username: new ValidityCheck(\r\n        'Может содержать только буквы латинского алфавита и цифры. От 3 до 20 символов',\r\n        input => !input.value.match(/^[0-9A-Za-z]{3,20}$/)),\r\n\r\n    password: new ValidityCheck(\r\n        'Может содержать только буквы латинского алфавита, цифры и спецсимволы. От 8 до 20 символов',\r\n        input => !input.value.match(/^[A-Za-z\\d!@#$%^&*_+-?]{8,20}$/)),\r\n\r\n    requiredText500: new ValidityCheck(\r\n        'Обязательное. До 500 символов',\r\n        input => !input.value.match(/^.{1,500}$/)),\r\n\r\n    requiredText70: new ValidityCheck(\r\n        'Обязательное. До 70 символов',\r\n        input => !input.value.match(/^.{1,70}$/)),\r\n\r\n    requiredText20: new ValidityCheck(\r\n        'Обязательное. До 20 символов',\r\n        input => !input.value.match(/^.{1,20}$/)),\r\n\r\n    positiveInteger: new ValidityCheck(\r\n        'Число должно быть целым и неотрицательным',\r\n        input => input.value === '' || !Number.isInteger(+input.value) || +input.value < 0),\r\n\r\n    price: new ValidityCheck(\r\n        'Значение должно быть неотрицательным, целым либо с двумя знаками после точки',\r\n        input => !input.value.match(/^\\d+([,\\.]\\d\\d)?$/))\r\n}\r\n\r\n\r\nexport { CustomValidation, ValidityCheck, validate, addValidation, resetValidation, DefaultChecks };","﻿import Util from './common';\r\n\r\n/*\r\n *  Добавление опций в селекты пунктов приказа\r\n */\r\nasync function initOrderItemsSelect() {\r\n    const orderData = await Util.getData('/api/order/getOrder');\r\n    if (orderData) {\r\n        workWithSelect('#OrderItems', orderData);\r\n    }\r\n}\r\n\r\nfunction workWithSelect(selector, orderData) {\r\n    const _formatOption = option => {\r\n        const text = Util.escapeHTML(option.text);\r\n        const html = `<span style=\"display: block; overflow: hidden; white-space: nowrap;\" title=\"${text}\">${text}</span>`;\r\n        return $(html);\r\n    };\r\n    const _formatSelection = option => option.key;\r\n\r\n\r\n    $(selector).select2({\r\n        data: orderData.map(getSelect2Data),\r\n        multiple: true,\r\n        placeholder: 'Найти по номеру или названию пункта...',\r\n        theme: 'bootstrap4',\r\n        width: $(this).data('width') ? $(this).data('width') : $(this).hasClass('w-100') ? '100%' : 'style',\r\n        templateResult: _formatOption,\r\n        templateSelection: _formatSelection,\r\n        language: {\r\n            noResults: () => 'Совпадений не найдено'\r\n        }\r\n    });\r\n}\r\n\r\nfunction getSelect2Data(orderItem) {\r\n    return {\r\n        id: orderItem.id,\r\n        text: `${orderItem.key}. ${orderItem.name}`,\r\n        key: orderItem.key\r\n    }\r\n}\r\n\r\nexport { initOrderItemsSelect };","﻿import Util from '../common';\r\n\r\n\r\n// Options\r\n// --- title : string | function (model) : void (required) // Заголовок модального окна\r\n// --- buttons : [] // Кнопки модального окна\r\n// ------ text : string (required) // Текст\r\n// ------ action : async function (model) : void (required) // Действие, выполняемое при клике\r\n// ------ className : string // CSS классы\r\n// ------ visibility : function (model) : boolean // Условие видимости кнопки, в зависимости от состояния модели\r\n\r\n\r\nconst CLASSNAME_DISPLAY_NONE = 'd-none';\r\nconst CLASSNAME_MODAL_TITLE = 'modal-title';\r\nconst CLASSNAME_MODAL_BODY = 'modal-body';\r\nconst CLASSNAME_MODAL_FOOTER = 'modal-footer';\r\nconst CLASSNAME_BUTTON_DEFAULT = 'btn btn-primary';\r\n\r\nconst EVENT_MODAL_SHOW = 'show';\r\nconst EVENT_MODAL_HIDE = 'hide';\r\nconst EVENT_MODAL_HIDDEN = 'hidden.bs.modal';\r\n\r\nconst BASE_MODAL_ID = 'custom-modal-';\r\n\r\nconst TEMPLATE_MODAL = `<div class=\"modal fade\" data-backdrop=\"static\" tabindex=\"-1\" role=\"dialog\" aria-hidden=\"true\">\r\n<div class=\"modal-dialog  modal-dialog-centered modal-lg\" role=\"document\">\r\n<div class=\"modal-content\">\r\n<div class=\"modal-header\">\r\n<h5 class=\"${CLASSNAME_MODAL_TITLE}\"></h5>\r\n<button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n<span aria-hidden=\"true\">&times;</span>\r\n</button>\r\n</div>\r\n<div class=\"${CLASSNAME_MODAL_BODY}\">\r\n</div>\r\n<div class=\"${CLASSNAME_MODAL_FOOTER}\">\r\n</div>\r\n</div>\r\n</div>\r\n</div>`;\r\n\r\n\r\nclass CustomBootstrapModalBase {\r\n    constructor(options) {\r\n        this._modalElement = null;\r\n        this.model = null;\r\n        this.buttonsData = [];\r\n        this.options = options;\r\n\r\n        this._build();\r\n    };\r\n\r\n\r\n    // Public\r\n\r\n    enableButtons() {\r\n        for (let buttonData of this.buttonsData) {\r\n            buttonData.element.disabled = false;\r\n            if (buttonData.visibility === true || Util.isEmpty(this.model) || buttonData.visibility(this.model))\r\n                buttonData.element.classList.remove(CLASSNAME_DISPLAY_NONE);\r\n            else\r\n                buttonData.element.classList.add(CLASSNAME_DISPLAY_NONE);\r\n        }\r\n    };\r\n\r\n    getId() {\r\n        if (!this._id) {\r\n            let counter = 0;\r\n            let id = null;\r\n            let existing = null;\r\n            do {\r\n                id = BASE_MODAL_ID + ++counter;\r\n                existing = document.getElementById(id);\r\n            } while (existing);\r\n            this._id = id;\r\n        }\r\n        return this._id;\r\n    };\r\n\r\n    hide() {\r\n        $(`#${this.getId()}`).modal(EVENT_MODAL_HIDE);\r\n    };\r\n\r\n    show() {\r\n        this.show(null);\r\n    }\r\n\r\n    show(model) {\r\n        this._prepareToShow(model);\r\n        $(`#${this.getId()}`).modal(EVENT_MODAL_SHOW);\r\n    };\r\n\r\n\r\n    // \"Protected\"\r\n\r\n    _getContentValidationResult() {\r\n        return true;\r\n    }\r\n\r\n    _getModalBodyContent() {\r\n        // \"Abstract\"\r\n    }\r\n\r\n    _onModalHidden() {\r\n\r\n    }\r\n\r\n    _prepareToShow(model) {\r\n        this.model = $.extend(true, {}, model);\r\n        this._setTitle();\r\n        this.enableButtons();\r\n    }\r\n\r\n\r\n    // Private\r\n\r\n    _build() {\r\n        this._createModalElement();\r\n        this._createModalBody();\r\n        this._createButtons();\r\n        this._addModalHiddenEventListener();\r\n    };\r\n\r\n    _addModalHiddenEventListener() {\r\n        $(`#${this.getId()}`).on(EVENT_MODAL_HIDDEN, this._onModalHidden.bind(this));\r\n    };\r\n\r\n    _createModalElement() {\r\n        this._modalElement = Util.toElement(TEMPLATE_MODAL);\r\n        this._modalElement.id = this.getId();\r\n        document.body.appendChild(this._modalElement);\r\n    };\r\n\r\n    _createModalBody() {\r\n        const bodyContent = this._getModalBodyContent();\r\n        if (!bodyContent)\r\n            throw new Error('Содержимое модального окна не определено');\r\n        this.modalBody = this._modalElement.querySelector('.' + CLASSNAME_MODAL_BODY);\r\n        this.modalBody.appendChild(bodyContent);\r\n    };\r\n\r\n    _createButtons() {\r\n        if (!this.options.buttons)\r\n            return;\r\n        let parent = this._modalElement.querySelector('.' + CLASSNAME_MODAL_FOOTER);\r\n\r\n        for (let buttonConfig of this.options.buttons) {\r\n            let button = this._getButton(buttonConfig);\r\n            parent.appendChild(button);\r\n\r\n            this.buttonsData.push({\r\n                element: button,\r\n                visibility: typeof buttonConfig.visibility == 'function' ? buttonConfig.visibility : true\r\n            });\r\n        }\r\n    };\r\n\r\n    _getButton(config) {\r\n        let button = document.createElement('button');\r\n        button.className = config.className ? config.className : CLASSNAME_BUTTON_DEFAULT;\r\n        button.innerText = config.text;\r\n        button.addEventListener('click', onBtnClick.bind(this));\r\n\r\n        return button;\r\n\r\n        async function onBtnClick(event) {\r\n            event.preventDefault();\r\n            event.target.disabled = true;\r\n            const canExecute = this._getContentValidationResult();\r\n            if (!canExecute) {\r\n                event.target.disabled = false;\r\n                return;\r\n            }\r\n            await config.action(this.model);\r\n        }\r\n    };\r\n\r\n    _updateModel(path, value) {\r\n        let props = path.split('.');\r\n        let obj = this.model;\r\n\r\n        for (let i = 0; i < props.length; i++) {\r\n            if (i === props.length - 1)\r\n                obj[props[i]] = value;\r\n            else {\r\n                if (!obj[props[i]])\r\n                    obj[props[i]] = {};\r\n                obj = obj[props[i]];\r\n            }\r\n        }\r\n    };\r\n\r\n    _getValue(path) {\r\n        if (path === null)\r\n            return null;\r\n\r\n        let obj = this.model;\r\n        let props = path.split('.');\r\n\r\n        for (let i = 0; i < props.length; i++) {\r\n            if (i === props.length - 1)\r\n                return obj[props[i]];\r\n            else\r\n                obj = obj[props[i]];\r\n        }\r\n    };\r\n\r\n    _setTitle() {\r\n        const title = this.options.title;\r\n        const titleElement = this._modalElement.querySelector('.' + CLASSNAME_MODAL_TITLE);\r\n        switch (typeof (title)) {\r\n            case 'string':\r\n                titleElement.innerText = title;\r\n                break;\r\n            case 'function':\r\n                titleElement.innerText = title(this.model);\r\n                break;\r\n        }\r\n    };\r\n}\r\n\r\nexport default CustomBootstrapModalBase;","﻿import Util from '../common';\r\nimport CustomBootstrapModalBase from './custom-modal-base';\r\nimport { addValidation, validate, resetValidation } from '../custom-validation';\r\n\r\n\r\n// Options\r\n// --- title : string | function (model) : void (required) // Заголовок модального окна\r\n// --- data : [] (required) // Элементы данных модального окна\r\n// ------ id : string (required, unique) // Уникальный идентификатор\r\n// ------ path : string (required) // Путь к свойству объекта модели\r\n// ------ label : string (required) // Label (название) для соответствующего html-тега\r\n// ------ type : string ('input-text' | 'input-password' | 'textarea' | 'select') (required) // Тип элемента формы\r\n// ------ render : function (any) : string // Функция, преобразующая отображаемое значение текстового поля. Редактирование данных не будет отражаться в модели\r\n// ------ readonly : boolean // Если true, значение будет недоступно для редактирования\r\n// ------ validityCheck : ValidityCheck // Объект, описывающий условие валидности элемента формы\r\n// ------ options : [] of Option (for 'select' type only)\r\n// --- buttons : [] // Кнопки модального окна\r\n// ------ text : string (required) // Текст\r\n// ------ action : async function (model) : void (required) // Действие, выполняемое при клике\r\n// ------ className : string // CSS классы\r\n// ------ visibility : function (model) : boolean // Условие видимости кнопки, в зависимости от состояния модели\r\n// --- readonly : boolean // Если true, все элементы будут недоступны для редактирования\r\n\r\n\r\nconst CLASSNAME_CUSTOM_MODAL = 'js-custom-modal';\r\nconst CLASSNAME_FORM_CONTROL = 'form-control';\r\n\r\nconst ID_DATA_ATTR = 'data-custom-modal-id';\r\nconst ID_DATA_ATTR_DATASET = 'customModalId';\r\nconst RENDER_DATA_ATTR_DATASET = 'customModalRendered';\r\nconst RENDER_DATA_ATTR_VALUE = 'true';\r\n\r\nconst TEMPLATE_FORM_ROW = '<div class=\"form-group\"></div>';\r\n\r\n\r\nclass ModalForm extends CustomBootstrapModalBase {\r\n    constructor(options) {\r\n        super(options);\r\n    };\r\n\r\n\r\n    // Overrides\r\n\r\n    _getContentValidationResult() {\r\n        this._dataElements.forEach(element => element.dispatchEvent(new Event('change')));\r\n        validate(this._dataElements);\r\n        return this._form.checkValidity()\r\n    }\r\n\r\n    _getModalBodyContent() {\r\n        return this._createForm();\r\n    }\r\n\r\n    _onModalHidden() {\r\n        super._onModalHidden();\r\n\r\n        this._form.reset();\r\n        resetValidation(this._dataElements);\r\n        this.model = null;\r\n    }\r\n\r\n    _prepareToShow(model) {\r\n        super._prepareToShow(model);\r\n\r\n        if (model)\r\n            this._seedData();\r\n    }\r\n\r\n\r\n    // Private\r\n\r\n    _createForm() {\r\n        this._form = document.createElement('form');\r\n        for (let dataObj of this.options.data) {\r\n            let dataElement = this._createDataElement(dataObj);\r\n            this._form.appendChild(dataElement);\r\n        }\r\n\r\n        this._addFormEventListeners();\r\n\r\n        return this._form;\r\n    };\r\n\r\n    _addFormEventListeners() {\r\n        this._dataElements = this._form.querySelectorAll(`.${CLASSNAME_CUSTOM_MODAL}`);\r\n        for (let item of this._dataElements) {\r\n            item.addEventListener('keyup', onElementValueChanged.bind(this));\r\n            item.addEventListener('change', onElementValueChanged.bind(this));\r\n        }\r\n\r\n        function onElementValueChanged(event) {\r\n            let element = event.target;\r\n            let id = element.dataset[ID_DATA_ATTR_DATASET];\r\n            let path = this._getPathById(id);\r\n            if (path && element.dataset[RENDER_DATA_ATTR_DATASET] !== RENDER_DATA_ATTR_VALUE) {\r\n                if (element.type === 'checkbox') {\r\n                    this._updateModel(path, element.checked);\r\n                } else {\r\n                    this._updateModel(path, element.value);\r\n                }\r\n            }\r\n        };\r\n    };\r\n\r\n    _createDataElement(data) {\r\n        const isDisabled = data.readonly || this.options.readonly;\r\n        let control = null;\r\n        switch (data.type) {\r\n            case 'input-text':\r\n                control = _getInput('text');\r\n                break;\r\n            case 'input-password':\r\n                control = _getInput('password');\r\n                break;\r\n            case 'input-checkbox':\r\n                return _getCheckbox();\r\n            case 'textarea':\r\n                control = _getFormControl('textarea');\r\n                break;\r\n            case 'select':\r\n                return _getVisibleDataElement(_getSelect());\r\n        }\r\n\r\n        if (data.validityCheck && !data.readonly)\r\n            this._addValidation(data.validityCheck, control);\r\n\r\n        if (data.render) {\r\n            control.dataset[RENDER_DATA_ATTR_DATASET] = RENDER_DATA_ATTR_VALUE;\r\n        }\r\n\r\n        return _getVisibleDataElement(control);\r\n\r\n        function _getVisibleDataElement(dataElement) {\r\n            let container = _getDataContainer();\r\n            container.appendChild(dataElement);\r\n\r\n            let row = _getFormRow();\r\n            row.appendChild(container);\r\n            return row;\r\n        };\r\n\r\n        function _getInput(type) {\r\n            let input = _getFormControl('input');\r\n            input.type = type;\r\n            return input;\r\n        };\r\n\r\n        function _getSelect() {\r\n            let select = _getFormControl('select');\r\n            for (let option of data.options) {\r\n                select.options.add(option);\r\n            }\r\n            return select;\r\n        };\r\n\r\n        function _getFormControl(tagName) {\r\n            let control = document.createElement(tagName);\r\n            control.className = CLASSNAME_CUSTOM_MODAL + ' ' + CLASSNAME_FORM_CONTROL;\r\n            control.dataset[ID_DATA_ATTR_DATASET] = data.id;\r\n            control.disabled = isDisabled;\r\n            return control;\r\n        };\r\n\r\n        function _getDataContainer() {\r\n            let html = `<label style=\"display:block;\"><span style=\"display:block; margin-bottom: .5rem;\">${data.label}</span></label>`;\r\n            return Util.toElement(html);\r\n        };\r\n\r\n        function _getFormRow() {\r\n            return Util.toElement(TEMPLATE_FORM_ROW);\r\n        };\r\n\r\n        function _getCheckbox() {\r\n            const template = `<div class=\"form-group form-check\">    \r\n                                <label class=\"form-check-label\">${data.label}</label>\r\n                              </div>`;\r\n            const container = Util.toElement(template);\r\n\r\n            const checkbox = document.createElement('input');\r\n            checkbox.type = 'checkbox';\r\n            checkbox.classList.add(CLASSNAME_CUSTOM_MODAL, 'form-check-input');\r\n            checkbox.dataset[ID_DATA_ATTR_DATASET] = data.id;\r\n            checkbox.disabled = isDisabled;\r\n\r\n            container.insertBefore(checkbox, container.firstChild);\r\n            return container;\r\n        }\r\n    };\r\n\r\n    _addValidation(validityCheck, element) {\r\n        if (element.tagName !== 'select') {\r\n            addValidation(element, validityCheck);\r\n        }\r\n    };\r\n\r\n    _getPathById(id) {\r\n        for (let dataObj of this.options.data) {\r\n            if (dataObj.id === id)\r\n                return dataObj.path;\r\n        }\r\n        return null;\r\n    };\r\n\r\n    _seedData() {\r\n        for (let dataObj of this.options.data) {\r\n            let value = this._getValue(dataObj.path);\r\n            if (value === null || value === undefined)\r\n                continue;\r\n            let element = this._modalElement.querySelector(`[${ID_DATA_ATTR}=\"${dataObj.id}\"]`);\r\n            if (element.type === 'checkbox') {\r\n                element.checked = value ? true : false;\r\n            } else {\r\n                element.value = dataObj.render ? dataObj.render(value) : value;\r\n            }\r\n        }\r\n    };\r\n}\r\n\r\nexport default ModalForm;","﻿const DOM_FLAG_BUTTON = 'B';\r\nconst DOM_FLAG_PAGINATION = 'p';\r\n\r\nconst PLACEHOLDER_DOM_BUTTON = '{BUTTON}';\r\nconst PLACEHOLDER_PAGINATION = '{PAGINATION}';\r\n\r\nconst localisation = {\r\n    \"decimal\": \"\",\r\n    \"emptyTable\": \"Нет данных для отображения\",\r\n    \"info\": \"Всего элементов: _TOTAL_\",\r\n    \"infoEmpty\": \"\",\r\n    \"infoFiltered\": \"(отфильтровано из _MAX_ элементов)\",\r\n    \"infoPostFix\": \"\",\r\n    \"thousands\": \",\",\r\n    \"lengthMenu\": \"_MENU_ элементов на страницу\",\r\n    \"loadingRecords\": \"Загрузка...\",\r\n    \"processing\": \"Загрузка...\",\r\n    \"search\": \"Поиск:\",\r\n    \"zeroRecords\": \"Ничего не найдено\",\r\n    \"paginate\": {\r\n        \"first\": \"Начало\",\r\n        \"last\": \"Конец\",\r\n        \"next\": \"Вперед\",\r\n        \"previous\": \"Назад\"\r\n    },\r\n    \"aria\": {\r\n        \"sortAscending\": \": сортировка по возрастанию\",\r\n        \"sortDescending\": \": сортировка по убыванию\"\r\n    },\r\n    select: {\r\n        rows: {\r\n            _: ''\r\n        }\r\n    }\r\n};\r\n\r\nconst DefaultDt = {\r\n    config: {\r\n        select: {\r\n            style: 'single'\r\n        },\r\n        language: localisation,\r\n        order: [[0, 'asc']],\r\n        orderMulti: false,\r\n        processing: true\r\n    },\r\n    scrollerConfig: {\r\n        scrollY: 450,\r\n        scrollCollapse: true,\r\n        deferRender: true,\r\n        scroller: true\r\n    },\r\n    serverSideAjax: {\r\n        type: 'POST',\r\n        contentType: 'application/json; charset=utf-8',\r\n        data: (d) => JSON.stringify(d)\r\n    },\r\n    dom: `<'row'<'col-sm-12 col-md-6'${PLACEHOLDER_DOM_BUTTON}><'col-sm-12 col-md-6'f>>\r\n\t\t<'row'<'col-sm-12'tr>>\r\n\t\t<'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'${PLACEHOLDER_PAGINATION}>>`\r\n}\r\n\r\n// Options:\r\n// --- tableId, // (обязательно) id целевой таблицы\r\n// --- ajaxUrl, // URL для запроса данных в формате dataTables\r\n// --- serverSide : Boolean // Если true, то таблица будет загружаться генерируемыми на сервере фрагментами (требуется настройка на сервере - см. DataTables)\r\n// --- scroll : Boolean // если true, применяются настройки скролла из конфига по умолчанию\r\n// --- advanced : {} // Обычный конфиг dataTables, который будет наложен поверх настроенного, если необходима детальная настройка\r\n// ------ (например, можно переопределить order или задать columns, buttons)\r\n// ------ columns, // (обязательно для ajax) см. dataTables\r\n// --------- (коротко)\r\n// --------- data : string // путь к свойству с данными\r\n// --------- name : string // имя свойства с данными, которое будет отправлено с запросом при serverSide обработке\r\n// --------- render : function(data, type, row) : string // функция обработки данных для отображения\r\n// --------- searchable : Boolean // Если true, данные из колонки будет возможно найти поиском\r\n// --------- orderable : Boolean // Если true, возможна сортировка\r\n// ------ buttons // см. dataTables, коротко:\r\n// --------- text : string // Текст кнопки\r\n// --------- action: function(e, dt, button, config) // действие при клике\r\n// --------- extend: 'selectedSingle' // кнопка активна только, если выделена одна строка в таблице\r\n\r\nclass CustomDataTable {\r\n    constructor(options) {\r\n        this._options = options;\r\n        this._applyOptions();\r\n        this._table = $('#' + this._options.tableId).DataTable(this._config);\r\n    };\r\n\r\n    getTable() {\r\n        return this._table;\r\n    };\r\n\r\n    ajaxReload() {\r\n        if (!this._config.ajax) {\r\n            console.log('CustomDataTable: Невозможно перезагрузить данные для этой таблицы посредствам ajax');\r\n            return;\r\n        }\r\n        this._table.ajax.reload();\r\n    }\r\n\r\n    _applyOptions() {\r\n        this._config = $.extend(true, {}, DefaultDt.config);\r\n\r\n        if (this._options.ajaxUrl) {\r\n            this._config.ajax = {\r\n                url: this._options.ajaxUrl\r\n            }\r\n        }\r\n\r\n        if (this._options.scroll) {\r\n            this._config = { ...this._config, ...DefaultDt.scrollerConfig };\r\n        }\r\n\r\n        if (this._options.serverSide) {\r\n            if (this._config.ajax) {\r\n                this._config.serverSide = true;\r\n                Object.assign(this._config.ajax, DefaultDt.serverSideAjax);\r\n            } else {\r\n                console.log('CustomDataTable: Для обработки таблиц на сервере, задайте ajaxUrl');\r\n            }\r\n        }\r\n\r\n        if (this._options.advanced) {\r\n            Object.assign(this._config, this._options.advanced);\r\n        }\r\n\r\n        this._applyDomConfig();\r\n    };\r\n\r\n    _applyDomConfig() {\r\n        let buttonDomFlag = '';\r\n        let paginationDomFlag = '';\r\n\r\n        if (this._config.buttons) {\r\n            buttonDomFlag = DOM_FLAG_BUTTON;\r\n        }\r\n        if (!this._scroller) {\r\n            paginationDomFlag = DOM_FLAG_PAGINATION;\r\n        }\r\n\r\n        this._config.dom = DefaultDt.dom.replace(PLACEHOLDER_DOM_BUTTON, buttonDomFlag)\r\n                                      .replace(PLACEHOLDER_PAGINATION, paginationDomFlag);\r\n    }\r\n}\r\n\r\nexport default CustomDataTable;","﻿// Всплывающее в правом нижнем углу сообщение об успешности операции. Основано на Bootstrap toast.\r\n\r\nimport Util from './common';\r\n\r\nconst Default = {\r\n    id: 'SuccessToast', // id элемента toast\r\n    millisecondsDelay: 3000, // задержка перед исчезнованием сообщения\r\n    className: 'toast-body alert-success font-weight-bold' // классы оформления блока сообщения\r\n}\r\n\r\nconst TEMPLATE = `<div class=\"toast\" id=\"${Default.id}\" role=\"alert\" data-delay=\"${Default.millisecondsDelay}\" \r\nstyle=\"position: fixed; bottom: 15px; right: 20px; min-width: 250px;\">\r\n    <div class=\"${Default.className}\">\r\n        Операция выполнена успешно\r\n    </div>\r\n</div>`\r\n\r\nclass SuccessToast {\r\n    constructor() {\r\n        this._createToastElement();\r\n\r\n    }\r\n\r\n    show() {\r\n        $('#' + Default.id).toast('show');\r\n    }\r\n\r\n    _createToastElement() {\r\n        let existing = document.getElementById(Default.id);\r\n        if (existing)\r\n            return;\r\n\r\n        let element = Util.toElement(TEMPLATE);\r\n        document.body.appendChild(element);\r\n    }\r\n\r\n    _initToast() {\r\n        $('#' + Default.id).toast();\r\n    }\r\n}\r\n\r\nexport default SuccessToast;","﻿import Util from '../common';\r\nimport CustomDataTable from '../custom-datatable';\r\nimport CustomBootstrapModalBase from './custom-modal-base';\r\n\r\n\r\n// Options\r\n// --- title : string | function (model) : void (required) // Заголовок модального окна\r\n// --- columns : [] // Столбцы таблицы\r\n// ------ title : string // Название столбца\r\n// --- buttons : [] // Кнопки модального окна\r\n// ------ text : string (required) // Текст\r\n// ------ action : async function (model) : void (required) // Действие, выполняемое при клике\r\n// ------ className : string // CSS классы\r\n// ------ visibility : function (model) : boolean // Условие видимости кнопки, в зависимости от состояния модели\r\n// --- dataTableOptions : Object // Конфигурация DataTables\r\n\r\n\r\nconst CLASSNAME_TABLE = \"table table-bordered table-striped w-100\";\r\n\r\n\r\nclass ModalDataTable extends CustomBootstrapModalBase {\r\n    constructor(options) {\r\n        super(options);\r\n\r\n        this.options.dataTableOptions.tableId = this._getDataTableId();\r\n        this.dataTable = new CustomDataTable(this.options.dataTableOptions).getTable();\r\n    }\r\n\r\n\r\n    seedTable() { // конфигурация ajax dataTables не используется из-за сложностей замены url\r\n        Util.getData(this.model.sourceURL)\r\n            .then(newData => {\r\n                if (newData) {\r\n                    this.dataTable.clear();\r\n                    this.dataTable.rows.add(newData);\r\n                    this.dataTable.draw();\r\n                }\r\n            });\r\n    }\r\n\r\n\r\n    // Overrides\r\n\r\n    //_getContentValidationResult() {\r\n    //    return true;\r\n    //}\r\n\r\n    _getModalBodyContent() {\r\n        return this._createTable();\r\n    }\r\n\r\n    _onModalHidden() {\r\n        super._onModalHidden();\r\n\r\n        this.dataTable.clear();\r\n    }\r\n\r\n    _prepareToShow(model) {\r\n        super._prepareToShow(model);\r\n\r\n        this.seedTable();\r\n    }\r\n\r\n\r\n    // Private\r\n\r\n    _createTable() {\r\n        const tr = document.createElement('tr');\r\n\r\n        for (let column of this.options.columns) {\r\n            const th = document.createElement('th');\r\n            th.innerText = column.title;\r\n\r\n            tr.appendChild(th);\r\n        }\r\n\r\n        const thead = document.createElement('thead');\r\n        thead.appendChild(tr);\r\n\r\n        const table = document.createElement('table');\r\n        table.id = this._getDataTableId();\r\n        table.className = CLASSNAME_TABLE;\r\n        table.appendChild(thead);\r\n\r\n        return table;\r\n    }\r\n\r\n    _getDataTableId() {\r\n        if (this._dataTableId) {\r\n            return this._dataTableId;\r\n        }\r\n        this._dataTableId = this.getId() + '-table';\r\n        return this._dataTableId;\r\n    }\r\n}\r\n\r\nexport default ModalDataTable;","﻿import Util from './util/common';\r\nimport ModalForm from './util/modal/modal-form';\r\nimport CustomDataTable from './util/custom-datatable';\r\nimport SuccessToast from './util/success-toast';\r\nimport { DefaultChecks } from './util/custom-validation';\r\nimport OrderExaminationIndexes from './order-examination-indexes';\r\n\r\n\r\nconst URI_API_ORDER_EXAMINATIONS_DATA = '/api/order/getExaminations';\r\nconst URI_API_ORDER_EXAMINATION_CREATE = '/api/order/addExamination';\r\nconst URI_API_ORDER_EXAMINATION_UPDATE = '/api/order/updateExamination';\r\n\r\nclass OrderExaminationsPage {\r\n    constructor() {\r\n        this.succesToast = new SuccessToast();\r\n    }\r\n\r\n\r\n    // Static\r\n\r\n    static init() {\r\n        return (async () => {\r\n            const _this = new OrderExaminationsPage();\r\n\r\n            await _this._getExaminationsData();\r\n\r\n            _this._createDataTable();\r\n            _this._createExaminationModal();\r\n            _this._createExaminationIndexesModal();\r\n        })();\r\n    }\r\n\r\n\r\n    // Private\r\n\r\n    async _getExaminationsData() {\r\n        this._examinationsData = await Util.getData(URI_API_ORDER_EXAMINATIONS_DATA);\r\n    }\r\n\r\n    _createDataTable() {\r\n        const config = {\r\n            tableId: 'Examinations',\r\n            advanced: {\r\n                data: this._getTableData(),\r\n                ordering: false,\r\n                columns: [\r\n                    {\r\n                        data: 'name',\r\n                        render: (data, type, row) => Util.escapeHTML(data)\r\n                    },\r\n                    {\r\n                        data: 'targetGroup.name',\r\n                        render: (data, type, row) => Util.escapeHTML(data)\r\n                    },\r\n                    {\r\n                        data: 'defaultServiceDetails.fullName',\r\n                        render: (data, type, row) => Util.escapeHTML(data)\r\n                    }\r\n                ],\r\n                buttons: [\r\n                    {\r\n                        text: 'Добавить обследование',\r\n                        action: (e, dt, button, config) => {\r\n                            this._examinationModal.show(null);\r\n                        }\r\n                    },\r\n                    {\r\n                        extend: 'selectedSingle',\r\n                        text: 'Редактировать',\r\n                        action: (e, dt, button, config) => {\r\n                            let model = dt.row({ selected: true }).data();\r\n                            model.editing = true;\r\n                            this._examinationModal.show(model);\r\n                        }\r\n                    },\r\n                    {\r\n                        extend: 'selectedSingle',\r\n                        text: 'Показатели результата',\r\n                        action: (e, dt, button, config) => {\r\n                            let model = dt.row({ selected: true }).data();\r\n                            this._examinationIndexes.show(model.id, model.name);\r\n                        }\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n\r\n        this.examinationsTable = new CustomDataTable(config).getTable();\r\n    }\r\n\r\n    _createExaminationModal() {\r\n        const config = {\r\n            title: (model) => model.editing ? `Редактирование обследования: ${model.name}` : \"Создание нового обследования\",\r\n            data: [\r\n                {\r\n                    id: 'target-group',\r\n                    path: 'targetGroup.id',\r\n                    label: 'Целевая группа',\r\n                    type: 'select',\r\n                    options: this._examinationsData.targetGroups.map(group => new Option(group.name, group.id))\r\n                },\r\n                {\r\n                    id: 'name',\r\n                    path: 'name',\r\n                    label: 'Название по приказу',\r\n                    type: 'textarea',\r\n                    validityCheck: DefaultChecks.requiredText500\r\n                },\r\n                {\r\n                    id: 'service-code',\r\n                    path: 'defaultServiceDetails.code',\r\n                    label: 'Код услуги по умолчанию',\r\n                    type: 'input-text',\r\n                    validityCheck: DefaultChecks.requiredText20\r\n                },\r\n                {\r\n                    id: 'service-full-name',\r\n                    path: 'defaultServiceDetails.fullName',\r\n                    label: 'Полное наименование услуги по умолчанию',\r\n                    type: 'textarea',\r\n                    validityCheck: DefaultChecks.requiredText500\r\n                },\r\n                {\r\n                    id: 'is-mandatory',\r\n                    path: 'isMandatory',\r\n                    label: 'Обязательное при любом осмотре',\r\n                    type: 'input-checkbox'\r\n                }\r\n            ],\r\n            buttons: [\r\n                {\r\n                    text: 'Сохранить',\r\n                    action: this._onSaveExamination.bind(this)\r\n                }\r\n            ]\r\n        }\r\n\r\n        this._examinationModal = new ModalForm(config);\r\n    }\r\n\r\n    _createExaminationIndexesModal() {\r\n        this._examinationIndexes = new OrderExaminationIndexes(this.succesToast);\r\n    }\r\n\r\n    _getTableData() {\r\n        return this._examinationsData.orderExaminations\r\n            .map(examination => this._convertToTableData(examination));\r\n    }\r\n\r\n    _convertToTableData(examination) {\r\n        return {\r\n            id: examination.id,\r\n            name: examination.name,\r\n            targetGroup: {\r\n                id: examination.targetGroupId,\r\n                name: this._examinationsData.targetGroups\r\n                    .find(group => group.id == examination.targetGroupId)\r\n                    .name\r\n            },\r\n            defaultServiceDetails: examination.defaultServiceDetails,\r\n            isMandatory: examination.isMandatory\r\n        };\r\n    }\r\n\r\n    async _onSaveExamination(model) {\r\n        const data = {\r\n            name: model.name,\r\n            defaultServiceCode: model.defaultServiceDetails.code,\r\n            defaultServiceFullName: model.defaultServiceDetails.fullName,\r\n            targetGroupId: +model.targetGroup.id,\r\n            isMandatory: model.isMandatory\r\n        };\r\n\r\n        let response;\r\n\r\n        if (model.editing) {\r\n            response = await updateExamination.call(this);\r\n        } else {\r\n            response = await createExamination.call(this);\r\n        }\r\n\r\n        if (response) {\r\n            this._examinationModal.hide();\r\n            this.succesToast.show();\r\n        }\r\n        else {\r\n            this._examinationModal.enableButtons();\r\n        }\r\n\r\n        async function updateExamination() {\r\n            const updatedExamination = await Util.postData(\r\n                URI_API_ORDER_EXAMINATION_UPDATE,\r\n                Object.assign(data, { id: model.id })\r\n            );\r\n\r\n            if (updatedExamination) {\r\n                this.examinationsTable\r\n                    .row((index, data, node) => data.id === updatedExamination.id)\r\n                    .data(this._convertToTableData(updatedExamination))\r\n                    .draw();\r\n                return updatedExamination;\r\n            }\r\n        }\r\n\r\n        async function createExamination() {\r\n            const newExamination = await Util.postData(URI_API_ORDER_EXAMINATION_CREATE, data);\r\n\r\n            if (newExamination) {\r\n                this.examinationsTable\r\n                    .row\r\n                    .add(this._convertToTableData(newExamination))\r\n                    .draw();\r\n                return newExamination;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default OrderExaminationsPage;","﻿import Util from './util/common';\r\nimport { DefaultChecks } from './util/custom-validation';\r\nimport ModalDataTable from './util/modal/modal-datatable';\r\nimport ModalForm from './util/modal/modal-form';\r\n\r\n\r\nconst URI_API_ORDER_INDEXES = '/api/order/getIndexes';\r\nconst URI_API_INDEX_CREATE = '/api/order/examination/{0}/index'; // POST\r\nconst URI_API_INDEX_DELETE = '/api/order/index'; // DELETE with /{id}\r\nconst URI_API_INDEX_UPDATE = '/api/order/index'; // POST with /{id}\r\n\r\n\r\nclass OrderExaminationIndexes {\r\n    constructor(successToast) {\r\n        this._indexModal = new ModalForm(this._getIndexConfig());\r\n        this.mainModal = new ModalDataTable(this._getMainConfig());\r\n        this.successToast = successToast;\r\n        this._fixMultipleModalsOverlay();\r\n    }\r\n\r\n\r\n    // Public\r\n\r\n    show(examinationdId, examinationName) {\r\n        const model = {\r\n            sourceURL: `${URI_API_ORDER_INDEXES}/${examinationdId}`,\r\n            examination: examinationName\r\n        };\r\n        this.mainModal.show(model);\r\n        this.examinationdId = examinationdId;\r\n    }\r\n\r\n\r\n    // Private\r\n\r\n    _fixMultipleModalsOverlay() {\r\n        // Решение позаимствовано. Источник: https://stackoverflow.com/a/24914782/13467303\r\n\r\n        $(document).on('show.bs.modal', '.modal', function () {\r\n            const zIndex = 1040 + (10 * $('.modal:visible').length);\r\n            $(this).css('z-index', zIndex);\r\n            setTimeout(function () {\r\n                $('.modal-backdrop').not('.modal-stack').css('z-index', zIndex - 1).addClass('modal-stack');\r\n            }, 0);\r\n        });\r\n    }\r\n\r\n    _getMainConfig() {\r\n        const config = {\r\n            title: (model) => `Показатели обследования: ${model.examination}`,\r\n            columns: [\r\n                {\r\n                    title: 'Название'\r\n                },\r\n                {\r\n                    title: 'Единицы измерения'\r\n                },\r\n            ],\r\n            dataTableOptions: {\r\n                advanced: {\r\n                    columns: [\r\n                        {\r\n                            data: 'title',\r\n                            render: (data, type, row) => Util.escapeHTML(data)\r\n                        },\r\n                        {\r\n                            data: 'unitOfMeasure',\r\n                            render: (data, type, row) => Util.escapeHTML(data)\r\n                        }\r\n                    ],\r\n                    buttons: [\r\n                        {\r\n                            text: 'Добавить',\r\n                            action: (e, dt, button, config) => this._indexModal.show()\r\n                        },\r\n                        {\r\n                            text: 'Редактировать',\r\n                            action: (e, dt, button, config) => {\r\n                                let model = dt.row({ selected: true }).data();\r\n                                model.editing = true;\r\n                                this._indexModal.show(model);\r\n                            },\r\n                            extend: 'selectedSingle'\r\n                        },\r\n                        {\r\n                            text: 'Удалить',\r\n                            action: (e, dt, button, config) => {\r\n                                let model = dt.row({ selected: true }).data();\r\n                                this._removeIndex(model.id);\r\n                            },\r\n                            extend: 'selectedSingle'\r\n                        }\r\n                    ]\r\n                }\r\n            }\r\n        };\r\n\r\n        return config;\r\n    }\r\n\r\n    _getIndexConfig() {\r\n        const config = {\r\n            title: model => model.editing ? 'Редактирование показателя' : 'Добавление показателя',\r\n            data: [\r\n                {\r\n                    id: 'title',\r\n                    path: 'title',\r\n                    label: 'Название',\r\n                    type: 'input-text',\r\n                    validityCheck: DefaultChecks.requiredText70\r\n                },\r\n                {\r\n                    id: 'unitOfMeasure',\r\n                    path: 'unitOfMeasure',\r\n                    label: 'Единицы измерения',\r\n                    type: 'input-text',\r\n                    validityCheck: DefaultChecks.requiredText70\r\n                }\r\n            ],\r\n            buttons: [\r\n                {\r\n                    text: 'Сохранить',\r\n                    action: this._onIndexSave.bind(this)\r\n                }\r\n            ]\r\n        };\r\n        return config;\r\n    }\r\n\r\n    async _removeIndex(id) {\r\n        const response = await Util.deleteResource(`${URI_API_INDEX_DELETE}/${id}`);\r\n        if (response) {\r\n            this.mainModal.seedTable();\r\n        }\r\n    }\r\n\r\n    async _onIndexSave(model) {\r\n        const url = model.editing ? `${URI_API_INDEX_UPDATE}/${model.id}` : getIndexCreateURL(this.examinationdId);\r\n        const response = await Util.postData(url, model);\r\n\r\n        if (response) {\r\n            this.successToast.show();\r\n            this.mainModal.seedTable();\r\n            this._indexModal.hide();\r\n        }\r\n        else {\r\n            this._indexModal.enableButtons();\r\n        }\r\n\r\n        function getIndexCreateURL(examinationId) {\r\n            return URI_API_INDEX_CREATE.replace('{0}', examinationId);\r\n        }\r\n    }\r\n}\r\n\r\nexport default OrderExaminationIndexes;","﻿import Util from './util/common';\r\nimport ModalForm from './util/modal/modal-form';\r\nimport CustomDataTable from './util/custom-datatable';\r\nimport SuccessToast from './util/success-toast';\r\nimport { DefaultChecks } from './util/custom-validation';\r\n\r\n\r\nconst URI_API_ORDER_ITEMS = '/api/order/getOrder?nocache=true';\r\nconst URI_API_ORDER_ITEM_CREATE = '/api/order/addItem';\r\nconst URI_API_ORDER_ITEM_UPDATE = '/api/order/updateItem';\r\nconst URI_API_ORDER_ITEM_REMOVE = '/api/order/deleteItem';\r\nconst URI_API_ORDER_EXAMINATIONS = '/api/order/getExaminationsMin';\r\n\r\nconst ID_SELECT_EXAMINATIONS = 'examinations';\r\nconst ID_KEY = 'key';\r\n\r\nconst SELECTOR_EXAMINATIONS = `select[data-custom-modal-id=\"${ID_SELECT_EXAMINATIONS}\"`;\r\nconst SELECTOR_KEY = `input[data-custom-modal-id=\"${ID_KEY}\"`;\r\n\r\n\r\nclass OrderItemsPage {\r\n    constructor() {\r\n        this.succesToast = new SuccessToast();\r\n    }\r\n\r\n\r\n    // Static\r\n\r\n    static init() {\r\n        return (async () => {\r\n            let _this = new OrderItemsPage();\r\n\r\n            await _this._getOrderData();\r\n            _this._createDataTable();\r\n            _this._createModal();\r\n\r\n            return _this;\r\n        })();\r\n    }\r\n\r\n\r\n    // Private\r\n\r\n    async _getOrderData() {\r\n        this._orderItems = await Util.getData(URI_API_ORDER_ITEMS);\r\n\r\n        let orderExaminations = await Util.getData(URI_API_ORDER_EXAMINATIONS);\r\n        this._orderExaminationsMap = new Map(orderExaminations.map(i => [i.id, i.name]));\r\n    }\r\n\r\n    _createDataTable() {\r\n        const config = {\r\n            tableId: 'OrderItems',\r\n            advanced: {\r\n                data: this._getDataTableData(),\r\n                ordering: false,\r\n                columns: [\r\n                    {\r\n                        data: 'key',\r\n                        render: (data, type, row) => Util.escapeHTML(data)\r\n                    },\r\n                    {\r\n                        data: 'name',\r\n                        render: (data, type, row) => Util.escapeHTML(data)\r\n                    },\r\n                    {\r\n                        data: 'examinations',\r\n                        render: (data, type, row) => data.map(ex => Util.escapeHTML(ex.name)).join('<br>')\r\n                    }\r\n                ],\r\n                buttons: [\r\n                    {\r\n                        text: 'Добавить пункт',\r\n                        action: (e, dt, button, config) => {\r\n                            this._showModal(null);\r\n                        }\r\n                    },\r\n                    {\r\n                        extend: 'selectedSingle',\r\n                        text: 'Редактировать',\r\n                        action: (e, dt, button, config) => {\r\n                            let model = dt.row({ selected: true }).data();\r\n                            model.editing = true;\r\n                            this._showModal(model);\r\n                        }\r\n                    },\r\n                    {\r\n                        extend: 'selectedSingle',\r\n                        text: 'Удалить',\r\n                        action: async (e, dt, button, config) => {\r\n                            let data = dt.row({ selected: true }).data();\r\n                            await this._removeItem(data);\r\n                        }\r\n                    }\r\n                ]\r\n            }\r\n        };\r\n\r\n        this.orderTable = new CustomDataTable(config).getTable();\r\n    }\r\n\r\n    _createModal() {\r\n        let config = {\r\n            title: (model) => model.editing ? `Редактирование пункта ${model.key}` : 'Создание нового пункта',\r\n            data: [\r\n                {\r\n                    id: 'key',\r\n                    path: 'key',\r\n                    label: 'Пункт',\r\n                    type: 'input-text',\r\n                    validityCheck: DefaultChecks.requiredText70\r\n                },\r\n                {\r\n                    id: 'name',\r\n                    path: 'name',\r\n                    label: 'Название',\r\n                    type: 'textarea',\r\n                    validityCheck: DefaultChecks.requiredText500\r\n                },\r\n                {\r\n                    id: ID_SELECT_EXAMINATIONS,\r\n                    path: 'examinations',\r\n                    label: 'Обследования',\r\n                    type: 'select',\r\n                    options: [] // будет инициализирован через select2\r\n                }\r\n            ],\r\n            buttons: [\r\n                {\r\n                    text: 'Сохранить',\r\n                    action: this._onSave.bind(this)\r\n                }\r\n            ]\r\n        };\r\n\r\n        this.orderItemModal = new ModalForm(config);\r\n        this._initSelect2();\r\n    }\r\n\r\n    _getDataTableData() {\r\n        return this._orderItems.map(item => this._convertToTableData(item));\r\n    }\r\n\r\n    _convertToTableData(orderItemResource) {\r\n        return {\r\n            id: orderItemResource.id,\r\n            key: orderItemResource.key,\r\n            name: orderItemResource.name,\r\n            examinations: orderItemResource.orderExaminations.map(id => {\r\n                return {\r\n                    id: id,\r\n                    name: this._orderExaminationsMap.get(id)\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    _initSelect2() {\r\n        const select2Data = Array.from(this._orderExaminationsMap.entries())\r\n            .map(i => {\r\n                return {\r\n                    id: i[0],\r\n                    text: i[1]\r\n                }\r\n            });\r\n\r\n        $(SELECTOR_EXAMINATIONS).select2({\r\n            data: select2Data,\r\n            multiple: true,\r\n            placeholder: 'Найти по названию',\r\n            theme: 'bootstrap4'\r\n        });\r\n    }\r\n\r\n    async _onSave(model) {\r\n        const examinations = $(SELECTOR_EXAMINATIONS).select2('data').map(i => parseInt(i.id));\r\n        let response;\r\n\r\n        if (model.editing === true) {\r\n            response = await updateOrderItem.call(this);\r\n        } else {\r\n            response = await createOrderItem.call(this);\r\n        }\r\n\r\n        if (response) {\r\n            this.orderItemModal.hide();\r\n            this.succesToast.show();\r\n        }\r\n        else {\r\n            this.orderItemModal.enableButtons();\r\n        }\r\n\r\n        async function updateOrderItem() {\r\n            const updatedItem = await Util.postData(URI_API_ORDER_ITEM_UPDATE, {\r\n                id: model.id,\r\n                name: model.name,\r\n                examinations\r\n            });\r\n\r\n            if (updatedItem) {\r\n                this.orderTable\r\n                    .row((index, data, node) => data.id === updatedItem.id)\r\n                    .data(this._convertToTableData(updatedItem))\r\n                    .draw();\r\n                return updatedItem;\r\n            }\r\n        }\r\n\r\n        async function createOrderItem() {\r\n            const newItem = await Util.postData(URI_API_ORDER_ITEM_CREATE, {\r\n                key: model.key,\r\n                name: model.name,\r\n                examinations\r\n            });\r\n\r\n            if (newItem) {\r\n                this.orderTable\r\n                    .row\r\n                    .add(this._convertToTableData(newItem))\r\n                    .draw();\r\n                return newItem;\r\n            }\r\n        }\r\n    }\r\n\r\n    async _removeItem(itemData) {\r\n        if (confirm(`Вы действительно хотите удалить пункт \"${itemData.key}\"?`)) {\r\n            const response = await Util.postData(URI_API_ORDER_ITEM_REMOVE, itemData.id);\r\n            if (response.succeed) {\r\n                this.orderTable\r\n                    .row((index, data, node) => data.id === itemData.id)\r\n                    .remove()\r\n                    .draw();\r\n                this.succesToast.show();\r\n            }\r\n        }\r\n    }\r\n\r\n    _showModal(model) {\r\n        const elementsToDisableOnEditItem = [\r\n            document.querySelector(SELECTOR_KEY)\r\n        ];\r\n\r\n        if (!model) {\r\n            processModalElementsOnCreateItem();\r\n        } else {\r\n            processModalElementsOnEditItem();\r\n        }\r\n\r\n        this.orderItemModal.show(model);\r\n        setSelectedExaminations();\r\n\r\n\r\n        function setSelectedExaminations() {\r\n            $(SELECTOR_EXAMINATIONS).val(model?.examinations.map(ex => ex.id)).trigger('change');\r\n        }\r\n\r\n        function processModalElementsOnEditItem() {\r\n            elementsToDisableOnEditItem.forEach(element => element.disabled = true);\r\n        }\r\n\r\n        function processModalElementsOnCreateItem() {\r\n            elementsToDisableOnEditItem.forEach(element => element.disabled = false);\r\n        }\r\n    }\r\n}\r\n\r\nexport default OrderItemsPage;","﻿// Vendor\r\nimport 'jquery';\r\nimport 'bootstrap';\r\nimport 'jquery-mask-plugin';\r\nimport 'select2';\r\nimport 'datatables.net-bs4';\r\nimport 'datatables.net-buttons-bs4';\r\nimport 'datatables.net-fixedheader-bs4';\r\nimport 'datatables.net-rowgroup-bs4';\r\nimport 'datatables.net-scroller-bs4';\r\nimport 'datatables.net-select-bs4';\r\n\r\n// Internal\r\nimport ScriptManager from './util/script-manager';\r\nimport initCalculationCompany from './calculation-company';\r\nimport initCalculationEdit from './calculation-edit';\r\nimport initCalculationSingle from './calculation-single';\r\nimport initCatalogList from './catalog-list';\r\nimport initClinicList from './clinic-list';\r\nimport initClinicSettings from './clinic-settings';\r\nimport OrderExaminationsPage from './order-examinations';\r\nimport OrderItemsPage from './order-items';\r\nimport initRegisterCreateRequest from './register-create-request';\r\nimport RegisterRequestsListPage from './register-requests';\r\nimport initUserList from './user-list';\r\nimport initUserLogin from './user-login';\r\n\r\n// Styles\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'select2/dist/css/select2.min.css';\r\nimport '@ttskch/select2-bootstrap4-theme/dist/select2-bootstrap4.min.css';\r\nimport 'datatables.net-bs4/css/dataTables.bootstrap4.min.css';\r\nimport 'datatables.net-fixedheader-bs4/css/fixedHeader.bootstrap4.min.css';\r\nimport 'datatables.net-buttons-bs4/css/buttons.bootstrap4.min.css';\r\nimport 'datatables.net-rowgroup-bs4/css/rowGroup.bootstrap4.min.css';\r\nimport 'datatables.net-scroller-bs4/css/scroller.bootstrap4.min.css';\r\nimport 'datatables.net-select-bs4/css/select.bootstrap4.min.css';\r\nimport '../../css/src/site.css';\r\n\r\n\r\nconst namespace = {\r\n    'calculation-company': initCalculationCompany,\r\n    'calculation-edit': initCalculationEdit,\r\n    'calculation-single': initCalculationSingle,\r\n    'catalog-list': initCatalogList,\r\n    'clinic-list': initClinicList,\r\n    'clinic-settings': initClinicSettings,\r\n    'order-examinations': OrderExaminationsPage.init,\r\n    'order-items': OrderItemsPage.init,\r\n    'register-create-request': initRegisterCreateRequest,\r\n    'register-requests': () => new RegisterRequestsListPage(),\r\n    'user-list': () => initUserList(),\r\n    'user-login': () => initUserLogin()\r\n};\r\n\r\nconst scriptManager = new ScriptManager(namespace);\r\ndocument.addEventListener('DOMContentLoaded', event => scriptManager.load());","﻿// Запускает определенные функции на заданных страницах.\r\n\r\nclass ScriptManager {\r\n\r\n    constructor(namespace) {\r\n        this.namespace = namespace;\r\n    }\r\n\r\n    load() {\r\n        const pageId = this._getPageId();\r\n\r\n        this._fire('common');\r\n        this._fire(pageId);\r\n    }\r\n\r\n    _getPageId() {\r\n        return document.body.dataset.page;\r\n    }\r\n\r\n    _fire(funcName) {\r\n        if (funcName !== '' && this.namespace[funcName] && typeof this.namespace[funcName] == 'function') {\r\n            this.namespace[funcName]();\r\n        }\r\n    }\r\n}\r\n\r\nexport default ScriptManager;","﻿import SimpleList from './util/simple-list';\r\nimport Util from './util/common';\r\nimport { addValidation, resetValidation, validate, ValidityCheck, DefaultChecks } from './util/custom-validation';\r\nimport { initOrderItemsSelect } from './util/profession-input';\r\n\r\n\r\nasync function initCalculationCompany() {\r\n    const professionConstructor = document.professionConstructor;\r\n    const inputsToValidateOnAddProfession = document.querySelectorAll('#Constructor input:not([type=\"submit\"])');\r\n    const inputsToValidateOnCreateCalculation = document.querySelectorAll('.js-validate');\r\n\r\n    // Selectors\r\n    const SELECTOR_ORDER_ITEMS_SELECT = '#OrderItems';\r\n    const SELECTOR_PROFESSIONS_LIST = '#ProfessionsList';\r\n    const SELECTOR_COMPANY_NAME_INPUT = '#CompanyName';\r\n    const SELECTOR_ADD_PROFESSION_BUTTON = '#AddProfession';\r\n    const SELECTOR_CALCULATE_BUTTON = '#CreateCompanyCalculation';\r\n\r\n    const CLASSNAME_NUMBERS = 'js-number';\r\n\r\n    // URI\r\n    const URI_CREATE_CALCULATION_API = '/api/calculation/create';\r\n    const URI_CALCULATION_RESULT_BASE = '/Calculation/Result/';\r\n\r\n    const professionsList = new SimpleList({\r\n        target: SELECTOR_PROFESSIONS_LIST,\r\n        itemTemplate: '<div class=\"col-sm-8\">{0}</div><div class=\"col-sm-4\">{1} чел.</div>',\r\n        reverse: true,\r\n        data: [\r\n            {\r\n                source: () => professionConstructor.ProfessionName.value,\r\n                path: 'name',\r\n                render: (source) => Util.escapeHTML(source)\r\n            },\r\n            {\r\n                source: () => parseInt(professionConstructor.NumberOfPersons.value),\r\n                path: 'numberOfPersons'\r\n            },\r\n            {\r\n                source: () => parseInt(professionConstructor.NumberOfWomen.value),\r\n                path: 'numberOfWomen'\r\n            },\r\n            {\r\n                source: () => parseInt(professionConstructor.NumberOfWomenOver40.value),\r\n                path: 'numberOfWomenOver40'\r\n            },\r\n            {\r\n                source: () => parseInt(professionConstructor.NumberOfPersonsOver40.value),\r\n                path: 'numberOfPersonsOver40'\r\n            },\r\n            {\r\n                source: () => {\r\n                    return $(SELECTOR_ORDER_ITEMS_SELECT).select2('data')\r\n                        .map((item) => parseInt(item.id));\r\n                },\r\n                path: 'orderItems'\r\n            }\r\n        ]\r\n    })\r\n\r\n\r\n    /* ------------------\r\n     * Валидация форм\r\n     * -----------------*/\r\n    function startCompanyDataValidation() {\r\n        const companyNameInput = document.querySelector(SELECTOR_COMPANY_NAME_INPUT);\r\n        addValidation(companyNameInput, DefaultChecks.requiredText70);\r\n    }\r\n\r\n    function startConstructorValidation() {\r\n        const professionNameInput = professionConstructor.ProfessionName;\r\n        addValidation(professionNameInput, DefaultChecks.requiredText70);\r\n\r\n        startValidateNumbers();\r\n    }\r\n\r\n    function startValidateNumbers() {\r\n        const numberOfPersonsValidityCheck = new ValidityCheck(\r\n            'Должна быть больше нуля и не меньше численности входящих подгрупп',\r\n            input => isInvalidNumberOfPersons(input.value));\r\n        addValidation(professionConstructor.NumberOfPersons, numberOfPersonsValidityCheck);\r\n\r\n        const numberOfPersonsOver40ValidityCheck = new ValidityCheck(\r\n            'Должна быть больше числа женщин старше 40 лет и меньше общей численности',\r\n            input => isInvalidNumberOfPersonsOver40(input.value));\r\n        addValidation(professionConstructor.NumberOfPersonsOver40, numberOfPersonsOver40ValidityCheck);\r\n\r\n        const numberOfWomenValidityCheck = new ValidityCheck(\r\n            'Должна быть больше числа женщин старше 40 лет и меньше общей численности',\r\n            input => isInvalidNumberOfWomen(input.value));\r\n        addValidation(professionConstructor.NumberOfWomen, numberOfWomenValidityCheck);\r\n\r\n        const numberOfWomenOver40ValidityCheck = new ValidityCheck(\r\n            'Должна быть меньше всех остальных групп, но не меньше нуля',\r\n            input => isInvalidNumberOfWomenOver40(input.value));\r\n        addValidation(professionConstructor.NumberOfWomenOver40, numberOfWomenOver40ValidityCheck);\r\n\r\n        checkAllNumbersOnOneChange();\r\n    }\r\n\r\n    function isInvalidNumberOfPersons(value) {\r\n        let number = +value;\r\n        return !Number.isInteger(number)\r\n            || number < 1\r\n            || number < +professionConstructor.NumberOfPersonsOver40.value\r\n            || number < +professionConstructor.NumberOfWomen.value\r\n            || number < +professionConstructor.NumberOfWomenOver40.value;\r\n    }\r\n\r\n    function isInvalidNumberOfPersonsOver40(value) {\r\n        let number = +value;\r\n        return !Number.isInteger(number)\r\n            || number < 0\r\n            || number > +professionConstructor.NumberOfPersons.value\r\n            || number < +professionConstructor.NumberOfWomenOver40.value;\r\n    }\r\n\r\n    function isInvalidNumberOfWomen(value) {\r\n        let number = +value;\r\n        return !Number.isInteger(number)\r\n            || number < 0\r\n            || number > +professionConstructor.NumberOfPersons.value\r\n            || number < +professionConstructor.NumberOfWomenOver40.value;\r\n    }\r\n\r\n    function isInvalidNumberOfWomenOver40(value) {\r\n        let number = +value;\r\n        return !Number.isInteger(number)\r\n            || number < 0\r\n            || number > +professionConstructor.NumberOfPersons.value\r\n            || number > +professionConstructor.NumberOfPersonsOver40.value\r\n            || number > +professionConstructor.NumberOfWomen.value;\r\n    }\r\n\r\n    function checkAllNumbersOnOneChange() {\r\n        const numberInputs = Array.from(document.getElementsByClassName(CLASSNAME_NUMBERS));\r\n        numberInputs.forEach(value => value.addEventListener('keyup', (e) => validate(numberInputs)));\r\n    }\r\n\r\n\r\n    // Обработка событий\r\n\r\n    function addEventListeners() {\r\n        const addProfessionBtn = document.querySelector(SELECTOR_ADD_PROFESSION_BUTTON);\r\n        addProfessionBtn.addEventListener('click', onAddProfession);\r\n\r\n        const calculateBtn = document.querySelector(SELECTOR_CALCULATE_BUTTON);\r\n        calculateBtn.addEventListener('click', onCalculate);\r\n    }\r\n\r\n    function onAddProfession(e) {\r\n        e.preventDefault();\r\n        validate(inputsToValidateOnAddProfession);\r\n        if (!professionConstructor.checkValidity())\r\n            return;\r\n        professionsList.add();\r\n        clearConstructor();\r\n    }\r\n\r\n    function clearConstructor() {\r\n        professionConstructor.reset();\r\n        $(SELECTOR_ORDER_ITEMS_SELECT).val(null).trigger('change');\r\n        resetValidation(inputsToValidateOnAddProfession);\r\n    }\r\n\r\n    async function onCalculate(e) {\r\n        e.preventDefault();\r\n\r\n        validate(inputsToValidateOnCreateCalculation);\r\n        if (!document.companyData.checkValidity())\r\n            return;\r\n\r\n        const nameElement = document.querySelector(SELECTOR_COMPANY_NAME_INPUT);\r\n\r\n        let calculationSource = {\r\n            name: nameElement.value,\r\n            professions: professionsList.getData()\r\n        };\r\n\r\n        if (calculationSource.professions.length === 0) {\r\n            alert('Добавьте хотя бы одну профессию');\r\n            return;\r\n        }\r\n\r\n        let calculation = await Util.postData(URI_CREATE_CALCULATION_API, calculationSource);\r\n        if (calculation) {\r\n            location = URI_CALCULATION_RESULT_BASE + calculation.id;\r\n        }\r\n    }\r\n\r\n\r\n    await initOrderItemsSelect();\r\n    startCompanyDataValidation();\r\n    startConstructorValidation();\r\n    addEventListeners();\r\n}\r\n\r\nexport default initCalculationCompany;","﻿// Простой список. Предназначен для создания модели и представления данных, вводимых пользователем\r\n//\r\n// Options\r\n// --- itemTemplate : string // например: <div>Название: {0}, автор: {1})</div>. Значение в фигурных скобках должно соответствовать индексу объекта, описывающего данные, в массиве data\r\n// --- data : [] // массив объектов, описывающих свойства элемента списка. Значения объектов, индексы которых не представлены в шаблоне, не будут отображаться в документе, но сохранятся в модели\r\n// ------ source : function () // функция, возвращающая значение для добавляемого элемента, например () => anyInput.value;\r\n// ------ path : string // название свойства модели элемента списка\r\n// ------ render : function(source) : string // функция, обрабатывающая отображаемые значения (опционально)\r\n// --- target : string // селектор блока, в котором будет находиться список\r\n// --- reverse : boolean // если true, новые элементы добавляются в список над последним\r\n\r\nimport Util from './common';\r\n\r\nconst TEMPLATE_ITEM_CONTAINER = '<div class=\"row align-items-center mb-2 position-relative\"></div>';\r\nconst TEMPLATE_BUTTON_REMOVE_ITEM = '<button class=\"btn btn-danger btn-sm\" style=\"position: absolute; right: 0; top: 0; opacity: 0.8\">Удалить</button>';\r\n\r\nclass SimpleList {\r\n    constructor(options) {\r\n        this._options = options;\r\n        this._modelMap = new Map();\r\n        this._listElement = document.querySelector(this._options.target);\r\n        this._processButtonRemoveItem();\r\n    }\r\n\r\n\r\n    // Public\r\n\r\n    // Добавляет новый элемент в список. Сохраняет его модель и рендерит, в соответствии с заданным шаблоном\r\n    add() {\r\n        let itemTemplate = this._options.itemTemplate;\r\n        let model = {};\r\n\r\n        this._options.data.forEach((item, index, array) => {\r\n            // сохраняем свойство модели\r\n            let value = item.source();\r\n            model[item.path] = value;\r\n\r\n            // если требуется, вставляем его в шаблон\r\n            let placeholder = '{' + index + '}';\r\n            if (itemTemplate.includes(placeholder)) {\r\n                if (item.render)\r\n                    value = item.render(value);\r\n                itemTemplate = itemTemplate.replace(placeholder, value);\r\n            }\r\n        });\r\n\r\n        let itemElement = this._renderNewItem(itemTemplate);\r\n        this._addEventListeners(itemElement);\r\n        this._modelMap.set(itemElement, model);\r\n    }\r\n\r\n    // Возвращает модель данных списка\r\n    getData() {\r\n        return Array.from(this._modelMap.values());\r\n    }\r\n\r\n    // Удаляет элемент списка\r\n    remove(itemElement) {\r\n        this._modelMap.delete(itemElement);\r\n        itemElement.remove();\r\n    }\r\n\r\n\r\n    // Private\r\n\r\n    _addEventListeners(itemElement) {\r\n        itemElement.addEventListener('mouseenter', (e) => e.target.appendChild(this._buttonRemoveItem));\r\n        itemElement.addEventListener('mouseleave', (e) => e.target.removeChild(this._buttonRemoveItem));\r\n    }\r\n\r\n    _processButtonRemoveItem() {\r\n        this._buttonRemoveItem = Util.toElement(TEMPLATE_BUTTON_REMOVE_ITEM);\r\n\r\n        this._buttonRemoveItem.addEventListener('click', (e) => {\r\n            const button = e.target;\r\n            button.disabled = true;\r\n            this.remove(button.parentElement);\r\n            button.disabled = false;\r\n        })\r\n    }\r\n\r\n    _renderNewItem(itemTemplate) {\r\n        let itemElement = Util.toElement(TEMPLATE_ITEM_CONTAINER);\r\n        itemElement.innerHTML = itemTemplate;\r\n\r\n        if (this._options.reverse) {\r\n            this._listElement.insertBefore(itemElement, this._listElement.firstChild);\r\n        }\r\n        else {\r\n            this._listElement.appendChild(itemElement);\r\n        }\r\n        return itemElement;\r\n    }\r\n}\r\n\r\nexport default SimpleList;","﻿import Util from './util/common';\r\nimport { addValidation, validate, DefaultChecks } from './util/custom-validation';\r\n\r\n\r\nfunction initCalculationEdit() {\r\n    const SELECTOR_RESULT_ITEM_BASE = '.js-result-';\r\n    const NAME_RESULT_ITEM_PRICE = 'price';\r\n    const NAME_RESULT_ITEM_AMOUNT = 'amount';\r\n    const NAME_RESULT_ITEM_SUM = 'sum';\r\n    const NAME_RESULT_ITEM_GROUP = 'group';\r\n\r\n    const SELECTOR_CALCULATION_ID = '#CalculationId';\r\n    const SELECTOR_RESULT_ITEM_ROW = '.form-group';\r\n    const SELECTOR_TOTAL_SUM = '#TotalSum';\r\n    const SELECTOR_SAVE_CALCULATION_BUTTON = '#SaveChanges';\r\n\r\n    const URI_UPDATE_CALCULATION_API = '/api/calculation/update';\r\n    const URI_CALCULATION_RESULT_BASE = '/Calculation/Result/';\r\n\r\n    const priceInputs = document.querySelectorAll(SELECTOR_RESULT_ITEM_BASE + NAME_RESULT_ITEM_PRICE);\r\n    const amountInputs = document.querySelectorAll(SELECTOR_RESULT_ITEM_BASE + NAME_RESULT_ITEM_AMOUNT);\r\n    const sumElements = document.querySelectorAll(SELECTOR_RESULT_ITEM_BASE + NAME_RESULT_ITEM_SUM);\r\n    const groupSelects = document.querySelectorAll(SELECTOR_RESULT_ITEM_BASE + NAME_RESULT_ITEM_GROUP);\r\n\r\n    const AVAILABLE_SERVICE_OPTION_INDEX = 0;\r\n    const RESULT_ITEM_ID_PREFIX = 'r-';\r\n\r\n    processPriceInputs();\r\n    processAmountInputs();\r\n    processGroupSelects();\r\n    calculateTotalSum();\r\n    addSaveBtnEventListener();\r\n\r\n    function processPriceInputs() {\r\n        let arr = Array.from(priceInputs);\r\n        arr.forEach(input => {\r\n            input.addEventListener('keyup', onPriceChanged);\r\n            addValidation(input, DefaultChecks.price);\r\n        });\r\n    }\r\n\r\n    function processAmountInputs() {\r\n        let arr = Array.from(amountInputs);\r\n        arr.forEach(input => {\r\n            input.addEventListener('keyup', onAmountChanged);\r\n            addValidation(input, DefaultChecks.positiveInteger);\r\n        });\r\n    }\r\n\r\n    function onPriceChanged(e) {\r\n        let input = e.target;\r\n        if (isPriceInputInvalid(input))\r\n            return;\r\n        let resultId = getResultId(input);\r\n\r\n        let amountInput = getAmountInput(resultId);\r\n        if (isAmountInputInvalid(amountInput))\r\n            return;\r\n\r\n        let sum = getSumElement(resultId);\r\n        sum.value = Util.toCurrencyString(calculateSum(input, amountInput));\r\n\r\n        calculateTotalSum();\r\n    }\r\n\r\n    function onAmountChanged(e) {\r\n        let input = e.target;\r\n        if (isAmountInputInvalid(input))\r\n            return;\r\n        let resultId = getResultId(input);\r\n\r\n        let priceInput = getPriceInput(resultId);\r\n        if (isPriceInputInvalid(priceInput))\r\n            return;\r\n\r\n        let sum = getSumElement(resultId);\r\n        sum.value = Util.toCurrencyString(calculateSum(priceInput, input));\r\n\r\n        calculateTotalSum();\r\n    }\r\n\r\n    function calculateSum(priceInput, amountInput) {\r\n        return Util.customParseFloat(priceInput.value) * amountInput.value;\r\n    }\r\n\r\n    function getResultId(formInput) {\r\n        return formInput.parentNode.parentNode.id;\r\n    }\r\n\r\n    function isAmountInputInvalid(input) {\r\n        return DefaultChecks.positiveInteger.isInvalid(input);\r\n    }\r\n\r\n    function isPriceInputInvalid(input) {\r\n        return DefaultChecks.price.isInvalid(input);\r\n    }\r\n\r\n    function processGroupSelects() {\r\n        var arr = Array.from(groupSelects);\r\n        arr.forEach(item => {\r\n            item.addEventListener('change', onGroupChange);\r\n        })\r\n    }\r\n\r\n    function onGroupChange(e) {\r\n        const select = e.target;\r\n        const resultId = getResultId(select);\r\n\r\n        const priceInput = getPriceInput(resultId);\r\n        const amountInput = getAmountInput(resultId);\r\n        const sumInput = getSumElement(resultId);\r\n\r\n        checkInputsValidityOnSelectChange(priceInput, amountInput);\r\n\r\n        let inputs = [priceInput, amountInput, sumInput];\r\n\r\n        if (select.selectedIndex === AVAILABLE_SERVICE_OPTION_INDEX) {\r\n            showInputs(inputs);\r\n        }\r\n        else {\r\n            hideInputs(inputs);\r\n        }\r\n\r\n        calculateTotalSum();\r\n    }\r\n\r\n    function checkInputsValidityOnSelectChange(priceInput, amountInput) {\r\n        if (isPriceInputInvalid(priceInput)) {\r\n            priceInput.value = '0';\r\n        }\r\n\r\n        if (isAmountInputInvalid(amountInput)) {\r\n            amountInput.value = '0';\r\n        }\r\n\r\n        validate([priceInput, amountInput]);\r\n    }\r\n\r\n    function hideInputs(inputs) {\r\n        inputs.forEach(input => input.type = 'hidden');\r\n    }\r\n\r\n    function showInputs(inputs) {\r\n        inputs.forEach(input => input.type = 'text');\r\n    }\r\n\r\n    function getPriceInput(resultId) {\r\n        return getInput(resultId, NAME_RESULT_ITEM_PRICE);\r\n    }\r\n\r\n    function getAmountInput(resultId) {\r\n        return getInput(resultId, NAME_RESULT_ITEM_AMOUNT);\r\n    }\r\n\r\n    function getSumElement(resultId) {\r\n        return getInput(resultId, NAME_RESULT_ITEM_SUM);\r\n    }\r\n\r\n    function getInput(resultId, name) {\r\n        let input = document.querySelector('#' + resultId + ' ' + SELECTOR_RESULT_ITEM_BASE + name);\r\n        if (!input) {\r\n            console.log('Не найдено поле ' + name);\r\n            return null;\r\n        }\r\n        return input;\r\n    }\r\n\r\n    async function onSaveChanges(e) {\r\n        e.preventDefault();\r\n        validate(priceInputs);\r\n        validate(amountInputs);\r\n        if (!document.Results.checkValidity())\r\n            return;\r\n\r\n        let data = createUpdateCalculationRequestData();\r\n\r\n        const calculation = await Util.postData(URI_UPDATE_CALCULATION_API, data);\r\n        if (calculation) {\r\n            location = URI_CALCULATION_RESULT_BASE + calculation.id;\r\n        }\r\n    }\r\n\r\n    function createUpdateCalculationRequestData() {\r\n        const calculationId = parseInt(document.querySelector(SELECTOR_CALCULATION_ID).value);\r\n\r\n        let resultItems = [];\r\n\r\n        let rows = document.querySelectorAll(SELECTOR_RESULT_ITEM_ROW);\r\n        for (var i = 0; i < rows.length; i++) {\r\n            let item = getResultItem(rows[i]);\r\n            resultItems.push(item);\r\n        }\r\n\r\n        return {\r\n            calculationId: calculationId,\r\n            resultItems: resultItems\r\n        }\r\n    }\r\n\r\n    function getResultItem(formGroup) {\r\n        let id = parseInt(formGroup.id.slice(RESULT_ITEM_ID_PREFIX.length));\r\n\r\n        let price = Util.customParseFloat(formGroup.querySelector(SELECTOR_RESULT_ITEM_BASE + NAME_RESULT_ITEM_PRICE).value);\r\n        let amount = +formGroup.querySelector(SELECTOR_RESULT_ITEM_BASE + NAME_RESULT_ITEM_AMOUNT).value;\r\n        let groupId = +formGroup.querySelector(SELECTOR_RESULT_ITEM_BASE + NAME_RESULT_ITEM_GROUP).value;\r\n\r\n        return {\r\n            id: id,\r\n            price: price,\r\n            amount: amount,\r\n            groupId: groupId\r\n        }\r\n    }\r\n\r\n    function calculateTotalSum() {\r\n        let totalSum = 0;\r\n        for (var i = 0; i < sumElements.length; i++) {\r\n            if (sumElements[i].type === 'text') {\r\n                totalSum += Util.customParseFloat(sumElements[i].value);\r\n            }\r\n        }\r\n        document.querySelector(SELECTOR_TOTAL_SUM).innerText = Util.toCurrencyString(totalSum);\r\n    }\r\n\r\n    function addSaveBtnEventListener() {\r\n        const saveBtn = document.querySelector(SELECTOR_SAVE_CALCULATION_BUTTON);\r\n        saveBtn.addEventListener('click', onSaveChanges);\r\n    }\r\n}\r\n\r\nexport default initCalculationEdit;","﻿import Util from './util/common';\r\nimport { addValidation, validate, DefaultChecks } from './util/custom-validation';\r\nimport { initOrderItemsSelect } from './util/profession-input';\r\n\r\n\r\nasync function initCalculationSingle() {\r\n    const SELECTOR_ORDER_ITEMS_SELECT = '#OrderItems';\r\n    const SELECTOR_CREATE_CALCULATION_BUTTON = '#createSingleCalculation';\r\n    const SELECTOR_PROFESSION_NAME_INPUT = '#ProfessionName';\r\n    const SELECTOR_IS_WOMAN_CHECKBOX = '#IsWoman';\r\n    const SELECTOR_IS_OVER_40_CHECKBOX = '#IsOver40';\r\n\r\n    const URI_CREATE_CALCULATION_API = '/api/calculation/create';\r\n    const URI_CALCULATION_RESULT_BASE = '/Calculation/Result/';\r\n\r\n    const professionNameInput = document.querySelector(SELECTOR_PROFESSION_NAME_INPUT);\r\n\r\n    await initOrderItemsSelect();\r\n    addFormValidation();\r\n    addEventListeners();\r\n\r\n    function addFormValidation() {\r\n        addValidation(professionNameInput, DefaultChecks.requiredText70);\r\n    }\r\n\r\n    function addEventListeners() {\r\n        var submitBtn = document.querySelector(SELECTOR_CREATE_CALCULATION_BUTTON);\r\n        submitBtn.addEventListener('click', onSubmit);\r\n    }\r\n\r\n    async function onSubmit(e) {\r\n        e.preventDefault();\r\n\r\n        const inputs = [professionNameInput];\r\n        validate(inputs);\r\n        if (!document.singleCalc.checkValidity())\r\n            return;\r\n\r\n        const calculationSource = getCalculationSource();\r\n\r\n        const calculation = await Util.postData(URI_CREATE_CALCULATION_API, calculationSource);\r\n        if (calculation) {\r\n            location = URI_CALCULATION_RESULT_BASE + calculation.id;\r\n        }\r\n    }\r\n\r\n    function getCalculationSource() {\r\n        let professionName = professionNameInput.value;\r\n\r\n        let orderItems = $(SELECTOR_ORDER_ITEMS_SELECT).select2('data')\r\n            .map((item) => parseInt(item.id));\r\n        if (orderItems.length == 0) {\r\n            alert('Выберите хотя бы один пункт приказа');\r\n            return;\r\n        }\r\n        \r\n        let isWoman = document.querySelector(SELECTOR_IS_WOMAN_CHECKBOX).checked;\r\n        let womenCount = isWoman ? 1 : 0;\r\n\r\n        let isOver40 = document.querySelector(SELECTOR_IS_OVER_40_CHECKBOX).checked;\r\n        let over40Count = isOver40 ? 1 : 0;\r\n\r\n        let womenOver40Count = isWoman && isOver40 ? 1 : 0;\r\n\r\n        return {\r\n            name: 'Индивидуальный расчет',\r\n            professions: [{\r\n                name: professionName,\r\n                numberOfPersons: 1,\r\n                numberOfWomen: womenCount,\r\n                numberOfWomenOver40: womenOver40Count,\r\n                numberOfPersonsOver40: over40Count,\r\n                orderItems: orderItems\r\n            }]\r\n        };\r\n    }\r\n}\r\n\r\n\r\nexport default initCalculationSingle;","﻿import Util from './util/common';\r\nimport ModalForm from './util/modal/modal-form';\r\nimport CustomDataTable from './util/custom-datatable';\r\nimport SuccessToast from './util/success-toast';\r\nimport { DefaultChecks } from './util/custom-validation';\r\n\r\n\r\nfunction initCatalogList() {\r\n    const URI_API_CATALOG_UPDATE = '/api/catalog/update';\r\n\r\n    const SELECTOR_EXAMINATION_NAME = '.js-catalog-examination';\r\n    const SELECTOR_SERVICE_CODE = '.js-catalog-code';\r\n    const SELECTOR_SERVICE_FULL_NAME = '.js-catalog-name';\r\n    const SELECTOR_SERVICE_PRICE = '.js-catalog-price';\r\n    const SELECTOR_SERVICE_GROUP = '.js-catalog-group';\r\n    const SELECTOR_CATALOG_UPDATE_TIME = '.js-catalog-update-time';\r\n\r\n    const ID_TABLE_CATALOG = 'Catalog';\r\n\r\n    const ATTR_DATA_EXAMINATION_ID = 'data-examination-id';\r\n\r\n    const successToast = new SuccessToast();\r\n\r\n    const modalOptions = {\r\n        title: (model) => `Изменение услуги для обследования: ${model.name}`,\r\n        data: [\r\n            {\r\n                id: 'service-code',\r\n                path: 'code',\r\n                label: 'Код услуги',\r\n                type: 'input-text',\r\n                validityCheck: DefaultChecks.requiredText20\r\n            },\r\n            {\r\n                id: 'service-name',\r\n                path: 'fullName',\r\n                label: 'Наименование услуги',\r\n                type: 'textarea',\r\n                validityCheck: DefaultChecks.requiredText500\r\n            },\r\n            {\r\n                id: 'service-price',\r\n                path: 'price',\r\n                label: 'Цена',\r\n                type: 'input-text',\r\n                validityCheck: DefaultChecks.price\r\n            },\r\n            {\r\n                id: 'service-availability-group',\r\n                path: 'serviceAvailabilityGroupId',\r\n                label: 'Доступность',\r\n                type: 'select',\r\n                options: [\r\n                    new Option('Доступна', '1'),\r\n                    new Option('Недоступна', '2'),\r\n                    new Option('Включена', '3')\r\n                ]\r\n            }\r\n        ],\r\n        buttons: [\r\n            {\r\n                text: 'Сохранить',\r\n                action: onUpdateCatalogItem\r\n            }\r\n        ]\r\n    };\r\n    const serviceModal = new ModalForm(modalOptions);\r\n\r\n\r\n    const dataTableConfig = {\r\n        tableId: ID_TABLE_CATALOG,\r\n        advanced: {\r\n            buttons: [\r\n                {\r\n                    extend: 'selectedSingle',\r\n                    text: 'Редактировать',\r\n                    action: function (e, dt, button, config) {\r\n                        let tableRow = dt.row({ selected: true }).node();\r\n                        let model = getModel(tableRow);\r\n                        serviceModal.show(model);\r\n                    }\r\n                }\r\n            ]\r\n        }\r\n    };\r\n    const table = new CustomDataTable(dataTableConfig);\r\n\r\n\r\n    function getModel(tableRow) {\r\n        return {\r\n            id: +tableRow.dataset.examinationId,\r\n            name: tableRow.querySelector(SELECTOR_EXAMINATION_NAME).innerText,\r\n            code: tableRow.querySelector(SELECTOR_SERVICE_CODE).innerText,\r\n            fullName: tableRow.querySelector(SELECTOR_SERVICE_FULL_NAME).innerText,\r\n            price: tableRow.querySelector(SELECTOR_SERVICE_PRICE).innerText,\r\n            serviceAvailabilityGroupId: tableRow.querySelector(SELECTOR_SERVICE_GROUP).dataset.groupId\r\n        };\r\n    }\r\n\r\n    function renderCatalogChanges(updated) {\r\n        const tableRow = document.querySelector(`tr[${ATTR_DATA_EXAMINATION_ID}=\"${updated.orderExaminationId}\"]`);\r\n\r\n        tableRow.querySelector(SELECTOR_SERVICE_CODE).innerText = updated.code;\r\n        tableRow.querySelector(SELECTOR_SERVICE_FULL_NAME).innerText = updated.fullName;\r\n        tableRow.querySelector(SELECTOR_SERVICE_PRICE).innerText = Util.toCurrencyString(updated.price);\r\n        tableRow.querySelector(SELECTOR_CATALOG_UPDATE_TIME).innerText = new Date(updated.updateTime).toLocaleString();\r\n\r\n        const groupCell = tableRow.querySelector(SELECTOR_SERVICE_GROUP);\r\n        groupCell.innerText = updated.serviceAvailabilityGroupName;\r\n        groupCell.dataset.groupId = updated.serviceAvailabilityGroupId;\r\n    }\r\n\r\n    async function onUpdateCatalogItem(model) {\r\n        const requestData = {\r\n            orderExaminationId: model.id,\r\n            fullName: model.fullName,\r\n            code: model.code,\r\n            price: Util.customParseFloat(model.price),\r\n            serviceAvailabilityGroupId: +model.serviceAvailabilityGroupId\r\n        }\r\n\r\n        const service = await Util.postData(URI_API_CATALOG_UPDATE, requestData);\r\n        if (service) {\r\n            renderCatalogChanges(service);\r\n            serviceModal.hide();\r\n            successToast.show();\r\n        }\r\n        else {\r\n            serviceModal.enableButtons();\r\n        }\r\n    }\r\n}\r\n\r\nexport default initCatalogList;","﻿import Util from './util/common';\r\nimport ModalForm from './util/modal/modal-form';\r\nimport CustomDataTable from './util/custom-datatable';\r\nimport SuccessToast from './util/success-toast';\r\n\r\n\r\nfunction initClinicList() {\r\n    const ID_DATATABLE_CLINIC_LIST = 'ClinicsList';\r\n\r\n    const URI_API_DATATABLE_CLINIC_LIST = '/api/clinic/list';\r\n    const URI_API_CLINIC_MANAGE = '/api/clinic/manageClinic';\r\n\r\n    const successToast = new SuccessToast();\r\n\r\n    const currentUserId = document.getElementById(ID_DATATABLE_CLINIC_LIST).dataset.clinic;\r\n\r\n    // -----\r\n    // Modal\r\n    // -----\r\n    const modalOptions = {\r\n        title: 'Информация о медицинской организации',\r\n        readonly: true,\r\n        data: [\r\n            {\r\n                id: 'full-name',\r\n                path: 'clinicDetails.fullName',\r\n                type: 'input-text',\r\n                label: 'Полное наименование'\r\n            },\r\n            {\r\n                id: 'short-name',\r\n                path: 'clinicDetails.shortName',\r\n                type: 'input-text',\r\n                label: 'Сокращенное наименование'\r\n            },\r\n            {\r\n                id: 'address',\r\n                path: 'clinicDetails.address',\r\n                type: 'input-text',\r\n                label: 'Адрес'\r\n            },\r\n            {\r\n                id: 'phone',\r\n                path: 'clinicDetails.phone',\r\n                type: 'input-text',\r\n                label: 'Телефон'\r\n            },\r\n            {\r\n                id: 'email',\r\n                path: 'clinicDetails.email',\r\n                type: 'input-text',\r\n                label: 'Электронная почта'\r\n            },\r\n            {\r\n                id: 'block-status',\r\n                path: 'isBlocked',\r\n                type: 'input-text',\r\n                label: 'Статус',\r\n                render: (value) => value === true ? 'Заблокирована' : 'Активна'\r\n            },\r\n        ],\r\n        buttons: [\r\n            {\r\n                text: 'Заблокировать',\r\n                className: 'btn btn-danger',\r\n                action: async (model) => await onManageClinic(model, true),\r\n                visibility: (model) => !model.isBlocked && model.id != currentUserId\r\n            },\r\n            {\r\n                text: 'Разблокировать',\r\n                className: 'btn btn-success',\r\n                action: async (model) => await onManageClinic(model, false),\r\n                visibility: (model) => model.isBlocked && model.id != currentUserId\r\n            }\r\n        ]\r\n    };\r\n    const modal = new ModalForm(modalOptions);\r\n\r\n\r\n    // ---------\r\n    // Datatable\r\n    // ---------\r\n    const tableOptions = {\r\n        tableId: ID_DATATABLE_CLINIC_LIST,\r\n        ajaxUrl: URI_API_DATATABLE_CLINIC_LIST,\r\n        serverSide: true,\r\n        scroll: true,\r\n        advanced: {\r\n            buttons: [\r\n                {\r\n                    extend: 'selectedSingle',\r\n                    text: 'Просмотр',\r\n                    action: (e, dt, button, config) => {\r\n                        let model = dt.row({ selected: true }).data();\r\n                        modal.show(model);\r\n                    }\r\n                }\r\n            ],\r\n            columns: [\r\n                {\r\n                    data: 'id',\r\n                    name: 'Id',\r\n                    searchable: false\r\n                },\r\n                {\r\n                    data: 'clinicDetails.shortName',\r\n                    name: 'ClinicDetails.ShortName',\r\n                    render: (data, type, row) => Util.escapeHTML(data)\r\n                },\r\n                {\r\n                    data: 'clinicDetails.phone',\r\n                    name: 'ClinicDetails.Phone',\r\n                    render: (data, type, row) => Util.escapeHTML(data),\r\n                    orderable: false\r\n                },\r\n                {\r\n                    data: 'clinicDetails.email',\r\n                    name: 'ClinicDetails.Email',\r\n                    render: (data, type, row) => Util.escapeHTML(data),\r\n                    orderable: false\r\n                },\r\n                {\r\n                    data: 'isBlocked',\r\n                    name: 'IsBlocked',\r\n                    render: (data, type, row) => data ? \"Заблокирована\" : \"Активна\",\r\n                    searchable: false,\r\n                    orderable: false\r\n                }\r\n            ]\r\n        }\r\n\r\n    };\r\n    const table = new CustomDataTable(tableOptions);\r\n\r\n    async function onManageClinic(model, needBlock) {\r\n        const data = {\r\n            id: model.id,\r\n            needBlock\r\n        };\r\n        const result = await Util.postData(URI_API_CLINIC_MANAGE, data);\r\n\r\n        if (result) {\r\n            modal.hide();\r\n            table.ajaxReload();\r\n            successToast.show();\r\n        }\r\n        else {\r\n            modal.enableButtons();\r\n        }\r\n    }\r\n}\r\n\r\nexport default initClinicList;","﻿import Util from './util/common';\r\nimport { addValidation, resetValidation, validate, DefaultChecks } from './util/custom-validation';\r\nimport SuccessToast from './util/success-toast';\r\n\r\n\r\nfunction initClinicSettings() {\r\n    const URI_API_CLINIC_UPDATE_DETAILS = '/api/clinic/updateDetails';\r\n\r\n    const successToast = new SuccessToast();\r\n\r\n    const fullNameInput = document.getElementById('ClinicFullName');\r\n    const shortNameInput = document.getElementById('ClinicShortName');\r\n    const addressInput = document.getElementById('ClinicAddress');\r\n    const phoneInput = document.getElementById('ClinicPhone');\r\n    const emailInput = document.getElementById('ClinicEmail');\r\n\r\n    addInputsValidation();\r\n\r\n    const saveButton = document.getElementById('SaveClinicDetails');\r\n    saveButton.addEventListener('click', onSaveClinicDetails);\r\n\r\n    function addInputsValidation() {\r\n        addValidation(fullNameInput, DefaultChecks.requiredText500);\r\n        addValidation(shortNameInput, DefaultChecks.requiredText500);\r\n        addValidation(addressInput, DefaultChecks.requiredText500);\r\n        addValidation(phoneInput, DefaultChecks.phone);\r\n        addValidation(emailInput, DefaultChecks.email);\r\n    }\r\n\r\n    async function onSaveClinicDetails(e) {\r\n        e.preventDefault();\r\n        saveButton.disabled = true;\r\n\r\n        const inputs = document.querySelectorAll('input');\r\n        validate(inputs);\r\n        const form = document.ClinicDetails;\r\n        if (!form.checkValidity()) {\r\n            saveButton.disabled = false;\r\n            return;\r\n        }\r\n\r\n        const formData = new FormData(form);\r\n        const data = Object.fromEntries(formData);\r\n        const result = await Util.postData(URI_API_CLINIC_UPDATE_DETAILS, data);\r\n        if (result) {\r\n            resetValidation(inputs);\r\n            successToast.show();\r\n        }\r\n        saveButton.disabled = false;\r\n    }\r\n}\r\n\r\nexport default initClinicSettings;","﻿import Util from './util/common';\r\nimport { addValidation, validate, DefaultChecks } from './util/custom-validation';\r\n\r\n\r\nfunction initRegisterCreateRequest() {\r\n    const URI_API_REGISTER_REQUEST_CREATE = '/api/clinic/addRegisterRequest';\r\n\r\n    const candidateFullNameInput = document.getElementById('CandidateFullName');\r\n    const candidateShortNameInput = document.getElementById('CandidateShortName');\r\n    const candidateAddressInput = document.getElementById('CandidateAddress');\r\n    const candidatePhoneInput = document.getElementById('CandidatePhone');\r\n    const candidateEmailInput = document.getElementById('CandidateEmail');\r\n    const candidateModeratorNameInput = document.getElementById('CandidateModeratorName');\r\n    const candidateModeratorPositionInput = document.getElementById('CandidateModeratorPosition');\r\n    const candidateModeratorUsernameInput = document.getElementById('CandidateModeratorUsername');\r\n    const candidateModeratorPasswordInput = document.getElementById('CandidateModeratorPassword');\r\n\r\n    const validatedRegisterRequestInputs = document.querySelectorAll('input');\r\n\r\n    const submitRegisterRequestBtn = document.getElementById('SubmitRegisterRequest');\r\n    submitRegisterRequestBtn.addEventListener('click', onSubmitRegisterRequest);\r\n\r\n    addFormValidation();\r\n\r\n    async function onSubmitRegisterRequest(e) {\r\n        e.preventDefault();\r\n        submitRegisterRequestBtn.disabled = true;\r\n\r\n        validate(validatedRegisterRequestInputs);\r\n        if (!document.RegisterRequest.checkValidity()) {\r\n            submitRegisterRequestBtn.disabled = false;\r\n            return;\r\n        }\r\n\r\n        let data = {\r\n            fullName: candidateFullNameInput.value,\r\n            shortName: candidateShortNameInput.value,\r\n            address: candidateAddressInput.value,\r\n            phone: candidatePhoneInput.value,\r\n            email: candidateEmailInput.value,\r\n            user: {\r\n                name: candidateModeratorNameInput.value,\r\n                position: candidateModeratorPositionInput.value,\r\n                username: candidateModeratorUsernameInput.value,\r\n                password: candidateModeratorPasswordInput.value\r\n            }\r\n        };\r\n\r\n        let result = await Util.postData(URI_API_REGISTER_REQUEST_CREATE, data);\r\n\r\n        if (result) {\r\n            showSuccessMessage();\r\n        }\r\n\r\n        submitRegisterRequestBtn.disabled = false;\r\n    }\r\n\r\n    function addFormValidation() {\r\n        addValidation(candidateFullNameInput, DefaultChecks.requiredText500);\r\n        addValidation(candidateShortNameInput, DefaultChecks.requiredText500);\r\n        addValidation(candidateAddressInput, DefaultChecks.requiredText500);\r\n        addValidation(candidatePhoneInput, DefaultChecks.phone);\r\n        addValidation(candidateEmailInput, DefaultChecks.email);\r\n        addValidation(candidateModeratorNameInput, DefaultChecks.requiredText70);\r\n        addValidation(candidateModeratorPositionInput, DefaultChecks.requiredText70);\r\n        addValidation(candidateModeratorUsernameInput, DefaultChecks.username);\r\n        addValidation(candidateModeratorPasswordInput, DefaultChecks.password);\r\n    }\r\n\r\n    function showSuccessMessage() {\r\n        document.RegisterRequest.classList.add('d-none');\r\n        document.querySelector('.alert-success').classList.remove('d-none');\r\n    }\r\n}\r\n\r\n\r\nexport default initRegisterCreateRequest;","﻿import Util from './util/common';\r\nimport ModalForm from './util/modal/modal-form';\r\nimport CustomDataTable from './util/custom-datatable';\r\nimport SuccessToast from './util/success-toast';\r\n\r\n\r\nconst URI_API_REGISTER_REQUESTS_NEW = '/api/clinic/newRequests';\r\nconst URI_API_REGISTER_REQUESTS_PROCESSED = '/api/clinic/processedRequests';\r\nconst URI_API_REGISTER_REQUEST_MANAGE = '/api/clinic/manageRequest';\r\n\r\n\r\nclass RegisterRequestsListPage {\r\n    constructor() {\r\n        this.successToast = new SuccessToast();\r\n        this._createDataTables();\r\n        this._createRegisterRequestsModal();\r\n    }\r\n\r\n    // Private \r\n\r\n    _createDataTables() {\r\n        const columnsBase = [\r\n            {\r\n                data: 'creationTime',\r\n                name: 'CreationTime',\r\n                render: (data, type, row) => new Date(data).toLocaleString(),\r\n                searchable: false\r\n            },\r\n            {\r\n                data: 'shortName',\r\n                name: 'ShortName',\r\n                render: (data, type, row) => Util.escapeHTML(data)\r\n            },\r\n            {\r\n                data: 'sender.name',\r\n                name: 'Sender.Name',\r\n                render: (data, type, row) => Util.escapeHTML(data)\r\n            }\r\n        ];\r\n\r\n        const approvedStatusColumn = {\r\n            data: 'approved',\r\n            name: 'Approved',\r\n            render: (data, type, row) => data ? 'Одобрена' : 'Отклонена',\r\n            searchable: false\r\n        };\r\n\r\n        const tableButtons = [\r\n            {\r\n                extend: 'selectedSingle',\r\n                text: 'Просмотр',\r\n                action: (e, dt, button, config) => {\r\n                    let model = dt.row({ selected: true }).data();\r\n                    this.registerRequestModal.show(model);\r\n                }\r\n            }\r\n        ];\r\n\r\n        const newRequestsTableConfig = {\r\n            tableId: 'NewRegisterRequests',\r\n            ajaxUrl: URI_API_REGISTER_REQUESTS_NEW,\r\n            serverSide: true,\r\n            advanced: {\r\n                columns: columnsBase,\r\n                buttons: tableButtons\r\n            }\r\n        }\r\n\r\n        this.newRequestsDataTable = new CustomDataTable(newRequestsTableConfig).getTable();\r\n\r\n        const processedRequestsTableColumns = columnsBase.slice();\r\n        processedRequestsTableColumns.push(approvedStatusColumn);\r\n\r\n        const processedRequestTableConfig = {\r\n            tableId: 'ProcessedRegisterRequests',\r\n            ajaxUrl: URI_API_REGISTER_REQUESTS_PROCESSED,\r\n            serverSide: true,\r\n            advanced: {\r\n                columns: processedRequestsTableColumns,\r\n                buttons: tableButtons\r\n            }\r\n        }\r\n\r\n        this.processedRequestsDataTable = new CustomDataTable(processedRequestTableConfig).getTable();\r\n    }\r\n\r\n    _createRegisterRequestsModal() {\r\n        const config = {\r\n            title: 'Информация о заявке',\r\n            readonly: true,\r\n            data: [\r\n                {\r\n                    id: 'date',\r\n                    path: 'creationTime',\r\n                    label: 'Дата',\r\n                    type: 'input-text',\r\n                    render: (value) => new Date(value).toLocaleString()\r\n                },\r\n                {\r\n                    id: 'full-name',\r\n                    path: 'fullName',\r\n                    label: 'Полное наименование',\r\n                    type: 'input-text'\r\n                },\r\n                {\r\n                    id: 'short-name',\r\n                    path: 'shortName',\r\n                    label: 'Сокращенное наименование',\r\n                    type: 'input-text'\r\n                },\r\n                {\r\n                    id: 'address',\r\n                    path: 'address',\r\n                    label: 'Адрес',\r\n                    type: 'input-text'\r\n                },\r\n                {\r\n                    id: 'phone',\r\n                    path: 'phone',\r\n                    label: 'Телефон',\r\n                    type: 'input-text'\r\n                },\r\n                {\r\n                    id: 'email',\r\n                    path: 'email',\r\n                    label: 'Электронная почта',\r\n                    type: 'input-text'\r\n                },\r\n                {\r\n                    id: 'contact-person',\r\n                    path: 'sender.name',\r\n                    label: 'Контактное лицо',\r\n                    type: 'input-text',\r\n                    render: (data) => `${data.name}, ${data.position}`\r\n                },\r\n                {\r\n                    id: 'username',\r\n                    path: 'sender.userName',\r\n                    label: 'Username',\r\n                    type: 'input-text'\r\n                }\r\n            ],\r\n            buttons: [\r\n                {\r\n                    text: 'Одобрить',\r\n                    action: model => this._manageRegisterRequest(model, true),\r\n                    className: 'btn btn-success',\r\n                    visibility: model => !model.approved\r\n                },\r\n                {\r\n                    text: 'Отклонить',\r\n                    action: model => this._manageRegisterRequest(model, false),\r\n                    className: 'btn btn-danger',\r\n                    visibility: model => !model.processed\r\n                }\r\n            ]\r\n        }\r\n\r\n        this.registerRequestModal = new ModalForm(config);\r\n    }\r\n\r\n    async _manageRegisterRequest(model, approved) {\r\n        const data = {\r\n            id: model.id,\r\n            approved\r\n        };\r\n\r\n        const result = await Util.postData(URI_API_REGISTER_REQUEST_MANAGE, data);\r\n        if (result) {\r\n            this.registerRequestModal.hide();\r\n            this.successToast.show();\r\n            this.newRequestsDataTable.ajax.reload();\r\n            this.processedRequestsDataTable.ajax.reload();\r\n        }\r\n    }\r\n}\r\n\r\nexport default RegisterRequestsListPage;","﻿import Util from './util/common';\r\nimport ModalForm from './util/modal/modal-form';\r\nimport CustomDataTable from './util/custom-datatable';\r\nimport SuccessToast from './util/success-toast';\r\nimport { ValidityCheck, DefaultChecks } from './util/custom-validation';\r\n\r\n\r\nfunction initUserList() {\r\n    const URI_API_USERS_LIST = '/api/user/list';\r\n    const URI_API_USER_CREATE = '/api/user/create';\r\n    const URI_API_USER_UPDATE_BASE = '/api/user/update';\r\n\r\n    const isGlobal = document.getElementById('UsersList').dataset.global == 'True';\r\n    const successToast = new SuccessToast();\r\n\r\n\r\n    // Data объекты для Modal\r\n\r\n    const usernameData = {\r\n        id: 'username',\r\n        path: 'username',\r\n        type: 'input-text',\r\n        label: 'Имя пользователя',\r\n        validityCheck: DefaultChecks.username\r\n    };\r\n\r\n    const passwordData = {\r\n        id: 'password',\r\n        path: 'password',\r\n        type: 'input-password',\r\n        label: 'Пароль',\r\n        validityCheck: DefaultChecks.password\r\n    };\r\n\r\n    const confirmPasswordData = getConfirmPasswordData('#custom-modal-1 input[data-custom-modal-id=\"password\"]');\r\n    const confirmPasswordData2 = getConfirmPasswordData('#custom-modal-3  input[data-custom-modal-id=\"password\"]');\r\n\r\n    const nameData = {\r\n        id: 'name',\r\n        path: 'name',\r\n        type: 'input-text',\r\n        label: 'ФИО',\r\n        validityCheck: DefaultChecks.requiredText70\r\n    };\r\n    const positionData = {\r\n        id: 'position',\r\n        path: 'position',\r\n        type: 'input-text',\r\n        label: 'Должность',\r\n        validityCheck: DefaultChecks.requiredText70\r\n    };\r\n\r\n\r\n    //\r\n    // Создание пользователя\r\n    //\r\n    const createUserModalConfig = {\r\n        title: 'Создание нового пользователя',\r\n        data: [\r\n            usernameData,\r\n            passwordData,\r\n            confirmPasswordData,\r\n            nameData,\r\n            positionData,\r\n            getRoleData()\r\n        ],\r\n        buttons: [\r\n            {\r\n                text: 'Сохранить',\r\n                action: onUserCreate\r\n            }\r\n        ]\r\n    }\r\n    const createUserModal = new ModalForm(createUserModalConfig);\r\n\r\n\r\n    //\r\n    // Редактирование профиля\r\n    //\r\n    const editProfileModalConfig = {\r\n        title: (model) => `Редактирование профиля пользователя ${model.username}`,\r\n        data: [\r\n            nameData,\r\n            positionData,\r\n            getRoleData()\r\n        ],\r\n        buttons: [\r\n            {\r\n                text: 'Сохранить',\r\n                action: onUserProfileSave\r\n            }\r\n        ]\r\n    }\r\n    const editProfileModal = new ModalForm(editProfileModalConfig);\r\n\r\n\r\n    //\r\n    // Изменение пароля\r\n    //\r\n    const changePasswordModalConfig = {\r\n        title: (model) => `Задать новый пароль для пользователя ${model.username}`,\r\n        data: [\r\n            passwordData,\r\n            confirmPasswordData2\r\n        ],\r\n        buttons: [\r\n            {\r\n                text: 'Сохранить',\r\n                action: onPasswordChange\r\n            }\r\n        ]\r\n    }\r\n    const changePasswordModal = new ModalForm(changePasswordModalConfig);\r\n\r\n\r\n    //\r\n    // Таблица\r\n    //\r\n    const dataTableConfig = {\r\n        tableId: 'UsersList',\r\n        ajaxUrl: URI_API_USERS_LIST,\r\n        serverSide: true,\r\n        scroll: true,\r\n        advanced: {\r\n            columns: [\r\n                {\r\n                    data: 'id',\r\n                    name: 'Id',\r\n                    searchable: false,\r\n                    orderable: true\r\n                },\r\n                {\r\n                    data: 'name',\r\n                    name: 'Name',\r\n                    render: (data, type, row) => Util.escapeHTML(data),\r\n                    searchable: true,\r\n                    orderable: true\r\n                },\r\n                {\r\n                    data: 'role.name',\r\n                    name: 'Role.Name',\r\n                    render: (data, type, row) => Util.escapeHTML(data),\r\n                    searchable: true,\r\n                    orderable: true\r\n                }\r\n            ],\r\n            buttons: [\r\n                {\r\n                    text: 'Создать',\r\n                    action: function (e, dt, button, config) {\r\n                        createUserModal.show(null);\r\n                    }\r\n                },\r\n                {\r\n                    extend: 'selectedSingle',\r\n                    text: 'Изменить профиль',\r\n                    action: function (e, dt, button, config) {\r\n                        let model = dt.row({ selected: true }).data();\r\n                        editProfileModal.show(model);\r\n                    }\r\n                },\r\n                {\r\n                    extend: 'selectedSingle',\r\n                    text: 'Изменить пароль',\r\n                    action: function (e, dt, button, config) {\r\n                        let model = dt.row({ selected: true }).data();\r\n                        changePasswordModal.show(model);\r\n                    }\r\n                }\r\n            ]\r\n        }\r\n    };\r\n    const clinicCol = {\r\n        data: 'clinicShortName',\r\n        name: 'ClinicShortName',\r\n        render: (data, type, row) => Util.escapeHTML(data),\r\n        searchable: true,\r\n        orderable: true\r\n    };\r\n\r\n    if (isGlobal)\r\n        dataTableConfig.advanced.columns.push(clinicCol);\r\n\r\n    const table = new CustomDataTable(dataTableConfig);\r\n\r\n\r\n    // Обработчики кнопок модальных окон\r\n\r\n    async function onUserCreate(model) {\r\n        const data = {\r\n            name: model.name,\r\n            position: model.position,\r\n            username: model.username,\r\n            password: model.password,\r\n            roleId: +model.role.id\r\n        };\r\n\r\n        const result = await Util.postData(URI_API_USER_CREATE, data);\r\n        processResult(createUserModal, result);\r\n    }\r\n\r\n    async function onUserProfileSave(model) {\r\n        const data = {\r\n            name: model.name,\r\n            position: model.position,\r\n            roleId: +model.role.id\r\n        };\r\n        const result = await Util.postData(`${URI_API_USER_UPDATE_BASE}/${model.id}`, data);\r\n        processResult(editProfileModal, result);\r\n    }\r\n\r\n    async function onPasswordChange(model) {\r\n        const data = {\r\n            password: model.password\r\n        }\r\n        const result = await Util.postData(`${URI_API_USER_UPDATE_BASE}/${model.id}`, data);\r\n        processResult(changePasswordModal, result);\r\n    }\r\n\r\n\r\n    // Helpers\r\n\r\n    function getConfirmPasswordData(inputToConfirmSelector) {\r\n        return {\r\n            id: 'password-confirmation',\r\n            path: null,\r\n            type: 'input-password',\r\n            label: 'Повторите пароль',\r\n            validityCheck: getConfirmPasswordValidityCheck(inputToConfirmSelector)\r\n        }\r\n\r\n        function getConfirmPasswordValidityCheck(inputToConfirmSelector) {\r\n            return new ValidityCheck(\r\n                'Пароли не совпадают',\r\n                (input) => input.value !== document.querySelector(inputToConfirmSelector).value);\r\n        }\r\n    }\r\n\r\n    function getRoleOptions() {\r\n        let options = [\r\n            new Option('Сотрудник', '3'),\r\n            new Option('Модератор клиники', '2'),\r\n            new Option('Заблокированный', '4')\r\n        ];\r\n        if (isGlobal)\r\n            options.push(new Option('Администратор сайта', '1'));\r\n        return options;\r\n    }\r\n\r\n    function getRoleData() {\r\n        return {\r\n            id: 'roleId',\r\n            path: 'role.id',\r\n            type: 'select',\r\n            label: 'Тип аккаунта',\r\n            options: getRoleOptions()\r\n        };\r\n    }\r\n\r\n    function processResult(modal, result) {\r\n        if (result) {\r\n            modal.hide();\r\n            successToast.show();\r\n            table.ajaxReload();\r\n        }\r\n        else {\r\n            modal.enableButtons();\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default initUserList;","﻿import Util from './util/common';\r\n\r\n\r\nfunction initUserLogin() {\r\n    const URI_API_USER_LOGIN = '/api/user/login';\r\n    const CLASSNAME_DISPLAY_NONE = 'd-none';\r\n\r\n    const form = document.login;\r\n    const loginErrorMessage = document.querySelector('.alert-danger');\r\n    const loginButton = document.getElementById('LoginButton');\r\n    loginButton.addEventListener('click', onLogin);\r\n\r\n    async function onLogin(e) {\r\n        e.preventDefault();\r\n        loginButton.disabled = true;\r\n        loginErrorMessage.classList.add(CLASSNAME_DISPLAY_NONE);\r\n\r\n        const formData = new FormData(form);\r\n        const data = Object.fromEntries(formData);\r\n\r\n        const result = await Util.postData(URI_API_USER_LOGIN, data);\r\n        if (result) {\r\n            if (result.succeed === true) {\r\n                location.replace('/');\r\n            }\r\n            else {\r\n                showErrorMessage();\r\n            }\r\n        }\r\n        loginButton.disabled = false;\r\n    }\r\n\r\n    function showErrorMessage() {\r\n        loginErrorMessage.classList.remove(CLASSNAME_DISPLAY_NONE);       \r\n    }\r\n}\r\n\r\n\r\nexport default initUserLogin;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// Promise = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t179: 0\n};\n\nvar deferredModules = [\n\t[452,736]\n];\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\nvar checkDeferredModules = () => {\n\n};\nfunction checkDeferredModulesImpl() {\n\tvar result;\n\tfor(var i = 0; i < deferredModules.length; i++) {\n\t\tvar deferredModule = deferredModules[i];\n\t\tvar fulfilled = true;\n\t\tfor(var j = 1; j < deferredModule.length; j++) {\n\t\t\tvar depId = deferredModule[j];\n\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferredModules.splice(i--, 1);\n\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n\t\t}\n\t}\n\tif(deferredModules.length === 0) {\n\t\t__webpack_require__.x();\n\t\t__webpack_require__.x = () => {\n\n\t\t}\n\t}\n\treturn result;\n}\n__webpack_require__.x = () => {\n\t// reset startup function so it can be called again when more startup code is added\n\t__webpack_require__.x = () => {\n\n\t}\n\tchunkLoadingGlobal = chunkLoadingGlobal.slice();\n\tfor(var i = 0; i < chunkLoadingGlobal.length; i++) webpackJsonpCallback(chunkLoadingGlobal[i]);\n\treturn (checkDeferredModules = checkDeferredModulesImpl)();\n};\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (data) => {\n\tvar [chunkIds, moreModules, runtime, executeModules] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0, resolves = [];\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tresolves.push(installedChunks[chunkId][0]);\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\tfor(moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\tparentChunkLoadingFunction(data);\n\twhile(resolves.length) {\n\t\tresolves.shift()();\n\t}\n\n\t// add entry modules from loaded chunk to deferred list\n\tif(executeModules) deferredModules.push.apply(deferredModules, executeModules);\n\n\t// run deferred modules when all chunks ready\n\treturn checkDeferredModules();\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkProfOsmotr_Web\"] = self[\"webpackChunkProfOsmotr_Web\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = webpackJsonpCallback;","// run startup\nreturn __webpack_require__.x();\n"],"sourceRoot":""}