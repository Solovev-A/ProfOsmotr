{"version":3,"sources":["webpack://ProfOsmotr.Web/./wwwroot/css/src/site.css?782e","webpack://ProfOsmotr.Web/./wwwroot/js/src/calculation-company.js","webpack://ProfOsmotr.Web/./wwwroot/js/src/calculation-edit.js","webpack://ProfOsmotr.Web/./wwwroot/js/src/calculation-single.js","webpack://ProfOsmotr.Web/./wwwroot/js/src/catalog-list.js","webpack://ProfOsmotr.Web/./wwwroot/js/src/clinic-list.js","webpack://ProfOsmotr.Web/./wwwroot/js/src/clinic-settings.js","webpack://ProfOsmotr.Web/./wwwroot/js/src/main.js","webpack://ProfOsmotr.Web/./wwwroot/js/src/order-examination-indexes.js","webpack://ProfOsmotr.Web/./wwwroot/js/src/order-examinations.js","webpack://ProfOsmotr.Web/./wwwroot/js/src/order-items.js","webpack://ProfOsmotr.Web/./wwwroot/js/src/register-create-request.js","webpack://ProfOsmotr.Web/./wwwroot/js/src/register-requests.js","webpack://ProfOsmotr.Web/./wwwroot/js/src/user-list.js","webpack://ProfOsmotr.Web/./wwwroot/js/src/user-login.js","webpack://ProfOsmotr.Web/./wwwroot/js/src/util/common.js","webpack://ProfOsmotr.Web/./wwwroot/js/src/util/custom-datatable.js","webpack://ProfOsmotr.Web/./wwwroot/js/src/util/custom-validation.js","webpack://ProfOsmotr.Web/./wwwroot/js/src/util/modal/custom-modal-base.js","webpack://ProfOsmotr.Web/./wwwroot/js/src/util/modal/modal-datatable.js","webpack://ProfOsmotr.Web/./wwwroot/js/src/util/modal/modal-form.js","webpack://ProfOsmotr.Web/./wwwroot/js/src/util/profession-input.js","webpack://ProfOsmotr.Web/./wwwroot/js/src/util/script-manager.js","webpack://ProfOsmotr.Web/./wwwroot/js/src/util/simple-list.js","webpack://ProfOsmotr.Web/./wwwroot/js/src/util/success-toast.js","webpack://ProfOsmotr.Web/webpack/bootstrap","webpack://ProfOsmotr.Web/webpack/runtime/compat get default export","webpack://ProfOsmotr.Web/webpack/runtime/define property getters","webpack://ProfOsmotr.Web/webpack/runtime/global","webpack://ProfOsmotr.Web/webpack/runtime/hasOwnProperty shorthand","webpack://ProfOsmotr.Web/webpack/runtime/make namespace object","webpack://ProfOsmotr.Web/webpack/runtime/jsonp chunk loading","webpack://ProfOsmotr.Web/webpack/startup"],"names":[],"mappings":";;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;ACAA,CAA6C;AACZ;AACiF;AACnD;;;AAG/D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,gCAAgC,sDAAU;AAC1C;AACA,8CAA8C,EAAE,6BAA6B,EAAE;AAC/E;AACA;AACA;AACA;AACA;AACA,oCAAoC,4DAAe;AACnD,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,2BAA2B,CAAC;AAC5B;AACA,iBAAiB;AACjB;AACA;AACA;AACA,KAAK;;;AAGL;AACA;AACA;AACA;AACA;AACA,QAAQ,sEAAa,mBAAmB,iFAA4B;AACpE;;AAEA;AACA;AACA,QAAQ,sEAAa,sBAAsB,iFAA4B;;AAEvE;AACA;;AAEA;AACA,iDAAiD,kEAAa;AAC9D;AACA;AACA,QAAQ,sEAAa;;AAErB,uDAAuD,kEAAa;AACpE;AACA;AACA,QAAQ,sEAAa;;AAErB,+CAA+C,kEAAa;AAC5D;AACA;AACA,QAAQ,sEAAa;;AAErB,qDAAqD,kEAAa;AAClE;AACA;AACA,QAAQ,sEAAa;;AAErB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,6EAA6E,iEAAQ;AACrF;;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,QAAQ,iEAAQ;AAChB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,QAAQ,CAAC;AACT,QAAQ,wEAAe;AACvB;;AAEA;AACA;;AAEA,QAAQ,iEAAQ;AAChB;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;;AAEA,gCAAgC,0DAAa;AAC7C;AACA;AACA;AACA;;;AAGA,UAAU,4EAAoB;AAC9B;AACA;AACA;AACA;;AAEA,iEAAe,sBAAsB,E;;;;;;;;;;;;;;;;AC9MrC,CAAkC;AACgD;;;AAGlF;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY,sEAAa,QAAQ,wEAAmB;AACpD,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,YAAY,sEAAa,QAAQ,kFAA6B;AAC9D,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,oBAAoB,kEAAqB;;AAEzC;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,oBAAoB,kEAAqB;;AAEzC;AACA;;AAEA;AACA,eAAe,kEAAqB;AACpC;;AAEA;AACA;AACA;;AAEA;AACA,eAAe,4FAAuC;AACtD;;AAEA;AACA,eAAe,kFAA6B;AAC5C;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,QAAQ,iEAAQ;AAChB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,QAAQ,iEAAQ;AAChB,QAAQ,iEAAQ;AAChB;AACA;;AAEA;;AAEA,kCAAkC,0DAAa;AAC/C;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,oBAAoB,kEAAqB;AACzC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,wBAAwB;AAC/C;AACA,4BAA4B,kEAAqB;AACjD;AACA;AACA,+DAA+D,kEAAqB;AACpF;;AAEA;AACA;AACA;AACA;AACA;;AAEA,iEAAe,mBAAmB,E;;;;;;;;;;;;;;;;;;ACtOlC,CAAkC;AACgD;AACnB;;;AAG/D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA,UAAU,4EAAoB;AAC9B;AACA;;AAEA;AACA,QAAQ,sEAAa,sBAAsB,iFAA4B;AACvE;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,QAAQ,iEAAQ;AAChB;AACA;;AAEA;;AAEA,kCAAkC,0DAAa;AAC/C;AACA;AACA;AACA;;AAEA;AACA;;AAEA,yBAAyB,CAAC;AAC1B;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;;AAGA,iEAAe,qBAAqB,E;;;;;;;;;;;;;;;;;;;ACjFpC,CAAkC;AACc;AACM;AACN;AACS;;;AAGzD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,6BAA6B,wDAAY;;AAEzC;AACA,gEAAgE,WAAW;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,iFAA4B;AAC3D,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,+BAA+B,kFAA6B;AAC5D,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,+BAA+B,wEAAmB;AAClD,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,2DAAS;;;AAGtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,iBAAiB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,2DAAe;;;AAGrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sDAAsD,yBAAyB,IAAI,2BAA2B;;AAE9G;AACA;AACA,mEAAmE,kEAAqB;AACxF;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kEAAqB;AACxC;AACA;;AAEA,8BAA8B,0DAAa;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iEAAe,eAAe,E;;;;;;;;;;;;;;;;;;ACrI9B,CAAkC;AACc;AACM;AACN;;;AAGhD;AACA;;AAEA;AACA;;AAEA,6BAA6B,wDAAY;;AAEzC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,2DAAS;;;AAG/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,iBAAiB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iDAAiD,4DAAe;AAChE,iBAAiB;AACjB;AACA;AACA;AACA,iDAAiD,4DAAe;AAChE;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iDAAiD,4DAAe;AAChE;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sBAAsB,2DAAe;;AAErC;AACA;AACA;AACA;AACA;AACA,6BAA6B,0DAAa;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iEAAe,cAAc,E;;;;;;;;;;;;;;;;;ACxJ7B,CAAkC;AACiE;AACnD;;;AAGhD;AACA;;AAEA,6BAA6B,wDAAY;;AAEzC;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,QAAQ,sEAAa,gBAAgB,kFAA6B;AAClE,QAAQ,sEAAa,iBAAiB,kFAA6B;AACnE,QAAQ,sEAAa,eAAe,kFAA6B;AACjE,QAAQ,sEAAa,aAAa,wEAAmB;AACrD,QAAQ,sEAAa,aAAa,wEAAmB;AACrD;;AAEA;AACA;AACA;;AAEA;AACA,QAAQ,iEAAQ;AAChB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,6BAA6B,0DAAa;AAC1C;AACA,YAAY,wEAAe;AAC3B;AACA;AACA;AACA;AACA;;AAEA,iEAAe,kBAAkB,E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpDjC;AACgB;AACG;AACS;AACX;AACW;AACQ;AACI;AACH;AACA;AACF;;AAEnC;AACkD;AACS;AACN;AACI;AACZ;AACF;AACQ;AACM;AACd;AACuB;AACP;AACpB;AACE;;AAEzC;AAC8C;AACJ;AACgC;AACZ;AACa;AACR;AACE;AACA;AACJ;AACjC;;;AAGhC;AACA,2BAA2B,0DAAsB;AACjD,wBAAwB,uDAAmB;AAC3C,0BAA0B,yDAAqB;AAC/C,oBAAoB,mDAAe;AACnC,mBAAmB,kDAAc;AACjC,uBAAuB,sDAAkB;AACzC,0BAA0B,8DAA0B;AACpD,mBAAmB,uDAAmB;AACtC,+BAA+B,8DAAyB;AACxD,mCAAmC,wDAAwB;AAC3D,uBAAuB,oDAAY;AACnC,wBAAwB,qDAAa;AACrC;;AAEA,0BAA0B,0DAAa;AACvC,6E;;;;;;;;;;;;;;;;;;;ACxDA,CAAkC;AACuB;AACC;AACV;;;AAGhD;AACA,sDAAsD,EAAE,QAAQ;AAChE,gDAAgD,kBAAkB;AAClE,gDAAgD,gBAAgB;;;AAGhE;AACA;AACA,+BAA+B,2DAAS;AACxC,6BAA6B,gEAAc;AAC3C;AACA;AACA;;;AAGA;;AAEA;AACA;AACA,0BAA0B,sBAAsB,GAAG,eAAe;AAClE;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;;AAEA,QAAQ,CAAC;AACT,wCAAwC,CAAC;AACzC,YAAY,CAAC;AACb;AACA,gBAAgB,CAAC;AACjB,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA,0DAA0D,kBAAkB;AAC5E;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,4DAAe;AACxE,yBAAyB;AACzB;AACA;AACA,yDAAyD,4DAAe;AACxE;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,oDAAoD,iBAAiB;AACrE;AACA;AACA,6BAA6B;AAC7B;AACA,yBAAyB;AACzB;AACA;AACA;AACA,oDAAoD,iBAAiB;AACrE;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,iFAA4B;AAC/D,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,mCAAmC,iFAA4B;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,+BAA+B,gEAAmB,IAAI,qBAAqB,GAAG,GAAG;AACjF;AACA;AACA;AACA;;AAEA;AACA,uCAAuC,qBAAqB,GAAG,SAAS;AACxE,+BAA+B,0DAAa;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,kDAAkD,EAAE;AACpD;AACA;AACA;;AAEA,iEAAe,uBAAuB,E;;;;;;;;;;;;;;;;;;;;AC3JtC,CAAkC;AACc;AACM;AACN;AACS;AACS;;;AAGlE;AACA;AACA;;AAEA;AACA;AACA,+BAA+B,wDAAY;AAC3C;;;AAGA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,SAAS;AACT;;;AAGA;;AAEA;AACA,uCAAuC,yDAAY;AACnD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,4DAAe;AACpE,qBAAqB;AACrB;AACA;AACA,qDAAqD,4DAAe;AACpE,qBAAqB;AACrB;AACA;AACA,qDAAqD,4DAAe;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,gDAAgD,iBAAiB;AACjE;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,gDAAgD,iBAAiB;AACjE;AACA;AACA;AACA;AACA;AACA;;AAEA,qCAAqC,2DAAe;AACpD;;AAEA;AACA;AACA,8EAA8E,WAAW;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,mCAAmC,kFAA6B;AAChE,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,mCAAmC,iFAA4B;AAC/D,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,mCAAmC,kFAA6B;AAChE,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qCAAqC,2DAAS;AAC9C;;AAEA;AACA,uCAAuC,+DAAuB;AAC9D;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,6CAA6C,0DAAa;AAC1D;AACA,qCAAqC,eAAe;AACpD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,yCAAyC,0DAAa;;AAEtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iEAAe,qBAAqB,E;;;;;;;;;;;;;;;;;;;;AC1NpC,CAAkC;AACc;AACM;AACN;AACS;;;AAGzD;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,8DAA8D,uBAAuB;AACrF,oDAAoD,OAAO;;;AAG3D;AACA;AACA,+BAA+B,wDAAY;AAC3C;;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,SAAS;AACT;;;AAGA;;AAEA;AACA,iCAAiC,yDAAY;;AAE7C,sCAAsC,yDAAY;AAClD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,4DAAe;AACpE,qBAAqB;AACrB;AACA;AACA,qDAAqD,4DAAe;AACpE,qBAAqB;AACrB;AACA;AACA,oEAAoE,4DAAe;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,gDAAgD,iBAAiB;AACjE;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,+CAA+C,iBAAiB;AAChE;AACA;AACA;AACA;AACA;AACA;;AAEA,8BAA8B,2DAAe;AAC7C;;AAEA;AACA;AACA,uEAAuE,UAAU;AACjF;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,iFAA4B;AAC/D,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,mCAAmC,kFAA6B;AAChE,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kCAAkC,2DAAS;AAC3C;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb,QAAQ,CAAC;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA,6BAA6B,CAAC;AAC9B;;AAEA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sCAAsC,0DAAa;AACnD;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,kCAAkC,0DAAa;AAC/C;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,8DAA8D,aAAa;AAC3E,mCAAmC,0DAAa;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;;;AAGA;AACA,YAAY,CAAC;AACb;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,iEAAe,cAAc,E;;;;;;;;;;;;;;;;AC3Q7B,CAAkC;AACgD;;;AAGlF;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,QAAQ,iEAAQ;AAChB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,2BAA2B,0DAAa;;AAExC;AACA;AACA;;AAEA;AACA;;AAEA;AACA,QAAQ,sEAAa,yBAAyB,kFAA6B;AAC3E,QAAQ,sEAAa,0BAA0B,kFAA6B;AAC5E,QAAQ,sEAAa,wBAAwB,kFAA6B;AAC1E,QAAQ,sEAAa,sBAAsB,wEAAmB;AAC9D,QAAQ,sEAAa,sBAAsB,wEAAmB;AAC9D,QAAQ,sEAAa,8BAA8B,iFAA4B;AAC/E,QAAQ,sEAAa,kCAAkC,iFAA4B;AACnF,QAAQ,sEAAa,kCAAkC,2EAAsB;AAC7E,QAAQ,sEAAa,kCAAkC,2EAAsB;AAC7E;;AAEA;AACA;AACA;AACA;AACA;;;AAGA,iEAAe,yBAAyB,E;;;;;;;;;;;;;;;;;;AC5ExC,CAAkC;AACc;AACM;AACN;;;AAGhD;AACA;AACA;;;AAGA;AACA;AACA,gCAAgC,wDAAY;AAC5C;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,6CAA6C,4DAAe;AAC5D,aAAa;AACb;AACA;AACA;AACA,6CAA6C,4DAAe;AAC5D;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,wCAAwC,iBAAiB;AACzD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wCAAwC,2DAAe;;AAEvD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,8CAA8C,2DAAe;AAC7D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,yCAAyC,UAAU,IAAI,cAAc;AACrE,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wCAAwC,2DAAS;AACjD;;AAEA;AACA;AACA;AACA;AACA;;AAEA,6BAA6B,0DAAa;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iEAAe,wBAAwB,E;;;;;;;;;;;;;;;;;;;ACjLvC,CAAkC;AACc;AACM;AACN;AACwB;;;AAGxE;AACA;AACA;AACA;;AAEA;AACA,6BAA6B,wDAAY;;;AAGzC;;AAEA;AACA;AACA;AACA;AACA;AACA,uBAAuB,2EAAsB;AAC7C;;AAEA;AACA;AACA;AACA;AACA;AACA,uBAAuB,2EAAsB;AAC7C;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,uBAAuB,iFAA4B;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,iFAA4B;AACnD;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,2DAAS;;;AAGzC;AACA;AACA;AACA;AACA,iEAAiE,eAAe;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,2DAAS;;;AAG1C;AACA;AACA;AACA;AACA,kEAAkE,eAAe;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,2DAAS;;;AAG7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iDAAiD,4DAAe;AAChE;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iDAAiD,4DAAe;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,4CAA4C,iBAAiB;AAC7D;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,4CAA4C,iBAAiB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,4DAAe;AACpD;AACA;AACA;;AAEA;AACA;;AAEA,sBAAsB,2DAAe;;;AAGrC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6BAA6B,0DAAa;AAC1C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,0DAAa,IAAI,yBAAyB,GAAG,SAAS;AACnF;AACA;;AAEA;AACA;AACA;AACA;AACA,6BAA6B,0DAAa,IAAI,yBAAyB,GAAG,SAAS;AACnF;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,kEAAa;AACpC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,iEAAe,YAAY,E;;;;;;;;;;;;;;;AChR3B,CAAkC;;;AAGlC;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,6BAA6B,0DAAa;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mE;AACA;AACA;;;AAGA,iEAAe,aAAa,E;;;;;;;;;;;;;;ACtC5B;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,KAAK;;AAEL;AACA;AACA;AACA;AACA,iCAAiC;AACjC,gCAAgC;AAChC,gCAAgC;AAChC,kCAAkC;AAClC,kCAAkC;AAClC,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;;AAEL;AACA;AACA;AACA,SAAS;AACT,KAAK;;AAEL;AACA;AACA;AACA,sBAAsB,mCAAmC,gBAAgB;AACzE;AACA;AACA,SAAS;AACT,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iEAAe,IAAI,E;;;;;;;;;;;;;;;AC3FnB;AACA;;AAEA,iCAAiC,OAAO;AACxC,iCAAiC,WAAW;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,uCAAuC;AACvC;AACA,KAAK;AACL,uCAAuC,uBAAuB;AAC9D;AACA,sDAAsD,uBAAuB;AAC7E;;AAEA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sBAAsB,CAAC;AACvB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,CAAC,gBAAgB;;AAExC;AACA;AACA;AACA;AACA;;AAEA;AACA,4BAA4B;AAC5B;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,iEAAe,eAAe,E;;;;;;;;;;;;;;;;;;;ACjJ9B;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,6CAA6C,EAAE,IAAI,EAAE;;AAErD;AACA;AACA;;AAEA;AACA;AACA,kDAAkD,KAAK;;AAEvD;AACA;AACA,6DAA6D,KAAK;;AAElE;AACA;AACA,wCAAwC,MAAM;;AAE9C;AACA;AACA,wCAAwC,KAAK;;AAE7C;AACA;AACA,wCAAwC,KAAK;;AAE7C;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACzHA,CAA8B;;;AAG9B;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,aAAa,sBAAsB;AACnC;AACA,gCAAgC;AAChC;AACA;AACA,cAAc,qBAAqB;AACnC;AACA,cAAc,uBAAuB;AACrC;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA,kDAAkD,oDAAY;AAC9D;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA,QAAQ,CAAC,KAAK,aAAa;AAC3B;;AAEA;AACA;AACA;;AAEA;AACA;AACA,QAAQ,CAAC,KAAK,aAAa;AAC3B;;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,qBAAqB,CAAC,gBAAgB;AACtC;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,QAAQ,CAAC,KAAK,aAAa;AAC3B;;AAEA;AACA,6BAA6B,sDAAc;AAC3C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iEAAe,wBAAwB,E;;;;;;;;;;;;;;;;;AC7NvC,CAA8B;AACoB;AACS;;;AAG3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;;AAGA,6BAA6B,uDAAwB;AACrD;AACA;;AAEA;AACA,6BAA6B,sDAAe;AAC5C;;;AAGA,iBAAiB;AACjB,QAAQ,oDAAY;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;AAGA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iEAAe,cAAc,E;;;;;;;;;;;;;;;;;AChG7B,CAA8B;AAC6B;AACqB;;;AAGhF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;AAGA,wBAAwB,uDAAwB;AAChD;AACA;AACA;;;AAGA;;AAEA;AACA;AACA,QAAQ,4DAAQ;AAChB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,QAAQ,mEAAe;AACvB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,6DAA6D,uBAAuB;AACpF;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,oDAAoD,6BAA6B,sBAAsB,IAAI,WAAW;AACtH,mBAAmB,sDAAc;AACjC;;AAEA;AACA,mBAAmB,sDAAc;AACjC;;AAEA;AACA;AACA,kEAAkE,WAAW;AAC7E;AACA,8BAA8B,sDAAc;;AAE5C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,iEAAa;AACzB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,+DAA+D,aAAa,IAAI,WAAW;AAC3F;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA,iEAAe,SAAS,E;;;;;;;;;;;;;;;;AC1NxB,CAA6B;;AAE7B;AACA;AACA;AACA;AACA,4BAA4B,oDAAY;AACxC;AACA;AACA;AACA;;AAEA;AACA;AACA,qBAAqB,uDAAe;AACpC,kDAAkD,kBAAkB,qBAAqB,WAAW,KAAK,IAAI,KAAK;AAClH,eAAe,CAAC;AAChB;AACA;;;AAGA,IAAI,CAAC;AACL;AACA;AACA;AACA;AACA,eAAe,CAAC,uBAAuB,CAAC,uBAAuB,CAAC;AAChE;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,iBAAiB,cAAc,IAAI,eAAe;AAClD;AACA;AACA;;;;;;;;;;;;;;;;ACzCA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,iEAAe,aAAa,E;;;;;;;;;;;;;;;AC1B5B;AACA;AACA;AACA,0DAA0D,EAAE,UAAU,EAAE;AACxE;AACA;AACA;AACA;AACA;AACA;;AAE4B;;AAE5B;AACA,qGAAqG,UAAU,QAAQ;;AAEvH;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,gCAAgC,cAAc;AAC9C;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,iCAAiC,sDAAc;;AAE/C;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA,0BAA0B,sDAAc;AACxC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iEAAe,UAAU,E;;;;;;;;;;;;;;;;AC/FzB;;AAE4B;;AAE5B;AACA;AACA;AACA;AACA;;AAEA,2CAA2C,WAAW,6BAA6B,0BAA0B;AAC7G,uBAAuB,cAAc,aAAa,kBAAkB;AACpE,kBAAkB,kBAAkB;AACpC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,QAAQ,CAAC;AACT;;AAEA;AACA;AACA;AACA;;AAEA,sBAAsB,sDAAc;AACpC;AACA;;AAEA;AACA,QAAQ,CAAC;AACT;AACA;;AAEA,iEAAe,YAAY,E;;;;;;UCzC3B;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;UAEA;UACA;;;;;WCxBA;WACA;WACA;WACA;WACA;WACA,gCAAgC,YAAY;WAC5C;WACA,E;;;;;WCPA;WACA;WACA;WACA;WACA,wCAAwC,yCAAyC;WACjF;WACA;WACA,E;;;;;WCPA;WACA;WACA;WACA;WACA,EAAE;WACF;WACA;WACA,CAAC,I;;;;;WCPD,sF;;;;;WCAA;WACA;WACA;WACA,sDAAsD,kBAAkB;WACxE;WACA,+CAA+C,cAAc;WAC7D,E;;;;;WCNA;;WAEA;WACA;WACA;WACA;WACA;WACA;;WAEA;WACA;WACA;WACA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;WACA;WACA;WACA,eAAe,4BAA4B;WAC3C;WACA;WACA,gBAAgB,2BAA2B;WAC3C;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;WAEA;WACA;WACA;WACA;WACA;WACA;WACA;;WAEA;WACA;WACA,eAAe,+BAA+B;WAC9C;WACA;;WAEA;WACA;WACA;WACA;WACA;WACA;WACA,MAAM,oBAAoB;WAC1B;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;WAEA;WACA;;WAEA;WACA;WACA;;WAEA;WACA;WACA,+C;;;;UC1FA;UACA","file":"main.js","sourcesContent":["// extracted by mini-css-extract-plugin\nexport {};","﻿import SimpleList from './util/simple-list';\r\nimport Util from './util/common';\r\nimport { addValidation, resetValidation, validate, ValidityCheck, DefaultChecks } from './util/custom-validation';\r\nimport { initOrderItemsSelect } from './util/profession-input';\r\n\r\n\r\nasync function initCalculationCompany() {\r\n    const professionConstructor = document.professionConstructor;\r\n    const inputsToValidateOnAddProfession = document.querySelectorAll('#Constructor input:not([type=\"submit\"])');\r\n    const inputsToValidateOnCreateCalculation = document.querySelectorAll('.js-validate');\r\n\r\n    // Selectors\r\n    const SELECTOR_ORDER_ITEMS_SELECT = '#OrderItems';\r\n    const SELECTOR_PROFESSIONS_LIST = '#ProfessionsList';\r\n    const SELECTOR_COMPANY_NAME_INPUT = '#CompanyName';\r\n    const SELECTOR_ADD_PROFESSION_BUTTON = '#AddProfession';\r\n    const SELECTOR_CALCULATE_BUTTON = '#CreateCompanyCalculation';\r\n\r\n    const CLASSNAME_NUMBERS = 'js-number';\r\n\r\n    // URI\r\n    const URI_CREATE_CALCULATION_API = '/api/calculation/create';\r\n    const URI_CALCULATION_RESULT_BASE = '/Calculation/Result/';\r\n\r\n    const professionsList = new SimpleList({\r\n        target: SELECTOR_PROFESSIONS_LIST,\r\n        itemTemplate: '<div class=\"col-sm-8\">{0}</div><div class=\"col-sm-4\">{1} чел.</div>',\r\n        reverse: true,\r\n        data: [\r\n            {\r\n                source: () => professionConstructor.ProfessionName.value,\r\n                path: 'name',\r\n                render: (source) => Util.escapeHTML(source)\r\n            },\r\n            {\r\n                source: () => parseInt(professionConstructor.NumberOfPersons.value),\r\n                path: 'numberOfPersons'\r\n            },\r\n            {\r\n                source: () => parseInt(professionConstructor.NumberOfWomen.value),\r\n                path: 'numberOfWomen'\r\n            },\r\n            {\r\n                source: () => parseInt(professionConstructor.NumberOfWomenOver40.value),\r\n                path: 'numberOfWomenOver40'\r\n            },\r\n            {\r\n                source: () => parseInt(professionConstructor.NumberOfPersonsOver40.value),\r\n                path: 'numberOfPersonsOver40'\r\n            },\r\n            {\r\n                source: () => {\r\n                    return $(SELECTOR_ORDER_ITEMS_SELECT).select2('data')\r\n                        .map((item) => parseInt(item.id));\r\n                },\r\n                path: 'orderItems'\r\n            }\r\n        ]\r\n    })\r\n\r\n\r\n    /* ------------------\r\n     * Валидация форм\r\n     * -----------------*/\r\n    function startCompanyDataValidation() {\r\n        const companyNameInput = document.querySelector(SELECTOR_COMPANY_NAME_INPUT);\r\n        addValidation(companyNameInput, DefaultChecks.requiredText70);\r\n    }\r\n\r\n    function startConstructorValidation() {\r\n        const professionNameInput = professionConstructor.ProfessionName;\r\n        addValidation(professionNameInput, DefaultChecks.requiredText70);\r\n\r\n        startValidateNumbers();\r\n    }\r\n\r\n    function startValidateNumbers() {\r\n        const numberOfPersonsValidityCheck = new ValidityCheck(\r\n            'Должна быть больше нуля и не меньше численности входящих подгрупп',\r\n            input => isInvalidNumberOfPersons(input.value));\r\n        addValidation(professionConstructor.NumberOfPersons, numberOfPersonsValidityCheck);\r\n\r\n        const numberOfPersonsOver40ValidityCheck = new ValidityCheck(\r\n            'Должна быть больше числа женщин старше 40 лет и меньше общей численности',\r\n            input => isInvalidNumberOfPersonsOver40(input.value));\r\n        addValidation(professionConstructor.NumberOfPersonsOver40, numberOfPersonsOver40ValidityCheck);\r\n\r\n        const numberOfWomenValidityCheck = new ValidityCheck(\r\n            'Должна быть больше числа женщин старше 40 лет и меньше общей численности',\r\n            input => isInvalidNumberOfWomen(input.value));\r\n        addValidation(professionConstructor.NumberOfWomen, numberOfWomenValidityCheck);\r\n\r\n        const numberOfWomenOver40ValidityCheck = new ValidityCheck(\r\n            'Должна быть меньше всех остальных групп, но не меньше нуля',\r\n            input => isInvalidNumberOfWomenOver40(input.value));\r\n        addValidation(professionConstructor.NumberOfWomenOver40, numberOfWomenOver40ValidityCheck);\r\n\r\n        checkAllNumbersOnOneChange();\r\n    }\r\n\r\n    function isInvalidNumberOfPersons(value) {\r\n        let number = +value;\r\n        return !Number.isInteger(number)\r\n            || number < 1\r\n            || number < +professionConstructor.NumberOfPersonsOver40.value\r\n            || number < +professionConstructor.NumberOfWomen.value\r\n            || number < +professionConstructor.NumberOfWomenOver40.value;\r\n    }\r\n\r\n    function isInvalidNumberOfPersonsOver40(value) {\r\n        let number = +value;\r\n        return !Number.isInteger(number)\r\n            || number < 0\r\n            || number > +professionConstructor.NumberOfPersons.value\r\n            || number < +professionConstructor.NumberOfWomenOver40.value;\r\n    }\r\n\r\n    function isInvalidNumberOfWomen(value) {\r\n        let number = +value;\r\n        return !Number.isInteger(number)\r\n            || number < 0\r\n            || number > +professionConstructor.NumberOfPersons.value\r\n            || number < +professionConstructor.NumberOfWomenOver40.value;\r\n    }\r\n\r\n    function isInvalidNumberOfWomenOver40(value) {\r\n        let number = +value;\r\n        return !Number.isInteger(number)\r\n            || number < 0\r\n            || number > +professionConstructor.NumberOfPersons.value\r\n            || number > +professionConstructor.NumberOfPersonsOver40.value\r\n            || number > +professionConstructor.NumberOfWomen.value;\r\n    }\r\n\r\n    function checkAllNumbersOnOneChange() {\r\n        const numberInputs = Array.from(document.getElementsByClassName(CLASSNAME_NUMBERS));\r\n        numberInputs.forEach(value => value.addEventListener('keyup', (e) => validate(numberInputs)));\r\n    }\r\n\r\n\r\n    // Обработка событий\r\n\r\n    function addEventListeners() {\r\n        const addProfessionBtn = document.querySelector(SELECTOR_ADD_PROFESSION_BUTTON);\r\n        addProfessionBtn.addEventListener('click', onAddProfession);\r\n\r\n        const calculateBtn = document.querySelector(SELECTOR_CALCULATE_BUTTON);\r\n        calculateBtn.addEventListener('click', onCalculate);\r\n    }\r\n\r\n    function onAddProfession(e) {\r\n        e.preventDefault();\r\n        validate(inputsToValidateOnAddProfession);\r\n        if (!professionConstructor.checkValidity())\r\n            return;\r\n        professionsList.add();\r\n        clearConstructor();\r\n    }\r\n\r\n    function clearConstructor() {\r\n        professionConstructor.reset();\r\n        $(SELECTOR_ORDER_ITEMS_SELECT).val(null).trigger('change');\r\n        resetValidation(inputsToValidateOnAddProfession);\r\n    }\r\n\r\n    async function onCalculate(e) {\r\n        e.preventDefault();\r\n\r\n        validate(inputsToValidateOnCreateCalculation);\r\n        if (!document.companyData.checkValidity())\r\n            return;\r\n\r\n        const nameElement = document.querySelector(SELECTOR_COMPANY_NAME_INPUT);\r\n\r\n        let calculationSource = {\r\n            name: nameElement.value,\r\n            sources: professionsList.getData().map(source => ({\r\n                profession: {\r\n                    name: source.name,\r\n                    orderItems: source.orderItems\r\n                },\r\n                numberOfPersons: source.numberOfPersons,\r\n                numberOfWomen: source.numberOfWomen,\r\n                numberOfPersonsOver40: source.numberOfPersonsOver40,\r\n                numberOfWomenOver40: source.numberOfWomenOver40\r\n            }))\r\n        };\r\n\r\n        if (calculationSource.sources.length === 0) {\r\n            alert('Добавьте хотя бы одну профессию');\r\n            return;\r\n        }\r\n\r\n        let calculation = await Util.postData(URI_CREATE_CALCULATION_API, calculationSource);\r\n        if (calculation) {\r\n            location = URI_CALCULATION_RESULT_BASE + calculation.id;\r\n        }\r\n    }\r\n\r\n\r\n    await initOrderItemsSelect();\r\n    startCompanyDataValidation();\r\n    startConstructorValidation();\r\n    addEventListeners();\r\n}\r\n\r\nexport default initCalculationCompany;","﻿import Util from './util/common';\r\nimport { addValidation, validate, DefaultChecks } from './util/custom-validation';\r\n\r\n\r\nfunction initCalculationEdit() {\r\n    const SELECTOR_RESULT_ITEM_BASE = '.js-result-';\r\n    const NAME_RESULT_ITEM_PRICE = 'price';\r\n    const NAME_RESULT_ITEM_AMOUNT = 'amount';\r\n    const NAME_RESULT_ITEM_SUM = 'sum';\r\n    const NAME_RESULT_ITEM_GROUP = 'group';\r\n\r\n    const SELECTOR_CALCULATION_ID = '#CalculationId';\r\n    const SELECTOR_RESULT_ITEM_ROW = '.form-group';\r\n    const SELECTOR_TOTAL_SUM = '#TotalSum';\r\n    const SELECTOR_SAVE_CALCULATION_BUTTON = '#SaveChanges';\r\n\r\n    const URI_UPDATE_CALCULATION_API = '/api/calculation/update';\r\n    const URI_CALCULATION_RESULT_BASE = '/Calculation/Result/';\r\n\r\n    const priceInputs = document.querySelectorAll(SELECTOR_RESULT_ITEM_BASE + NAME_RESULT_ITEM_PRICE);\r\n    const amountInputs = document.querySelectorAll(SELECTOR_RESULT_ITEM_BASE + NAME_RESULT_ITEM_AMOUNT);\r\n    const sumElements = document.querySelectorAll(SELECTOR_RESULT_ITEM_BASE + NAME_RESULT_ITEM_SUM);\r\n    const groupSelects = document.querySelectorAll(SELECTOR_RESULT_ITEM_BASE + NAME_RESULT_ITEM_GROUP);\r\n\r\n    const AVAILABLE_SERVICE_OPTION_INDEX = 0;\r\n    const RESULT_ITEM_ID_PREFIX = 'r-';\r\n\r\n    processPriceInputs();\r\n    processAmountInputs();\r\n    processGroupSelects();\r\n    calculateTotalSum();\r\n    addSaveBtnEventListener();\r\n\r\n    function processPriceInputs() {\r\n        let arr = Array.from(priceInputs);\r\n        arr.forEach(input => {\r\n            input.addEventListener('keyup', onPriceChanged);\r\n            addValidation(input, DefaultChecks.price);\r\n        });\r\n    }\r\n\r\n    function processAmountInputs() {\r\n        let arr = Array.from(amountInputs);\r\n        arr.forEach(input => {\r\n            input.addEventListener('keyup', onAmountChanged);\r\n            addValidation(input, DefaultChecks.positiveInteger);\r\n        });\r\n    }\r\n\r\n    function onPriceChanged(e) {\r\n        let input = e.target;\r\n        if (isPriceInputInvalid(input))\r\n            return;\r\n        let resultId = getResultId(input);\r\n\r\n        let amountInput = getAmountInput(resultId);\r\n        if (isAmountInputInvalid(amountInput))\r\n            return;\r\n\r\n        let sum = getSumElement(resultId);\r\n        sum.value = Util.toCurrencyString(calculateSum(input, amountInput));\r\n\r\n        calculateTotalSum();\r\n    }\r\n\r\n    function onAmountChanged(e) {\r\n        let input = e.target;\r\n        if (isAmountInputInvalid(input))\r\n            return;\r\n        let resultId = getResultId(input);\r\n\r\n        let priceInput = getPriceInput(resultId);\r\n        if (isPriceInputInvalid(priceInput))\r\n            return;\r\n\r\n        let sum = getSumElement(resultId);\r\n        sum.value = Util.toCurrencyString(calculateSum(priceInput, input));\r\n\r\n        calculateTotalSum();\r\n    }\r\n\r\n    function calculateSum(priceInput, amountInput) {\r\n        return Util.customParseFloat(priceInput.value) * amountInput.value;\r\n    }\r\n\r\n    function getResultId(formInput) {\r\n        return formInput.parentNode.parentNode.id;\r\n    }\r\n\r\n    function isAmountInputInvalid(input) {\r\n        return DefaultChecks.positiveInteger.isInvalid(input);\r\n    }\r\n\r\n    function isPriceInputInvalid(input) {\r\n        return DefaultChecks.price.isInvalid(input);\r\n    }\r\n\r\n    function processGroupSelects() {\r\n        var arr = Array.from(groupSelects);\r\n        arr.forEach(item => {\r\n            item.addEventListener('change', onGroupChange);\r\n        })\r\n    }\r\n\r\n    function onGroupChange(e) {\r\n        const select = e.target;\r\n        const resultId = getResultId(select);\r\n\r\n        const priceInput = getPriceInput(resultId);\r\n        const amountInput = getAmountInput(resultId);\r\n        const sumInput = getSumElement(resultId);\r\n\r\n        checkInputsValidityOnSelectChange(priceInput, amountInput);\r\n\r\n        let inputs = [priceInput, amountInput, sumInput];\r\n\r\n        if (select.selectedIndex === AVAILABLE_SERVICE_OPTION_INDEX) {\r\n            showInputs(inputs);\r\n        }\r\n        else {\r\n            hideInputs(inputs);\r\n        }\r\n\r\n        calculateTotalSum();\r\n    }\r\n\r\n    function checkInputsValidityOnSelectChange(priceInput, amountInput) {\r\n        if (isPriceInputInvalid(priceInput)) {\r\n            priceInput.value = '0';\r\n        }\r\n\r\n        if (isAmountInputInvalid(amountInput)) {\r\n            amountInput.value = '0';\r\n        }\r\n\r\n        validate([priceInput, amountInput]);\r\n    }\r\n\r\n    function hideInputs(inputs) {\r\n        inputs.forEach(input => input.type = 'hidden');\r\n    }\r\n\r\n    function showInputs(inputs) {\r\n        inputs.forEach(input => input.type = 'text');\r\n    }\r\n\r\n    function getPriceInput(resultId) {\r\n        return getInput(resultId, NAME_RESULT_ITEM_PRICE);\r\n    }\r\n\r\n    function getAmountInput(resultId) {\r\n        return getInput(resultId, NAME_RESULT_ITEM_AMOUNT);\r\n    }\r\n\r\n    function getSumElement(resultId) {\r\n        return getInput(resultId, NAME_RESULT_ITEM_SUM);\r\n    }\r\n\r\n    function getInput(resultId, name) {\r\n        let input = document.querySelector('#' + resultId + ' ' + SELECTOR_RESULT_ITEM_BASE + name);\r\n        if (!input) {\r\n            console.log('Не найдено поле ' + name);\r\n            return null;\r\n        }\r\n        return input;\r\n    }\r\n\r\n    async function onSaveChanges(e) {\r\n        e.preventDefault();\r\n        validate(priceInputs);\r\n        validate(amountInputs);\r\n        if (!document.Results.checkValidity())\r\n            return;\r\n\r\n        let data = createUpdateCalculationRequestData();\r\n\r\n        const calculation = await Util.postData(URI_UPDATE_CALCULATION_API, data);\r\n        if (calculation) {\r\n            location = URI_CALCULATION_RESULT_BASE + calculation.id;\r\n        }\r\n    }\r\n\r\n    function createUpdateCalculationRequestData() {\r\n        const calculationId = parseInt(document.querySelector(SELECTOR_CALCULATION_ID).value);\r\n\r\n        let resultItems = [];\r\n\r\n        let rows = document.querySelectorAll(SELECTOR_RESULT_ITEM_ROW);\r\n        for (var i = 0; i < rows.length; i++) {\r\n            let item = getResultItem(rows[i]);\r\n            resultItems.push(item);\r\n        }\r\n\r\n        return {\r\n            calculationId: calculationId,\r\n            resultItems: resultItems\r\n        }\r\n    }\r\n\r\n    function getResultItem(formGroup) {\r\n        let id = parseInt(formGroup.id.slice(RESULT_ITEM_ID_PREFIX.length));\r\n\r\n        let price = Util.customParseFloat(formGroup.querySelector(SELECTOR_RESULT_ITEM_BASE + NAME_RESULT_ITEM_PRICE).value);\r\n        let amount = +formGroup.querySelector(SELECTOR_RESULT_ITEM_BASE + NAME_RESULT_ITEM_AMOUNT).value;\r\n        let groupId = +formGroup.querySelector(SELECTOR_RESULT_ITEM_BASE + NAME_RESULT_ITEM_GROUP).value;\r\n\r\n        return {\r\n            id: id,\r\n            price: price,\r\n            amount: amount,\r\n            groupId: groupId\r\n        }\r\n    }\r\n\r\n    function calculateTotalSum() {\r\n        let totalSum = 0;\r\n        for (var i = 0; i < sumElements.length; i++) {\r\n            if (sumElements[i].type === 'text') {\r\n                totalSum += Util.customParseFloat(sumElements[i].value);\r\n            }\r\n        }\r\n        document.querySelector(SELECTOR_TOTAL_SUM).innerText = Util.toCurrencyString(totalSum);\r\n    }\r\n\r\n    function addSaveBtnEventListener() {\r\n        const saveBtn = document.querySelector(SELECTOR_SAVE_CALCULATION_BUTTON);\r\n        saveBtn.addEventListener('click', onSaveChanges);\r\n    }\r\n}\r\n\r\nexport default initCalculationEdit;","﻿import Util from './util/common';\r\nimport { addValidation, validate, DefaultChecks } from './util/custom-validation';\r\nimport { initOrderItemsSelect } from './util/profession-input';\r\n\r\n\r\nasync function initCalculationSingle() {\r\n    const SELECTOR_ORDER_ITEMS_SELECT = '#OrderItems';\r\n    const SELECTOR_CREATE_CALCULATION_BUTTON = '#createSingleCalculation';\r\n    const SELECTOR_PROFESSION_NAME_INPUT = '#ProfessionName';\r\n    const SELECTOR_IS_WOMAN_CHECKBOX = '#IsWoman';\r\n    const SELECTOR_IS_OVER_40_CHECKBOX = '#IsOver40';\r\n\r\n    const URI_CREATE_CALCULATION_API = '/api/calculation/create';\r\n    const URI_CALCULATION_RESULT_BASE = '/Calculation/Result/';\r\n\r\n    const professionNameInput = document.querySelector(SELECTOR_PROFESSION_NAME_INPUT);\r\n\r\n    await initOrderItemsSelect();\r\n    addFormValidation();\r\n    addEventListeners();\r\n\r\n    function addFormValidation() {\r\n        addValidation(professionNameInput, DefaultChecks.requiredText70);\r\n    }\r\n\r\n    function addEventListeners() {\r\n        var submitBtn = document.querySelector(SELECTOR_CREATE_CALCULATION_BUTTON);\r\n        submitBtn.addEventListener('click', onSubmit);\r\n    }\r\n\r\n    async function onSubmit(e) {\r\n        e.preventDefault();\r\n\r\n        const inputs = [professionNameInput];\r\n        validate(inputs);\r\n        if (!document.singleCalc.checkValidity())\r\n            return;\r\n\r\n        const calculationSource = getCalculationSource();\r\n\r\n        const calculation = await Util.postData(URI_CREATE_CALCULATION_API, calculationSource);\r\n        if (calculation) {\r\n            location = URI_CALCULATION_RESULT_BASE + calculation.id;\r\n        }\r\n    }\r\n\r\n    function getCalculationSource() {\r\n        let professionName = professionNameInput.value;\r\n\r\n        let orderItems = $(SELECTOR_ORDER_ITEMS_SELECT).select2('data')\r\n            .map((item) => parseInt(item.id));\r\n        if (orderItems.length == 0) {\r\n            alert('Выберите хотя бы один пункт приказа');\r\n            return;\r\n        }\r\n\r\n        let isWoman = document.querySelector(SELECTOR_IS_WOMAN_CHECKBOX).checked;\r\n        let womenCount = isWoman ? 1 : 0;\r\n\r\n        let isOver40 = document.querySelector(SELECTOR_IS_OVER_40_CHECKBOX).checked;\r\n        let over40Count = isOver40 ? 1 : 0;\r\n\r\n        let womenOver40Count = isWoman && isOver40 ? 1 : 0;\r\n\r\n        return {\r\n            name: 'Индивидуальный расчет',\r\n            sources: [{\r\n                profession: {\r\n                    name: professionName,\r\n                    orderItems: orderItems\r\n                },\r\n                numberOfPersons: 1,\r\n                numberOfWomen: womenCount,\r\n                numberOfWomenOver40: womenOver40Count,\r\n                numberOfPersonsOver40: over40Count\r\n            }]\r\n        };\r\n    }\r\n}\r\n\r\n\r\nexport default initCalculationSingle;","﻿import Util from './util/common';\r\nimport ModalForm from './util/modal/modal-form';\r\nimport CustomDataTable from './util/custom-datatable';\r\nimport SuccessToast from './util/success-toast';\r\nimport { DefaultChecks } from './util/custom-validation';\r\n\r\n\r\nfunction initCatalogList() {\r\n    const URI_API_CATALOG_UPDATE = '/api/catalog/update';\r\n\r\n    const SELECTOR_EXAMINATION_NAME = '.js-catalog-examination';\r\n    const SELECTOR_SERVICE_CODE = '.js-catalog-code';\r\n    const SELECTOR_SERVICE_FULL_NAME = '.js-catalog-name';\r\n    const SELECTOR_SERVICE_PRICE = '.js-catalog-price';\r\n    const SELECTOR_SERVICE_GROUP = '.js-catalog-group';\r\n    const SELECTOR_CATALOG_UPDATE_TIME = '.js-catalog-update-time';\r\n\r\n    const ID_TABLE_CATALOG = 'Catalog';\r\n\r\n    const ATTR_DATA_EXAMINATION_ID = 'data-examination-id';\r\n\r\n    const successToast = new SuccessToast();\r\n\r\n    const modalOptions = {\r\n        title: (model) => `Изменение услуги для обследования: ${model.name}`,\r\n        data: [\r\n            {\r\n                id: 'service-code',\r\n                path: 'code',\r\n                label: 'Код услуги',\r\n                type: 'input-text',\r\n                validityCheck: DefaultChecks.requiredText20\r\n            },\r\n            {\r\n                id: 'service-name',\r\n                path: 'fullName',\r\n                label: 'Наименование услуги',\r\n                type: 'textarea',\r\n                validityCheck: DefaultChecks.requiredText500\r\n            },\r\n            {\r\n                id: 'service-price',\r\n                path: 'price',\r\n                label: 'Цена',\r\n                type: 'input-text',\r\n                validityCheck: DefaultChecks.price\r\n            },\r\n            {\r\n                id: 'service-availability-group',\r\n                path: 'serviceAvailabilityGroupId',\r\n                label: 'Доступность',\r\n                type: 'select',\r\n                options: [\r\n                    new Option('Доступна', '1'),\r\n                    new Option('Недоступна', '2'),\r\n                    new Option('Включена', '3')\r\n                ]\r\n            }\r\n        ],\r\n        buttons: [\r\n            {\r\n                text: 'Сохранить',\r\n                action: onUpdateCatalogItem\r\n            }\r\n        ]\r\n    };\r\n    const serviceModal = new ModalForm(modalOptions);\r\n\r\n\r\n    const dataTableConfig = {\r\n        tableId: ID_TABLE_CATALOG,\r\n        advanced: {\r\n            buttons: [\r\n                {\r\n                    extend: 'selectedSingle',\r\n                    text: 'Редактировать',\r\n                    action: function (e, dt, button, config) {\r\n                        let tableRow = dt.row({ selected: true }).node();\r\n                        let model = getModel(tableRow);\r\n                        serviceModal.show(model);\r\n                    }\r\n                }\r\n            ]\r\n        }\r\n    };\r\n    const table = new CustomDataTable(dataTableConfig);\r\n\r\n\r\n    function getModel(tableRow) {\r\n        return {\r\n            id: +tableRow.dataset.examinationId,\r\n            name: tableRow.querySelector(SELECTOR_EXAMINATION_NAME).innerText,\r\n            code: tableRow.querySelector(SELECTOR_SERVICE_CODE).innerText,\r\n            fullName: tableRow.querySelector(SELECTOR_SERVICE_FULL_NAME).innerText,\r\n            price: tableRow.querySelector(SELECTOR_SERVICE_PRICE).innerText,\r\n            serviceAvailabilityGroupId: tableRow.querySelector(SELECTOR_SERVICE_GROUP).dataset.groupId\r\n        };\r\n    }\r\n\r\n    function renderCatalogChanges(updated) {\r\n        const tableRow = document.querySelector(`tr[${ATTR_DATA_EXAMINATION_ID}=\"${updated.orderExaminationId}\"]`);\r\n\r\n        tableRow.querySelector(SELECTOR_SERVICE_CODE).innerText = updated.code;\r\n        tableRow.querySelector(SELECTOR_SERVICE_FULL_NAME).innerText = updated.fullName;\r\n        tableRow.querySelector(SELECTOR_SERVICE_PRICE).innerText = Util.toCurrencyString(updated.price);\r\n        tableRow.querySelector(SELECTOR_CATALOG_UPDATE_TIME).innerText = new Date(updated.updateTime).toLocaleString();\r\n\r\n        const groupCell = tableRow.querySelector(SELECTOR_SERVICE_GROUP);\r\n        groupCell.innerText = updated.serviceAvailabilityGroupName;\r\n        groupCell.dataset.groupId = updated.serviceAvailabilityGroupId;\r\n    }\r\n\r\n    async function onUpdateCatalogItem(model) {\r\n        const requestData = {\r\n            orderExaminationId: model.id,\r\n            fullName: model.fullName,\r\n            code: model.code,\r\n            price: Util.customParseFloat(model.price),\r\n            serviceAvailabilityGroupId: +model.serviceAvailabilityGroupId\r\n        }\r\n\r\n        const service = await Util.postData(URI_API_CATALOG_UPDATE, requestData);\r\n        if (service) {\r\n            renderCatalogChanges(service);\r\n            serviceModal.hide();\r\n            successToast.show();\r\n        }\r\n        else {\r\n            serviceModal.enableButtons();\r\n        }\r\n    }\r\n}\r\n\r\nexport default initCatalogList;","﻿import Util from './util/common';\r\nimport ModalForm from './util/modal/modal-form';\r\nimport CustomDataTable from './util/custom-datatable';\r\nimport SuccessToast from './util/success-toast';\r\n\r\n\r\nfunction initClinicList() {\r\n    const ID_DATATABLE_CLINIC_LIST = 'ClinicsList';\r\n\r\n    const URI_API_DATATABLE_CLINIC_LIST = '/api/clinic/list';\r\n    const URI_API_CLINIC_MANAGE = '/api/clinic/manageClinic';\r\n\r\n    const successToast = new SuccessToast();\r\n\r\n    const currentUserId = document.getElementById(ID_DATATABLE_CLINIC_LIST).dataset.clinic;\r\n\r\n    // -----\r\n    // Modal\r\n    // -----\r\n    const modalOptions = {\r\n        title: 'Информация о медицинской организации',\r\n        readonly: true,\r\n        data: [\r\n            {\r\n                id: 'full-name',\r\n                path: 'clinicDetails.fullName',\r\n                type: 'input-text',\r\n                label: 'Полное наименование'\r\n            },\r\n            {\r\n                id: 'short-name',\r\n                path: 'clinicDetails.shortName',\r\n                type: 'input-text',\r\n                label: 'Сокращенное наименование'\r\n            },\r\n            {\r\n                id: 'address',\r\n                path: 'clinicDetails.address',\r\n                type: 'input-text',\r\n                label: 'Адрес'\r\n            },\r\n            {\r\n                id: 'phone',\r\n                path: 'clinicDetails.phone',\r\n                type: 'input-text',\r\n                label: 'Телефон'\r\n            },\r\n            {\r\n                id: 'email',\r\n                path: 'clinicDetails.email',\r\n                type: 'input-text',\r\n                label: 'Электронная почта'\r\n            },\r\n            {\r\n                id: 'block-status',\r\n                path: 'isBlocked',\r\n                type: 'input-text',\r\n                label: 'Статус',\r\n                render: (value) => value === true ? 'Заблокирована' : 'Активна'\r\n            },\r\n        ],\r\n        buttons: [\r\n            {\r\n                text: 'Заблокировать',\r\n                className: 'btn btn-danger',\r\n                action: async (model) => await onManageClinic(model, true),\r\n                visibility: (model) => !model.isBlocked && model.id != currentUserId\r\n            },\r\n            {\r\n                text: 'Разблокировать',\r\n                className: 'btn btn-success',\r\n                action: async (model) => await onManageClinic(model, false),\r\n                visibility: (model) => model.isBlocked && model.id != currentUserId\r\n            }\r\n        ]\r\n    };\r\n    const modal = new ModalForm(modalOptions);\r\n\r\n\r\n    // ---------\r\n    // Datatable\r\n    // ---------\r\n    const tableOptions = {\r\n        tableId: ID_DATATABLE_CLINIC_LIST,\r\n        ajaxUrl: URI_API_DATATABLE_CLINIC_LIST,\r\n        serverSide: true,\r\n        scroll: true,\r\n        advanced: {\r\n            buttons: [\r\n                {\r\n                    extend: 'selectedSingle',\r\n                    text: 'Просмотр',\r\n                    action: (e, dt, button, config) => {\r\n                        let model = dt.row({ selected: true }).data();\r\n                        modal.show(model);\r\n                    }\r\n                }\r\n            ],\r\n            columns: [\r\n                {\r\n                    data: 'id',\r\n                    name: 'Id',\r\n                    searchable: false\r\n                },\r\n                {\r\n                    data: 'clinicDetails.shortName',\r\n                    name: 'ClinicDetails.ShortName',\r\n                    render: (data, type, row) => Util.escapeHTML(data)\r\n                },\r\n                {\r\n                    data: 'clinicDetails.phone',\r\n                    name: 'ClinicDetails.Phone',\r\n                    render: (data, type, row) => Util.escapeHTML(data),\r\n                    orderable: false\r\n                },\r\n                {\r\n                    data: 'clinicDetails.email',\r\n                    name: 'ClinicDetails.Email',\r\n                    render: (data, type, row) => Util.escapeHTML(data),\r\n                    orderable: false\r\n                },\r\n                {\r\n                    data: 'isBlocked',\r\n                    name: 'IsBlocked',\r\n                    render: (data, type, row) => data ? \"Заблокирована\" : \"Активна\",\r\n                    searchable: false,\r\n                    orderable: false\r\n                }\r\n            ]\r\n        }\r\n\r\n    };\r\n    const table = new CustomDataTable(tableOptions);\r\n\r\n    async function onManageClinic(model, needBlock) {\r\n        const data = {\r\n            id: model.id,\r\n            needBlock\r\n        };\r\n        const result = await Util.postData(URI_API_CLINIC_MANAGE, data);\r\n\r\n        if (result) {\r\n            modal.hide();\r\n            table.ajaxReload();\r\n            successToast.show();\r\n        }\r\n        else {\r\n            modal.enableButtons();\r\n        }\r\n    }\r\n}\r\n\r\nexport default initClinicList;","﻿import Util from './util/common';\r\nimport { addValidation, resetValidation, validate, DefaultChecks } from './util/custom-validation';\r\nimport SuccessToast from './util/success-toast';\r\n\r\n\r\nfunction initClinicSettings() {\r\n    const URI_API_CLINIC_UPDATE_DETAILS = '/api/clinic/updateDetails';\r\n\r\n    const successToast = new SuccessToast();\r\n\r\n    const fullNameInput = document.getElementById('ClinicFullName');\r\n    const shortNameInput = document.getElementById('ClinicShortName');\r\n    const addressInput = document.getElementById('ClinicAddress');\r\n    const phoneInput = document.getElementById('ClinicPhone');\r\n    const emailInput = document.getElementById('ClinicEmail');\r\n\r\n    addInputsValidation();\r\n\r\n    const saveButton = document.getElementById('SaveClinicDetails');\r\n    saveButton.addEventListener('click', onSaveClinicDetails);\r\n\r\n    function addInputsValidation() {\r\n        addValidation(fullNameInput, DefaultChecks.requiredText500);\r\n        addValidation(shortNameInput, DefaultChecks.requiredText500);\r\n        addValidation(addressInput, DefaultChecks.requiredText500);\r\n        addValidation(phoneInput, DefaultChecks.phone);\r\n        addValidation(emailInput, DefaultChecks.email);\r\n    }\r\n\r\n    async function onSaveClinicDetails(e) {\r\n        e.preventDefault();\r\n        saveButton.disabled = true;\r\n\r\n        const inputs = document.querySelectorAll('input');\r\n        validate(inputs);\r\n        const form = document.ClinicDetails;\r\n        if (!form.checkValidity()) {\r\n            saveButton.disabled = false;\r\n            return;\r\n        }\r\n\r\n        const formData = new FormData(form);\r\n        const data = Object.fromEntries(formData);\r\n        const result = await Util.postData(URI_API_CLINIC_UPDATE_DETAILS, data);\r\n        if (result) {\r\n            resetValidation(inputs);\r\n            successToast.show();\r\n        }\r\n        saveButton.disabled = false;\r\n    }\r\n}\r\n\r\nexport default initClinicSettings;","﻿// Vendor\r\nimport 'jquery';\r\nimport 'bootstrap';\r\nimport 'jquery-mask-plugin';\r\nimport 'select2';\r\nimport 'datatables.net-bs4';\r\nimport 'datatables.net-buttons-bs4';\r\nimport 'datatables.net-fixedheader-bs4';\r\nimport 'datatables.net-rowgroup-bs4';\r\nimport 'datatables.net-scroller-bs4';\r\nimport 'datatables.net-select-bs4';\r\n\r\n// Internal\r\nimport ScriptManager from './util/script-manager';\r\nimport initCalculationCompany from './calculation-company';\r\nimport initCalculationEdit from './calculation-edit';\r\nimport initCalculationSingle from './calculation-single';\r\nimport initCatalogList from './catalog-list';\r\nimport initClinicList from './clinic-list';\r\nimport initClinicSettings from './clinic-settings';\r\nimport OrderExaminationsPage from './order-examinations';\r\nimport OrderItemsPage from './order-items';\r\nimport initRegisterCreateRequest from './register-create-request';\r\nimport RegisterRequestsListPage from './register-requests';\r\nimport initUserList from './user-list';\r\nimport initUserLogin from './user-login';\r\n\r\n// Styles\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'select2/dist/css/select2.min.css';\r\nimport '@ttskch/select2-bootstrap4-theme/dist/select2-bootstrap4.min.css';\r\nimport 'datatables.net-bs4/css/dataTables.bootstrap4.min.css';\r\nimport 'datatables.net-fixedheader-bs4/css/fixedHeader.bootstrap4.min.css';\r\nimport 'datatables.net-buttons-bs4/css/buttons.bootstrap4.min.css';\r\nimport 'datatables.net-rowgroup-bs4/css/rowGroup.bootstrap4.min.css';\r\nimport 'datatables.net-scroller-bs4/css/scroller.bootstrap4.min.css';\r\nimport 'datatables.net-select-bs4/css/select.bootstrap4.min.css';\r\nimport '../../css/src/site.css';\r\n\r\n\r\nconst namespace = {\r\n    'calculation-company': initCalculationCompany,\r\n    'calculation-edit': initCalculationEdit,\r\n    'calculation-single': initCalculationSingle,\r\n    'catalog-list': initCatalogList,\r\n    'clinic-list': initClinicList,\r\n    'clinic-settings': initClinicSettings,\r\n    'order-examinations': OrderExaminationsPage.init,\r\n    'order-items': OrderItemsPage.init,\r\n    'register-create-request': initRegisterCreateRequest,\r\n    'register-requests': () => new RegisterRequestsListPage(),\r\n    'user-list': () => initUserList(),\r\n    'user-login': () => initUserLogin()\r\n};\r\n\r\nconst scriptManager = new ScriptManager(namespace);\r\ndocument.addEventListener('DOMContentLoaded', event => scriptManager.load());","﻿import Util from './util/common';\r\nimport { DefaultChecks } from './util/custom-validation';\r\nimport ModalDataTable from './util/modal/modal-datatable';\r\nimport ModalForm from './util/modal/modal-form';\r\n\r\n\r\nconst URI_API_ORDER_INDEXES = '/api/order/getIndexes';\r\nconst URI_API_INDEX_CREATE = '/api/order/examination/{0}/index'; // POST\r\nconst URI_API_INDEX_DELETE = '/api/order/index'; // DELETE with /{id}\r\nconst URI_API_INDEX_UPDATE = '/api/order/index'; // POST with /{id}\r\n\r\n\r\nclass OrderExaminationIndexes {\r\n    constructor(successToast) {\r\n        this._indexModal = new ModalForm(this._getIndexConfig());\r\n        this.mainModal = new ModalDataTable(this._getMainConfig());\r\n        this.successToast = successToast;\r\n        this._fixMultipleModalsOverlay();\r\n    }\r\n\r\n\r\n    // Public\r\n\r\n    show(examinationdId, examinationName) {\r\n        const model = {\r\n            sourceURL: `${URI_API_ORDER_INDEXES}/${examinationdId}`,\r\n            examination: examinationName\r\n        };\r\n        this.mainModal.show(model);\r\n        this.examinationdId = examinationdId;\r\n    }\r\n\r\n\r\n    // Private\r\n\r\n    _fixMultipleModalsOverlay() {\r\n        // Решение позаимствовано. Источник: https://stackoverflow.com/a/24914782/13467303\r\n\r\n        $(document).on('show.bs.modal', '.modal', function () {\r\n            const zIndex = 1040 + (10 * $('.modal:visible').length);\r\n            $(this).css('z-index', zIndex);\r\n            setTimeout(function () {\r\n                $('.modal-backdrop').not('.modal-stack').css('z-index', zIndex - 1).addClass('modal-stack');\r\n            }, 0);\r\n        });\r\n    }\r\n\r\n    _getMainConfig() {\r\n        const config = {\r\n            title: (model) => `Показатели обследования: ${model.examination}`,\r\n            columns: [\r\n                {\r\n                    title: 'Название'\r\n                },\r\n                {\r\n                    title: 'Единицы измерения'\r\n                },\r\n            ],\r\n            dataTableOptions: {\r\n                advanced: {\r\n                    columns: [\r\n                        {\r\n                            data: 'title',\r\n                            render: (data, type, row) => Util.escapeHTML(data)\r\n                        },\r\n                        {\r\n                            data: 'unitOfMeasure',\r\n                            render: (data, type, row) => Util.escapeHTML(data)\r\n                        }\r\n                    ],\r\n                    buttons: [\r\n                        {\r\n                            text: 'Добавить',\r\n                            action: (e, dt, button, config) => this._indexModal.show()\r\n                        },\r\n                        {\r\n                            text: 'Редактировать',\r\n                            action: (e, dt, button, config) => {\r\n                                let model = dt.row({ selected: true }).data();\r\n                                model.editing = true;\r\n                                this._indexModal.show(model);\r\n                            },\r\n                            extend: 'selectedSingle'\r\n                        },\r\n                        {\r\n                            text: 'Удалить',\r\n                            action: (e, dt, button, config) => {\r\n                                let model = dt.row({ selected: true }).data();\r\n                                this._removeIndex(model.id);\r\n                            },\r\n                            extend: 'selectedSingle'\r\n                        }\r\n                    ]\r\n                }\r\n            }\r\n        };\r\n\r\n        return config;\r\n    }\r\n\r\n    _getIndexConfig() {\r\n        const config = {\r\n            title: model => model.editing ? 'Редактирование показателя' : 'Добавление показателя',\r\n            data: [\r\n                {\r\n                    id: 'title',\r\n                    path: 'title',\r\n                    label: 'Название',\r\n                    type: 'input-text',\r\n                    validityCheck: DefaultChecks.requiredText70\r\n                },\r\n                {\r\n                    id: 'unitOfMeasure',\r\n                    path: 'unitOfMeasure',\r\n                    label: 'Единицы измерения',\r\n                    type: 'input-text',\r\n                    validityCheck: DefaultChecks.requiredText70\r\n                }\r\n            ],\r\n            buttons: [\r\n                {\r\n                    text: 'Сохранить',\r\n                    action: this._onIndexSave.bind(this)\r\n                }\r\n            ]\r\n        };\r\n        return config;\r\n    }\r\n\r\n    async _removeIndex(id) {\r\n        const response = await Util.deleteResource(`${URI_API_INDEX_DELETE}/${id}`);\r\n        if (response) {\r\n            this.mainModal.seedTable();\r\n        }\r\n    }\r\n\r\n    async _onIndexSave(model) {\r\n        const url = model.editing ? `${URI_API_INDEX_UPDATE}/${model.id}` : getIndexCreateURL(this.examinationdId);\r\n        const response = await Util.postData(url, model);\r\n\r\n        if (response) {\r\n            this.successToast.show();\r\n            this.mainModal.seedTable();\r\n            this._indexModal.hide();\r\n        }\r\n        else {\r\n            this._indexModal.enableButtons();\r\n        }\r\n\r\n        function getIndexCreateURL(examinationId) {\r\n            return URI_API_INDEX_CREATE.replace('{0}', examinationId);\r\n        }\r\n    }\r\n}\r\n\r\nexport default OrderExaminationIndexes;","﻿import Util from './util/common';\r\nimport ModalForm from './util/modal/modal-form';\r\nimport CustomDataTable from './util/custom-datatable';\r\nimport SuccessToast from './util/success-toast';\r\nimport { DefaultChecks } from './util/custom-validation';\r\nimport OrderExaminationIndexes from './order-examination-indexes';\r\n\r\n\r\nconst URI_API_ORDER_EXAMINATIONS_DATA = '/api/order/getExaminations';\r\nconst URI_API_ORDER_EXAMINATION_CREATE = '/api/order/addExamination';\r\nconst URI_API_ORDER_EXAMINATION_UPDATE = '/api/order/updateExamination';\r\n\r\nclass OrderExaminationsPage {\r\n    constructor() {\r\n        this.succesToast = new SuccessToast();\r\n    }\r\n\r\n\r\n    // Static\r\n\r\n    static init() {\r\n        return (async () => {\r\n            const _this = new OrderExaminationsPage();\r\n\r\n            await _this._getExaminationsData();\r\n\r\n            _this._createDataTable();\r\n            _this._createExaminationModal();\r\n            _this._createExaminationIndexesModal();\r\n        })();\r\n    }\r\n\r\n\r\n    // Private\r\n\r\n    async _getExaminationsData() {\r\n        this._examinationsData = await Util.getData(URI_API_ORDER_EXAMINATIONS_DATA);\r\n    }\r\n\r\n    _createDataTable() {\r\n        const config = {\r\n            tableId: 'Examinations',\r\n            advanced: {\r\n                data: this._getTableData(),\r\n                ordering: false,\r\n                columns: [\r\n                    {\r\n                        data: 'name',\r\n                        render: (data, type, row) => Util.escapeHTML(data)\r\n                    },\r\n                    {\r\n                        data: 'targetGroup.name',\r\n                        render: (data, type, row) => Util.escapeHTML(data)\r\n                    },\r\n                    {\r\n                        data: 'defaultServiceDetails.fullName',\r\n                        render: (data, type, row) => Util.escapeHTML(data)\r\n                    }\r\n                ],\r\n                buttons: [\r\n                    {\r\n                        text: 'Добавить обследование',\r\n                        action: (e, dt, button, config) => {\r\n                            this._examinationModal.show(null);\r\n                        }\r\n                    },\r\n                    {\r\n                        extend: 'selectedSingle',\r\n                        text: 'Редактировать',\r\n                        action: (e, dt, button, config) => {\r\n                            let model = dt.row({ selected: true }).data();\r\n                            model.editing = true;\r\n                            this._examinationModal.show(model);\r\n                        }\r\n                    },\r\n                    {\r\n                        extend: 'selectedSingle',\r\n                        text: 'Показатели результата',\r\n                        action: (e, dt, button, config) => {\r\n                            let model = dt.row({ selected: true }).data();\r\n                            this._examinationIndexes.show(model.id, model.name);\r\n                        }\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n\r\n        this.examinationsTable = new CustomDataTable(config).getTable();\r\n    }\r\n\r\n    _createExaminationModal() {\r\n        const config = {\r\n            title: (model) => model.editing ? `Редактирование обследования: ${model.name}` : \"Создание нового обследования\",\r\n            data: [\r\n                {\r\n                    id: 'target-group',\r\n                    path: 'targetGroup.id',\r\n                    label: 'Целевая группа',\r\n                    type: 'select',\r\n                    options: this._examinationsData.targetGroups.map(group => new Option(group.name, group.id))\r\n                },\r\n                {\r\n                    id: 'name',\r\n                    path: 'name',\r\n                    label: 'Название по приказу',\r\n                    type: 'textarea',\r\n                    validityCheck: DefaultChecks.requiredText500\r\n                },\r\n                {\r\n                    id: 'service-code',\r\n                    path: 'defaultServiceDetails.code',\r\n                    label: 'Код услуги по умолчанию',\r\n                    type: 'input-text',\r\n                    validityCheck: DefaultChecks.requiredText20\r\n                },\r\n                {\r\n                    id: 'service-full-name',\r\n                    path: 'defaultServiceDetails.fullName',\r\n                    label: 'Полное наименование услуги по умолчанию',\r\n                    type: 'textarea',\r\n                    validityCheck: DefaultChecks.requiredText500\r\n                },\r\n                {\r\n                    id: 'is-mandatory',\r\n                    path: 'isMandatory',\r\n                    label: 'Обязательное при любом осмотре',\r\n                    type: 'input-checkbox'\r\n                }\r\n            ],\r\n            buttons: [\r\n                {\r\n                    text: 'Сохранить',\r\n                    action: this._onSaveExamination.bind(this)\r\n                }\r\n            ]\r\n        }\r\n\r\n        this._examinationModal = new ModalForm(config);\r\n    }\r\n\r\n    _createExaminationIndexesModal() {\r\n        this._examinationIndexes = new OrderExaminationIndexes(this.succesToast);\r\n    }\r\n\r\n    _getTableData() {\r\n        return this._examinationsData.orderExaminations\r\n            .map(examination => this._convertToTableData(examination));\r\n    }\r\n\r\n    _convertToTableData(examination) {\r\n        return {\r\n            id: examination.id,\r\n            name: examination.name,\r\n            targetGroup: {\r\n                id: examination.targetGroupId,\r\n                name: this._examinationsData.targetGroups\r\n                    .find(group => group.id == examination.targetGroupId)\r\n                    .name\r\n            },\r\n            defaultServiceDetails: examination.defaultServiceDetails,\r\n            isMandatory: examination.isMandatory\r\n        };\r\n    }\r\n\r\n    async _onSaveExamination(model) {\r\n        const data = {\r\n            name: model.name,\r\n            defaultServiceCode: model.defaultServiceDetails.code,\r\n            defaultServiceFullName: model.defaultServiceDetails.fullName,\r\n            targetGroupId: +model.targetGroup.id,\r\n            isMandatory: model.isMandatory\r\n        };\r\n\r\n        let response;\r\n\r\n        if (model.editing) {\r\n            response = await updateExamination.call(this);\r\n        } else {\r\n            response = await createExamination.call(this);\r\n        }\r\n\r\n        if (response) {\r\n            this._examinationModal.hide();\r\n            this.succesToast.show();\r\n        }\r\n        else {\r\n            this._examinationModal.enableButtons();\r\n        }\r\n\r\n        async function updateExamination() {\r\n            const updatedExamination = await Util.postData(\r\n                URI_API_ORDER_EXAMINATION_UPDATE,\r\n                Object.assign(data, { id: model.id })\r\n            );\r\n\r\n            if (updatedExamination) {\r\n                this.examinationsTable\r\n                    .row((index, data, node) => data.id === updatedExamination.id)\r\n                    .data(this._convertToTableData(updatedExamination))\r\n                    .draw();\r\n                return updatedExamination;\r\n            }\r\n        }\r\n\r\n        async function createExamination() {\r\n            const newExamination = await Util.postData(URI_API_ORDER_EXAMINATION_CREATE, data);\r\n\r\n            if (newExamination) {\r\n                this.examinationsTable\r\n                    .row\r\n                    .add(this._convertToTableData(newExamination))\r\n                    .draw();\r\n                return newExamination;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default OrderExaminationsPage;","﻿import Util from './util/common';\r\nimport ModalForm from './util/modal/modal-form';\r\nimport CustomDataTable from './util/custom-datatable';\r\nimport SuccessToast from './util/success-toast';\r\nimport { DefaultChecks } from './util/custom-validation';\r\n\r\n\r\nconst URI_API_ORDER_ITEMS = '/api/order/getOrder?nocache=true';\r\nconst URI_API_ORDER_ITEM_CREATE = '/api/order/addItem';\r\nconst URI_API_ORDER_ITEM_UPDATE = '/api/order/updateItem';\r\nconst URI_API_ORDER_ITEM_REMOVE = '/api/order/deleteItem';\r\nconst URI_API_ORDER_EXAMINATIONS = '/api/order/getExaminationsMin';\r\n\r\nconst ID_SELECT_EXAMINATIONS = 'examinations';\r\nconst ID_KEY = 'key';\r\n\r\nconst SELECTOR_EXAMINATIONS = `select[data-custom-modal-id=\"${ID_SELECT_EXAMINATIONS}\"`;\r\nconst SELECTOR_KEY = `input[data-custom-modal-id=\"${ID_KEY}\"`;\r\n\r\n\r\nclass OrderItemsPage {\r\n    constructor() {\r\n        this.succesToast = new SuccessToast();\r\n    }\r\n\r\n\r\n    // Static\r\n\r\n    static init() {\r\n        return (async () => {\r\n            let _this = new OrderItemsPage();\r\n\r\n            await _this._getOrderData();\r\n            _this._createDataTable();\r\n            _this._createModal();\r\n\r\n            return _this;\r\n        })();\r\n    }\r\n\r\n\r\n    // Private\r\n\r\n    async _getOrderData() {\r\n        this._orderItems = await Util.getData(URI_API_ORDER_ITEMS);\r\n\r\n        let orderExaminations = await Util.getData(URI_API_ORDER_EXAMINATIONS);\r\n        this._orderExaminationsMap = new Map(orderExaminations.map(i => [i.id, i.name]));\r\n    }\r\n\r\n    _createDataTable() {\r\n        const config = {\r\n            tableId: 'OrderItems',\r\n            advanced: {\r\n                data: this._getDataTableData(),\r\n                ordering: false,\r\n                columns: [\r\n                    {\r\n                        data: 'key',\r\n                        render: (data, type, row) => Util.escapeHTML(data)\r\n                    },\r\n                    {\r\n                        data: 'name',\r\n                        render: (data, type, row) => Util.escapeHTML(data)\r\n                    },\r\n                    {\r\n                        data: 'examinations',\r\n                        render: (data, type, row) => data.map(ex => Util.escapeHTML(ex.name)).join('<br>')\r\n                    }\r\n                ],\r\n                buttons: [\r\n                    {\r\n                        text: 'Добавить пункт',\r\n                        action: (e, dt, button, config) => {\r\n                            this._showModal(null);\r\n                        }\r\n                    },\r\n                    {\r\n                        extend: 'selectedSingle',\r\n                        text: 'Редактировать',\r\n                        action: (e, dt, button, config) => {\r\n                            let model = dt.row({ selected: true }).data();\r\n                            model.editing = true;\r\n                            this._showModal(model);\r\n                        }\r\n                    },\r\n                    {\r\n                        extend: 'selectedSingle',\r\n                        text: 'Удалить',\r\n                        action: async (e, dt, button, config) => {\r\n                            let data = dt.row({ selected: true }).data();\r\n                            await this._removeItem(data);\r\n                        }\r\n                    }\r\n                ]\r\n            }\r\n        };\r\n\r\n        this.orderTable = new CustomDataTable(config).getTable();\r\n    }\r\n\r\n    _createModal() {\r\n        let config = {\r\n            title: (model) => model.editing ? `Редактирование пункта ${model.key}` : 'Создание нового пункта',\r\n            data: [\r\n                {\r\n                    id: 'key',\r\n                    path: 'key',\r\n                    label: 'Пункт',\r\n                    type: 'input-text',\r\n                    validityCheck: DefaultChecks.requiredText70\r\n                },\r\n                {\r\n                    id: 'name',\r\n                    path: 'name',\r\n                    label: 'Название',\r\n                    type: 'textarea',\r\n                    validityCheck: DefaultChecks.requiredText500\r\n                },\r\n                {\r\n                    id: ID_SELECT_EXAMINATIONS,\r\n                    path: 'examinations',\r\n                    label: 'Обследования',\r\n                    type: 'select',\r\n                    options: [] // будет инициализирован через select2\r\n                }\r\n            ],\r\n            buttons: [\r\n                {\r\n                    text: 'Сохранить',\r\n                    action: this._onSave.bind(this)\r\n                }\r\n            ]\r\n        };\r\n\r\n        this.orderItemModal = new ModalForm(config);\r\n        this._initSelect2();\r\n    }\r\n\r\n    _getDataTableData() {\r\n        return this._orderItems.map(item => this._convertToTableData(item));\r\n    }\r\n\r\n    _convertToTableData(orderItemResource) {\r\n        return {\r\n            id: orderItemResource.id,\r\n            key: orderItemResource.key,\r\n            name: orderItemResource.name,\r\n            examinations: orderItemResource.orderExaminations.map(id => {\r\n                return {\r\n                    id: id,\r\n                    name: this._orderExaminationsMap.get(id)\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    _initSelect2() {\r\n        const select2Data = Array.from(this._orderExaminationsMap.entries())\r\n            .map(i => {\r\n                return {\r\n                    id: i[0],\r\n                    text: i[1]\r\n                }\r\n            });\r\n\r\n        $(SELECTOR_EXAMINATIONS).select2({\r\n            data: select2Data,\r\n            multiple: true,\r\n            placeholder: 'Найти по названию',\r\n            theme: 'bootstrap4'\r\n        });\r\n    }\r\n\r\n    async _onSave(model) {\r\n        const examinations = $(SELECTOR_EXAMINATIONS).select2('data').map(i => parseInt(i.id));\r\n        let response;\r\n\r\n        if (model.editing === true) {\r\n            response = await updateOrderItem.call(this);\r\n        } else {\r\n            response = await createOrderItem.call(this);\r\n        }\r\n\r\n        if (response) {\r\n            this.orderItemModal.hide();\r\n            this.succesToast.show();\r\n        }\r\n        else {\r\n            this.orderItemModal.enableButtons();\r\n        }\r\n\r\n        async function updateOrderItem() {\r\n            const updatedItem = await Util.postData(URI_API_ORDER_ITEM_UPDATE, {\r\n                id: model.id,\r\n                name: model.name,\r\n                examinations\r\n            });\r\n\r\n            if (updatedItem) {\r\n                this.orderTable\r\n                    .row((index, data, node) => data.id === updatedItem.id)\r\n                    .data(this._convertToTableData(updatedItem))\r\n                    .draw();\r\n                return updatedItem;\r\n            }\r\n        }\r\n\r\n        async function createOrderItem() {\r\n            const newItem = await Util.postData(URI_API_ORDER_ITEM_CREATE, {\r\n                key: model.key,\r\n                name: model.name,\r\n                examinations\r\n            });\r\n\r\n            if (newItem) {\r\n                this.orderTable\r\n                    .row\r\n                    .add(this._convertToTableData(newItem))\r\n                    .draw();\r\n                return newItem;\r\n            }\r\n        }\r\n    }\r\n\r\n    async _removeItem(itemData) {\r\n        if (confirm(`Вы действительно хотите удалить пункт \"${itemData.key}\"?`)) {\r\n            const response = await Util.postData(URI_API_ORDER_ITEM_REMOVE, itemData.id);\r\n            if (response.succeed) {\r\n                this.orderTable\r\n                    .row((index, data, node) => data.id === itemData.id)\r\n                    .remove()\r\n                    .draw();\r\n                this.succesToast.show();\r\n            }\r\n        }\r\n    }\r\n\r\n    _showModal(model) {\r\n        const elementsToDisableOnEditItem = [\r\n            document.querySelector(SELECTOR_KEY)\r\n        ];\r\n\r\n        if (!model) {\r\n            processModalElementsOnCreateItem();\r\n        } else {\r\n            processModalElementsOnEditItem();\r\n        }\r\n\r\n        this.orderItemModal.show(model);\r\n        setSelectedExaminations();\r\n\r\n\r\n        function setSelectedExaminations() {\r\n            $(SELECTOR_EXAMINATIONS).val(model?.examinations.map(ex => ex.id)).trigger('change');\r\n        }\r\n\r\n        function processModalElementsOnEditItem() {\r\n            elementsToDisableOnEditItem.forEach(element => element.disabled = true);\r\n        }\r\n\r\n        function processModalElementsOnCreateItem() {\r\n            elementsToDisableOnEditItem.forEach(element => element.disabled = false);\r\n        }\r\n    }\r\n}\r\n\r\nexport default OrderItemsPage;","﻿import Util from './util/common';\r\nimport { addValidation, validate, DefaultChecks } from './util/custom-validation';\r\n\r\n\r\nfunction initRegisterCreateRequest() {\r\n    const URI_API_REGISTER_REQUEST_CREATE = '/api/clinic/addRegisterRequest';\r\n\r\n    const candidateFullNameInput = document.getElementById('CandidateFullName');\r\n    const candidateShortNameInput = document.getElementById('CandidateShortName');\r\n    const candidateAddressInput = document.getElementById('CandidateAddress');\r\n    const candidatePhoneInput = document.getElementById('CandidatePhone');\r\n    const candidateEmailInput = document.getElementById('CandidateEmail');\r\n    const candidateModeratorNameInput = document.getElementById('CandidateModeratorName');\r\n    const candidateModeratorPositionInput = document.getElementById('CandidateModeratorPosition');\r\n    const candidateModeratorUsernameInput = document.getElementById('CandidateModeratorUsername');\r\n    const candidateModeratorPasswordInput = document.getElementById('CandidateModeratorPassword');\r\n\r\n    const validatedRegisterRequestInputs = document.querySelectorAll('input');\r\n\r\n    const submitRegisterRequestBtn = document.getElementById('SubmitRegisterRequest');\r\n    submitRegisterRequestBtn.addEventListener('click', onSubmitRegisterRequest);\r\n\r\n    addFormValidation();\r\n\r\n    async function onSubmitRegisterRequest(e) {\r\n        e.preventDefault();\r\n        submitRegisterRequestBtn.disabled = true;\r\n\r\n        validate(validatedRegisterRequestInputs);\r\n        if (!document.RegisterRequest.checkValidity()) {\r\n            submitRegisterRequestBtn.disabled = false;\r\n            return;\r\n        }\r\n\r\n        let data = {\r\n            fullName: candidateFullNameInput.value,\r\n            shortName: candidateShortNameInput.value,\r\n            address: candidateAddressInput.value,\r\n            phone: candidatePhoneInput.value,\r\n            email: candidateEmailInput.value,\r\n            user: {\r\n                name: candidateModeratorNameInput.value,\r\n                position: candidateModeratorPositionInput.value,\r\n                username: candidateModeratorUsernameInput.value,\r\n                password: candidateModeratorPasswordInput.value\r\n            }\r\n        };\r\n\r\n        let result = await Util.postData(URI_API_REGISTER_REQUEST_CREATE, data);\r\n\r\n        if (result) {\r\n            showSuccessMessage();\r\n        }\r\n\r\n        submitRegisterRequestBtn.disabled = false;\r\n    }\r\n\r\n    function addFormValidation() {\r\n        addValidation(candidateFullNameInput, DefaultChecks.requiredText500);\r\n        addValidation(candidateShortNameInput, DefaultChecks.requiredText500);\r\n        addValidation(candidateAddressInput, DefaultChecks.requiredText500);\r\n        addValidation(candidatePhoneInput, DefaultChecks.phone);\r\n        addValidation(candidateEmailInput, DefaultChecks.email);\r\n        addValidation(candidateModeratorNameInput, DefaultChecks.requiredText70);\r\n        addValidation(candidateModeratorPositionInput, DefaultChecks.requiredText70);\r\n        addValidation(candidateModeratorUsernameInput, DefaultChecks.username);\r\n        addValidation(candidateModeratorPasswordInput, DefaultChecks.password);\r\n    }\r\n\r\n    function showSuccessMessage() {\r\n        document.RegisterRequest.classList.add('d-none');\r\n        document.querySelector('.alert-success').classList.remove('d-none');\r\n    }\r\n}\r\n\r\n\r\nexport default initRegisterCreateRequest;","﻿import Util from './util/common';\r\nimport ModalForm from './util/modal/modal-form';\r\nimport CustomDataTable from './util/custom-datatable';\r\nimport SuccessToast from './util/success-toast';\r\n\r\n\r\nconst URI_API_REGISTER_REQUESTS_NEW = '/api/clinic/newRequests';\r\nconst URI_API_REGISTER_REQUESTS_PROCESSED = '/api/clinic/processedRequests';\r\nconst URI_API_REGISTER_REQUEST_MANAGE = '/api/clinic/manageRequest';\r\n\r\n\r\nclass RegisterRequestsListPage {\r\n    constructor() {\r\n        this.successToast = new SuccessToast();\r\n        this._createDataTables();\r\n        this._createRegisterRequestsModal();\r\n    }\r\n\r\n    // Private \r\n\r\n    _createDataTables() {\r\n        const columnsBase = [\r\n            {\r\n                data: 'creationTime',\r\n                name: 'CreationTime',\r\n                render: (data, type, row) => new Date(data).toLocaleString(),\r\n                searchable: false\r\n            },\r\n            {\r\n                data: 'shortName',\r\n                name: 'ShortName',\r\n                render: (data, type, row) => Util.escapeHTML(data)\r\n            },\r\n            {\r\n                data: 'sender.name',\r\n                name: 'Sender.Name',\r\n                render: (data, type, row) => Util.escapeHTML(data)\r\n            }\r\n        ];\r\n\r\n        const approvedStatusColumn = {\r\n            data: 'approved',\r\n            name: 'Approved',\r\n            render: (data, type, row) => data ? 'Одобрена' : 'Отклонена',\r\n            searchable: false\r\n        };\r\n\r\n        const tableButtons = [\r\n            {\r\n                extend: 'selectedSingle',\r\n                text: 'Просмотр',\r\n                action: (e, dt, button, config) => {\r\n                    let model = dt.row({ selected: true }).data();\r\n                    this.registerRequestModal.show(model);\r\n                }\r\n            }\r\n        ];\r\n\r\n        const newRequestsTableConfig = {\r\n            tableId: 'NewRegisterRequests',\r\n            ajaxUrl: URI_API_REGISTER_REQUESTS_NEW,\r\n            serverSide: true,\r\n            advanced: {\r\n                columns: columnsBase,\r\n                buttons: tableButtons\r\n            }\r\n        }\r\n\r\n        this.newRequestsDataTable = new CustomDataTable(newRequestsTableConfig).getTable();\r\n\r\n        const processedRequestsTableColumns = columnsBase.slice();\r\n        processedRequestsTableColumns.push(approvedStatusColumn);\r\n\r\n        const processedRequestTableConfig = {\r\n            tableId: 'ProcessedRegisterRequests',\r\n            ajaxUrl: URI_API_REGISTER_REQUESTS_PROCESSED,\r\n            serverSide: true,\r\n            advanced: {\r\n                columns: processedRequestsTableColumns,\r\n                buttons: tableButtons\r\n            }\r\n        }\r\n\r\n        this.processedRequestsDataTable = new CustomDataTable(processedRequestTableConfig).getTable();\r\n    }\r\n\r\n    _createRegisterRequestsModal() {\r\n        const config = {\r\n            title: 'Информация о заявке',\r\n            readonly: true,\r\n            data: [\r\n                {\r\n                    id: 'date',\r\n                    path: 'creationTime',\r\n                    label: 'Дата',\r\n                    type: 'input-text',\r\n                    render: (value) => new Date(value).toLocaleString()\r\n                },\r\n                {\r\n                    id: 'full-name',\r\n                    path: 'fullName',\r\n                    label: 'Полное наименование',\r\n                    type: 'input-text'\r\n                },\r\n                {\r\n                    id: 'short-name',\r\n                    path: 'shortName',\r\n                    label: 'Сокращенное наименование',\r\n                    type: 'input-text'\r\n                },\r\n                {\r\n                    id: 'address',\r\n                    path: 'address',\r\n                    label: 'Адрес',\r\n                    type: 'input-text'\r\n                },\r\n                {\r\n                    id: 'phone',\r\n                    path: 'phone',\r\n                    label: 'Телефон',\r\n                    type: 'input-text'\r\n                },\r\n                {\r\n                    id: 'email',\r\n                    path: 'email',\r\n                    label: 'Электронная почта',\r\n                    type: 'input-text'\r\n                },\r\n                {\r\n                    id: 'contact-person',\r\n                    path: 'sender.name',\r\n                    label: 'Контактное лицо',\r\n                    type: 'input-text',\r\n                    render: (data) => `${data.name}, ${data.position}`\r\n                },\r\n                {\r\n                    id: 'username',\r\n                    path: 'sender.userName',\r\n                    label: 'Username',\r\n                    type: 'input-text'\r\n                }\r\n            ],\r\n            buttons: [\r\n                {\r\n                    text: 'Одобрить',\r\n                    action: model => this._manageRegisterRequest(model, true),\r\n                    className: 'btn btn-success',\r\n                    visibility: model => !model.approved\r\n                },\r\n                {\r\n                    text: 'Отклонить',\r\n                    action: model => this._manageRegisterRequest(model, false),\r\n                    className: 'btn btn-danger',\r\n                    visibility: model => !model.processed\r\n                }\r\n            ]\r\n        }\r\n\r\n        this.registerRequestModal = new ModalForm(config);\r\n    }\r\n\r\n    async _manageRegisterRequest(model, approved) {\r\n        const data = {\r\n            id: model.id,\r\n            approved\r\n        };\r\n\r\n        const result = await Util.postData(URI_API_REGISTER_REQUEST_MANAGE, data);\r\n        if (result) {\r\n            this.registerRequestModal.hide();\r\n            this.successToast.show();\r\n            this.newRequestsDataTable.ajax.reload();\r\n            this.processedRequestsDataTable.ajax.reload();\r\n        }\r\n    }\r\n}\r\n\r\nexport default RegisterRequestsListPage;","﻿import Util from './util/common';\r\nimport ModalForm from './util/modal/modal-form';\r\nimport CustomDataTable from './util/custom-datatable';\r\nimport SuccessToast from './util/success-toast';\r\nimport { ValidityCheck, DefaultChecks } from './util/custom-validation';\r\n\r\n\r\nfunction initUserList() {\r\n    const URI_API_USERS_LIST = '/api/user/list';\r\n    const URI_API_USER_CREATE = '/api/user/create';\r\n    const URI_API_USER_UPDATE_BASE = '/api/user/update';\r\n\r\n    const isGlobal = document.getElementById('UsersList').dataset.global == 'True';\r\n    const successToast = new SuccessToast();\r\n\r\n\r\n    // Data объекты для Modal\r\n\r\n    const usernameData = {\r\n        id: 'username',\r\n        path: 'username',\r\n        type: 'input-text',\r\n        label: 'Имя пользователя',\r\n        validityCheck: DefaultChecks.username\r\n    };\r\n\r\n    const passwordData = {\r\n        id: 'password',\r\n        path: 'password',\r\n        type: 'input-password',\r\n        label: 'Пароль',\r\n        validityCheck: DefaultChecks.password\r\n    };\r\n\r\n    const confirmPasswordData = getConfirmPasswordData('#custom-modal-1 input[data-custom-modal-id=\"password\"]');\r\n    const confirmPasswordData2 = getConfirmPasswordData('#custom-modal-3  input[data-custom-modal-id=\"password\"]');\r\n\r\n    const nameData = {\r\n        id: 'name',\r\n        path: 'name',\r\n        type: 'input-text',\r\n        label: 'ФИО',\r\n        validityCheck: DefaultChecks.requiredText70\r\n    };\r\n    const positionData = {\r\n        id: 'position',\r\n        path: 'position',\r\n        type: 'input-text',\r\n        label: 'Должность',\r\n        validityCheck: DefaultChecks.requiredText70\r\n    };\r\n\r\n\r\n    //\r\n    // Создание пользователя\r\n    //\r\n    const createUserModalConfig = {\r\n        title: 'Создание нового пользователя',\r\n        data: [\r\n            usernameData,\r\n            passwordData,\r\n            confirmPasswordData,\r\n            nameData,\r\n            positionData,\r\n            getRoleData()\r\n        ],\r\n        buttons: [\r\n            {\r\n                text: 'Сохранить',\r\n                action: onUserCreate\r\n            }\r\n        ]\r\n    }\r\n    const createUserModal = new ModalForm(createUserModalConfig);\r\n\r\n\r\n    //\r\n    // Редактирование профиля\r\n    //\r\n    const editProfileModalConfig = {\r\n        title: (model) => `Редактирование профиля пользователя ${model.username}`,\r\n        data: [\r\n            nameData,\r\n            positionData,\r\n            getRoleData()\r\n        ],\r\n        buttons: [\r\n            {\r\n                text: 'Сохранить',\r\n                action: onUserProfileSave\r\n            }\r\n        ]\r\n    }\r\n    const editProfileModal = new ModalForm(editProfileModalConfig);\r\n\r\n\r\n    //\r\n    // Изменение пароля\r\n    //\r\n    const changePasswordModalConfig = {\r\n        title: (model) => `Задать новый пароль для пользователя ${model.username}`,\r\n        data: [\r\n            passwordData,\r\n            confirmPasswordData2\r\n        ],\r\n        buttons: [\r\n            {\r\n                text: 'Сохранить',\r\n                action: onPasswordChange\r\n            }\r\n        ]\r\n    }\r\n    const changePasswordModal = new ModalForm(changePasswordModalConfig);\r\n\r\n\r\n    //\r\n    // Таблица\r\n    //\r\n    const dataTableConfig = {\r\n        tableId: 'UsersList',\r\n        ajaxUrl: URI_API_USERS_LIST,\r\n        serverSide: true,\r\n        scroll: true,\r\n        advanced: {\r\n            columns: [\r\n                {\r\n                    data: 'id',\r\n                    name: 'Id',\r\n                    searchable: false,\r\n                    orderable: true\r\n                },\r\n                {\r\n                    data: 'name',\r\n                    name: 'Name',\r\n                    render: (data, type, row) => Util.escapeHTML(data),\r\n                    searchable: true,\r\n                    orderable: true\r\n                },\r\n                {\r\n                    data: 'role.name',\r\n                    name: 'Role.Name',\r\n                    render: (data, type, row) => Util.escapeHTML(data),\r\n                    searchable: true,\r\n                    orderable: true\r\n                }\r\n            ],\r\n            buttons: [\r\n                {\r\n                    text: 'Создать',\r\n                    action: function (e, dt, button, config) {\r\n                        createUserModal.show(null);\r\n                    }\r\n                },\r\n                {\r\n                    extend: 'selectedSingle',\r\n                    text: 'Изменить профиль',\r\n                    action: function (e, dt, button, config) {\r\n                        let model = dt.row({ selected: true }).data();\r\n                        editProfileModal.show(model);\r\n                    }\r\n                },\r\n                {\r\n                    extend: 'selectedSingle',\r\n                    text: 'Изменить пароль',\r\n                    action: function (e, dt, button, config) {\r\n                        let model = dt.row({ selected: true }).data();\r\n                        changePasswordModal.show(model);\r\n                    }\r\n                }\r\n            ]\r\n        }\r\n    };\r\n    const clinicCol = {\r\n        data: 'clinicShortName',\r\n        name: 'ClinicShortName',\r\n        render: (data, type, row) => Util.escapeHTML(data),\r\n        searchable: true,\r\n        orderable: true\r\n    };\r\n\r\n    if (isGlobal)\r\n        dataTableConfig.advanced.columns.push(clinicCol);\r\n\r\n    const table = new CustomDataTable(dataTableConfig);\r\n\r\n\r\n    // Обработчики кнопок модальных окон\r\n\r\n    async function onUserCreate(model) {\r\n        const data = {\r\n            name: model.name,\r\n            position: model.position,\r\n            username: model.username,\r\n            password: model.password,\r\n            roleId: +model.role.id\r\n        };\r\n\r\n        const result = await Util.postData(URI_API_USER_CREATE, data);\r\n        processResult(createUserModal, result);\r\n    }\r\n\r\n    async function onUserProfileSave(model) {\r\n        const data = {\r\n            name: model.name,\r\n            position: model.position,\r\n            roleId: +model.role.id\r\n        };\r\n        const result = await Util.postData(`${URI_API_USER_UPDATE_BASE}/${model.id}`, data);\r\n        processResult(editProfileModal, result);\r\n    }\r\n\r\n    async function onPasswordChange(model) {\r\n        const data = {\r\n            password: model.password\r\n        }\r\n        const result = await Util.postData(`${URI_API_USER_UPDATE_BASE}/${model.id}`, data);\r\n        processResult(changePasswordModal, result);\r\n    }\r\n\r\n\r\n    // Helpers\r\n\r\n    function getConfirmPasswordData(inputToConfirmSelector) {\r\n        return {\r\n            id: 'password-confirmation',\r\n            path: null,\r\n            type: 'input-password',\r\n            label: 'Повторите пароль',\r\n            validityCheck: getConfirmPasswordValidityCheck(inputToConfirmSelector)\r\n        }\r\n\r\n        function getConfirmPasswordValidityCheck(inputToConfirmSelector) {\r\n            return new ValidityCheck(\r\n                'Пароли не совпадают',\r\n                (input) => input.value !== document.querySelector(inputToConfirmSelector).value);\r\n        }\r\n    }\r\n\r\n    function getRoleOptions() {\r\n        let options = [\r\n            new Option('Сотрудник', '3'),\r\n            new Option('Модератор клиники', '2'),\r\n            new Option('Заблокированный', '4')\r\n        ];\r\n        if (isGlobal)\r\n            options.push(new Option('Администратор сайта', '1'));\r\n        return options;\r\n    }\r\n\r\n    function getRoleData() {\r\n        return {\r\n            id: 'roleId',\r\n            path: 'role.id',\r\n            type: 'select',\r\n            label: 'Тип аккаунта',\r\n            options: getRoleOptions()\r\n        };\r\n    }\r\n\r\n    function processResult(modal, result) {\r\n        if (result) {\r\n            modal.hide();\r\n            successToast.show();\r\n            table.ajaxReload();\r\n        }\r\n        else {\r\n            modal.enableButtons();\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default initUserList;","﻿import Util from './util/common';\r\n\r\n\r\nfunction initUserLogin() {\r\n    const URI_API_USER_LOGIN = '/api/user/login';\r\n    const CLASSNAME_DISPLAY_NONE = 'd-none';\r\n\r\n    const form = document.login;\r\n    const loginErrorMessage = document.querySelector('.alert-danger');\r\n    const loginButton = document.getElementById('LoginButton');\r\n    loginButton.addEventListener('click', onLogin);\r\n\r\n    async function onLogin(e) {\r\n        e.preventDefault();\r\n        loginButton.disabled = true;\r\n        loginErrorMessage.classList.add(CLASSNAME_DISPLAY_NONE);\r\n\r\n        const formData = new FormData(form);\r\n        const data = Object.fromEntries(formData);\r\n\r\n        const result = await Util.postData(URI_API_USER_LOGIN, data);\r\n        if (result) {\r\n            if (result.succeed === true) {\r\n                location.replace('/');\r\n            }\r\n            else {\r\n                showErrorMessage();\r\n            }\r\n        }\r\n        loginButton.disabled = false;\r\n    }\r\n\r\n    function showErrorMessage() {\r\n        loginErrorMessage.classList.remove(CLASSNAME_DISPLAY_NONE);       \r\n    }\r\n}\r\n\r\n\r\nexport default initUserLogin;","﻿const Util = {\r\n    customParseFloat: function (str) {\r\n        return parseFloat(str.replace(',', '.').replace(/\\s/g, ''));\r\n    },\r\n\r\n    toCurrencyString: function (number) {\r\n        return number.toLocaleString(undefined,\r\n            {\r\n                'minimumFractionDigits': 2,\r\n                'maximumFractionDigits': 2,\r\n                'useGrouping': false\r\n            });\r\n    },\r\n\r\n    escapeHTML: function (str) {\r\n        if (typeof (str) !== 'string')\r\n            return null;\r\n        return str\r\n            .replace(/&/g, \"&amp;\")\r\n            .replace(/</g, \"&lt;\")\r\n            .replace(/>/g, \"&gt;\")\r\n            .replace(/\"/g, \"&quot;\")\r\n            .replace(/'/g, \"&#039;\");\r\n    },\r\n\r\n    isEmpty: function (obj) {\r\n        for (let i in obj)\r\n            return false;\r\n        return true;\r\n    },\r\n\r\n    toElement: function (html) {\r\n        let div = document.createElement('div');\r\n        div.innerHTML = html;\r\n        return div.firstElementChild;\r\n    },\r\n\r\n    deleteResource: async function (url) {\r\n        return await fetchDecorator(url, {\r\n            method: 'DELETE',\r\n            credentials: 'same-origin'\r\n        });\r\n    },\r\n\r\n    getData: async function (url) {\r\n        return await fetchDecorator(url, {\r\n            credentials: 'same-origin'\r\n        });\r\n    },\r\n\r\n    postData: async function (url, dataObject) {\r\n        return await fetchDecorator(url, {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json;charset=utf-8' },\r\n            credentials: 'same-origin',\r\n            body: JSON.stringify(dataObject)\r\n        });\r\n    },\r\n\r\n    removeAllChildren: function (node) {\r\n        while (node.firstChild) {\r\n            node.removeChild(node.lastChild);\r\n        }\r\n    }\r\n};\r\n\r\nasync function fetchDecorator(url, config) {\r\n    const response = await fetch(url, config);\r\n    if (response.ok) {\r\n        return await response.json();\r\n    }\r\n    await processBadRequestResult(response);\r\n    return undefined;\r\n}\r\n\r\nasync function processBadRequestResult(response) {\r\n    if (response.status === 400) {\r\n        let errorResponse = await response.json();\r\n        if (errorResponse.success === false) {\r\n            let message = 'Во время обработки запроса возникла ошибка. Обратитесь к администратору.\\n';\r\n            for (let error of errorResponse.errors) {\r\n                message += error + '\\n'\r\n            }\r\n            alert(message);\r\n        }\r\n    }\r\n    else {\r\n        alert('Во время обработки запроса произошла ошибка. Код ошибки: ' + response.status);\r\n    }\r\n}\r\n\r\nexport default Util;","﻿const DOM_FLAG_BUTTON = 'B';\r\nconst DOM_FLAG_PAGINATION = 'p';\r\n\r\nconst PLACEHOLDER_DOM_BUTTON = '{BUTTON}';\r\nconst PLACEHOLDER_PAGINATION = '{PAGINATION}';\r\n\r\nconst localisation = {\r\n    \"decimal\": \"\",\r\n    \"emptyTable\": \"Нет данных для отображения\",\r\n    \"info\": \"Всего элементов: _TOTAL_\",\r\n    \"infoEmpty\": \"\",\r\n    \"infoFiltered\": \"(отфильтровано из _MAX_ элементов)\",\r\n    \"infoPostFix\": \"\",\r\n    \"thousands\": \",\",\r\n    \"lengthMenu\": \"_MENU_ элементов на страницу\",\r\n    \"loadingRecords\": \"Загрузка...\",\r\n    \"processing\": \"Загрузка...\",\r\n    \"search\": \"Поиск:\",\r\n    \"zeroRecords\": \"Ничего не найдено\",\r\n    \"paginate\": {\r\n        \"first\": \"Начало\",\r\n        \"last\": \"Конец\",\r\n        \"next\": \"Вперед\",\r\n        \"previous\": \"Назад\"\r\n    },\r\n    \"aria\": {\r\n        \"sortAscending\": \": сортировка по возрастанию\",\r\n        \"sortDescending\": \": сортировка по убыванию\"\r\n    },\r\n    select: {\r\n        rows: {\r\n            _: ''\r\n        }\r\n    }\r\n};\r\n\r\nconst DefaultDt = {\r\n    config: {\r\n        select: {\r\n            style: 'single'\r\n        },\r\n        language: localisation,\r\n        order: [[0, 'asc']],\r\n        orderMulti: false,\r\n        processing: true\r\n    },\r\n    scrollerConfig: {\r\n        scrollY: 450,\r\n        scrollCollapse: true,\r\n        deferRender: true,\r\n        scroller: true\r\n    },\r\n    serverSideAjax: {\r\n        type: 'POST',\r\n        contentType: 'application/json; charset=utf-8',\r\n        data: (d) => JSON.stringify(d)\r\n    },\r\n    dom: `<'row'<'col-sm-12 col-md-6'${PLACEHOLDER_DOM_BUTTON}><'col-sm-12 col-md-6'f>>\r\n\t\t<'row'<'col-sm-12'tr>>\r\n\t\t<'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'${PLACEHOLDER_PAGINATION}>>`\r\n}\r\n\r\n// Options:\r\n// --- tableId, // (обязательно) id целевой таблицы\r\n// --- ajaxUrl, // URL для запроса данных в формате dataTables\r\n// --- serverSide : Boolean // Если true, то таблица будет загружаться генерируемыми на сервере фрагментами (требуется настройка на сервере - см. DataTables)\r\n// --- scroll : Boolean // если true, применяются настройки скролла из конфига по умолчанию\r\n// --- advanced : {} // Обычный конфиг dataTables, который будет наложен поверх настроенного, если необходима детальная настройка\r\n// ------ (например, можно переопределить order или задать columns, buttons)\r\n// ------ columns, // (обязательно для ajax) см. dataTables\r\n// --------- (коротко)\r\n// --------- data : string // путь к свойству с данными\r\n// --------- name : string // имя свойства с данными, которое будет отправлено с запросом при serverSide обработке\r\n// --------- render : function(data, type, row) : string // функция обработки данных для отображения\r\n// --------- searchable : Boolean // Если true, данные из колонки будет возможно найти поиском\r\n// --------- orderable : Boolean // Если true, возможна сортировка\r\n// ------ buttons // см. dataTables, коротко:\r\n// --------- text : string // Текст кнопки\r\n// --------- action: function(e, dt, button, config) // действие при клике\r\n// --------- extend: 'selectedSingle' // кнопка активна только, если выделена одна строка в таблице\r\n\r\nclass CustomDataTable {\r\n    constructor(options) {\r\n        this._options = options;\r\n        this._applyOptions();\r\n        this._table = $('#' + this._options.tableId).DataTable(this._config);\r\n    };\r\n\r\n    getTable() {\r\n        return this._table;\r\n    };\r\n\r\n    ajaxReload() {\r\n        if (!this._config.ajax) {\r\n            console.log('CustomDataTable: Невозможно перезагрузить данные для этой таблицы посредствам ajax');\r\n            return;\r\n        }\r\n        this._table.ajax.reload();\r\n    }\r\n\r\n    _applyOptions() {\r\n        this._config = $.extend(true, {}, DefaultDt.config);\r\n\r\n        if (this._options.ajaxUrl) {\r\n            this._config.ajax = {\r\n                url: this._options.ajaxUrl\r\n            }\r\n        }\r\n\r\n        if (this._options.scroll) {\r\n            this._config = { ...this._config, ...DefaultDt.scrollerConfig };\r\n        }\r\n\r\n        if (this._options.serverSide) {\r\n            if (this._config.ajax) {\r\n                this._config.serverSide = true;\r\n                Object.assign(this._config.ajax, DefaultDt.serverSideAjax);\r\n            } else {\r\n                console.log('CustomDataTable: Для обработки таблиц на сервере, задайте ajaxUrl');\r\n            }\r\n        }\r\n\r\n        if (this._options.advanced) {\r\n            Object.assign(this._config, this._options.advanced);\r\n        }\r\n\r\n        this._applyDomConfig();\r\n    };\r\n\r\n    _applyDomConfig() {\r\n        let buttonDomFlag = '';\r\n        let paginationDomFlag = '';\r\n\r\n        if (this._config.buttons) {\r\n            buttonDomFlag = DOM_FLAG_BUTTON;\r\n        }\r\n        if (!this._scroller) {\r\n            paginationDomFlag = DOM_FLAG_PAGINATION;\r\n        }\r\n\r\n        this._config.dom = DefaultDt.dom.replace(PLACEHOLDER_DOM_BUTTON, buttonDomFlag)\r\n                                      .replace(PLACEHOLDER_PAGINATION, paginationDomFlag);\r\n    }\r\n}\r\n\r\nexport default CustomDataTable;","﻿function CustomValidation(input, validityCheck) {\r\n    this.invalidityMessage;\r\n    this.inputNode = input;\r\n    this.validityCheck = validityCheck;\r\n\r\n    this.registerListener();\r\n}\r\n\r\nfunction ValidityCheck(invalidityMessage, isInvalid) {\r\n    this.invalidityMessage = invalidityMessage;\r\n    this.isInvalid = isInvalid;\r\n}\r\n\r\nCustomValidation.prototype = {\r\n    checkValidity: function (input) {\r\n        let isInvalid = this.validityCheck.isInvalid(input);\r\n        if (isInvalid) {\r\n            this.invalidityMessage = this.validityCheck.invalidityMessage;\r\n        }\r\n        else {\r\n            this.invalidityMessage = null;\r\n        }\r\n        this.rerenderValidity(input, isInvalid);\r\n    },\r\n    checkInput: function () {\r\n        this.inputNode.CustomValidation.invalidityMessage = null;\r\n        this.checkValidity(this.inputNode);\r\n\r\n        if (this.inputNode.CustomValidation.invalidityMessage == null) {\r\n            this.inputNode.setCustomValidity('');\r\n        }\r\n        else {\r\n            var message = this.inputNode.CustomValidation.invalidityMessage;\r\n            this.inputNode.setCustomValidity(message);\r\n        }\r\n    },\r\n    registerListener: function () {\r\n        var CustomValidation = this;\r\n        this.inputNode.addEventListener('keyup', function () {\r\n            CustomValidation.checkInput();\r\n        });\r\n    },\r\n    rerenderValidity: function (input, isInvalid) {\r\n        const VALID_CLASSNAME = 'is-valid';\r\n        const INVALID_CLASSNAME = 'is-invalid';\r\n        const MESSAGE_BLOCK_CLASSNAME = 'invalid-feedback';\r\n\r\n        let nextNode = input.nextSibling;\r\n        if (isInvalid) {\r\n            input.classList.add(INVALID_CLASSNAME);\r\n            input.classList.remove(VALID_CLASSNAME);\r\n            if (!nextNode || !nextNode.classList || !nextNode.classList.contains(MESSAGE_BLOCK_CLASSNAME)) {\r\n                let invalidityMessageBlock = document.createElement('div');\r\n                invalidityMessageBlock.classList.add(MESSAGE_BLOCK_CLASSNAME);\r\n                invalidityMessageBlock.innerText = this.invalidityMessage;\r\n                input.parentNode.insertBefore(invalidityMessageBlock, nextNode);\r\n            }\r\n        }\r\n        else {\r\n            input.classList.add(VALID_CLASSNAME);\r\n            input.classList.remove(INVALID_CLASSNAME);\r\n            if (nextNode && nextNode.classList && nextNode.classList.contains(MESSAGE_BLOCK_CLASSNAME))\r\n                nextNode.remove();\r\n        }\r\n    }\r\n};\r\n\r\nfunction validate(inputs) {\r\n    for (var i = 0; i < inputs.length; i++) {\r\n        if (inputs[i].CustomValidation)\r\n            inputs[i].CustomValidation.checkInput();\r\n    }\r\n}\r\n\r\nfunction addValidation(input, validityCheck) {\r\n    input.CustomValidation = new CustomValidation(input, validityCheck);\r\n}\r\n\r\nfunction resetValidation(inputs) {\r\n    for (let input of inputs) {\r\n        input.classList.remove('is-valid');\r\n        input.classList.remove('is-invalid');\r\n    }\r\n}\r\n\r\nconst DefaultChecks = {\r\n    phone: new ValidityCheck(\r\n        'Должен соответствовать шаблону: +7 123 4567890',\r\n        input => !input.value.match(/^\\+7 \\d{3} \\d{7}$/)),\r\n\r\n    email: new ValidityCheck(\r\n        'Должно быть похоже на xxx@yyyy.zz',\r\n        input => !input.value.match(/\\S+@\\S+\\.\\S+/) || input.value.length > 300),\r\n\r\n    username: new ValidityCheck(\r\n        'Может содержать только буквы латинского алфавита и цифры. От 3 до 20 символов',\r\n        input => !input.value.match(/^[0-9A-Za-z]{3,20}$/)),\r\n\r\n    password: new ValidityCheck(\r\n        'Может содержать только буквы латинского алфавита, цифры и спецсимволы. От 8 до 20 символов',\r\n        input => !input.value.match(/^[A-Za-z\\d!@#$%^&*_+-?]{8,20}$/)),\r\n\r\n    requiredText500: new ValidityCheck(\r\n        'Обязательное. До 500 символов',\r\n        input => !input.value.match(/^.{1,500}$/)),\r\n\r\n    requiredText70: new ValidityCheck(\r\n        'Обязательное. До 70 символов',\r\n        input => !input.value.match(/^.{1,70}$/)),\r\n\r\n    requiredText20: new ValidityCheck(\r\n        'Обязательное. До 20 символов',\r\n        input => !input.value.match(/^.{1,20}$/)),\r\n\r\n    positiveInteger: new ValidityCheck(\r\n        'Число должно быть целым и неотрицательным',\r\n        input => input.value === '' || !Number.isInteger(+input.value) || +input.value < 0),\r\n\r\n    price: new ValidityCheck(\r\n        'Значение должно быть неотрицательным, целым либо с двумя знаками после точки',\r\n        input => !input.value.match(/^\\d+([,\\.]\\d\\d)?$/))\r\n}\r\n\r\n\r\nexport { CustomValidation, ValidityCheck, validate, addValidation, resetValidation, DefaultChecks };","﻿import Util from '../common';\r\n\r\n\r\n// Options\r\n// --- title : string | function (model) : void (required) // Заголовок модального окна\r\n// --- buttons : [] // Кнопки модального окна\r\n// ------ text : string (required) // Текст\r\n// ------ action : async function (model) : void (required) // Действие, выполняемое при клике\r\n// ------ className : string // CSS классы\r\n// ------ visibility : function (model) : boolean // Условие видимости кнопки, в зависимости от состояния модели\r\n\r\n\r\nconst CLASSNAME_DISPLAY_NONE = 'd-none';\r\nconst CLASSNAME_MODAL_TITLE = 'modal-title';\r\nconst CLASSNAME_MODAL_BODY = 'modal-body';\r\nconst CLASSNAME_MODAL_FOOTER = 'modal-footer';\r\nconst CLASSNAME_BUTTON_DEFAULT = 'btn btn-primary';\r\n\r\nconst EVENT_MODAL_SHOW = 'show';\r\nconst EVENT_MODAL_HIDE = 'hide';\r\nconst EVENT_MODAL_HIDDEN = 'hidden.bs.modal';\r\n\r\nconst BASE_MODAL_ID = 'custom-modal-';\r\n\r\nconst TEMPLATE_MODAL = `<div class=\"modal fade\" data-backdrop=\"static\" tabindex=\"-1\" role=\"dialog\" aria-hidden=\"true\">\r\n<div class=\"modal-dialog  modal-dialog-centered modal-lg\" role=\"document\">\r\n<div class=\"modal-content\">\r\n<div class=\"modal-header\">\r\n<h5 class=\"${CLASSNAME_MODAL_TITLE}\"></h5>\r\n<button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n<span aria-hidden=\"true\">&times;</span>\r\n</button>\r\n</div>\r\n<div class=\"${CLASSNAME_MODAL_BODY}\">\r\n</div>\r\n<div class=\"${CLASSNAME_MODAL_FOOTER}\">\r\n</div>\r\n</div>\r\n</div>\r\n</div>`;\r\n\r\n\r\nclass CustomBootstrapModalBase {\r\n    constructor(options) {\r\n        this._modalElement = null;\r\n        this.model = null;\r\n        this.buttonsData = [];\r\n        this.options = options;\r\n\r\n        this._build();\r\n    };\r\n\r\n\r\n    // Public\r\n\r\n    enableButtons() {\r\n        for (let buttonData of this.buttonsData) {\r\n            buttonData.element.disabled = false;\r\n            if (buttonData.visibility === true || Util.isEmpty(this.model) || buttonData.visibility(this.model))\r\n                buttonData.element.classList.remove(CLASSNAME_DISPLAY_NONE);\r\n            else\r\n                buttonData.element.classList.add(CLASSNAME_DISPLAY_NONE);\r\n        }\r\n    };\r\n\r\n    getId() {\r\n        if (!this._id) {\r\n            let counter = 0;\r\n            let id = null;\r\n            let existing = null;\r\n            do {\r\n                id = BASE_MODAL_ID + ++counter;\r\n                existing = document.getElementById(id);\r\n            } while (existing);\r\n            this._id = id;\r\n        }\r\n        return this._id;\r\n    };\r\n\r\n    hide() {\r\n        $(`#${this.getId()}`).modal(EVENT_MODAL_HIDE);\r\n    };\r\n\r\n    show() {\r\n        this.show(null);\r\n    }\r\n\r\n    show(model) {\r\n        this._prepareToShow(model);\r\n        $(`#${this.getId()}`).modal(EVENT_MODAL_SHOW);\r\n    };\r\n\r\n\r\n    // \"Protected\"\r\n\r\n    _getContentValidationResult() {\r\n        return true;\r\n    }\r\n\r\n    _getModalBodyContent() {\r\n        // \"Abstract\"\r\n    }\r\n\r\n    _onModalHidden() {\r\n\r\n    }\r\n\r\n    _prepareToShow(model) {\r\n        this.model = $.extend(true, {}, model);\r\n        this._setTitle();\r\n        this.enableButtons();\r\n    }\r\n\r\n\r\n    // Private\r\n\r\n    _build() {\r\n        this._createModalElement();\r\n        this._createModalBody();\r\n        this._createButtons();\r\n        this._addModalHiddenEventListener();\r\n    };\r\n\r\n    _addModalHiddenEventListener() {\r\n        $(`#${this.getId()}`).on(EVENT_MODAL_HIDDEN, this._onModalHidden.bind(this));\r\n    };\r\n\r\n    _createModalElement() {\r\n        this._modalElement = Util.toElement(TEMPLATE_MODAL);\r\n        this._modalElement.id = this.getId();\r\n        document.body.appendChild(this._modalElement);\r\n    };\r\n\r\n    _createModalBody() {\r\n        const bodyContent = this._getModalBodyContent();\r\n        if (!bodyContent)\r\n            throw new Error('Содержимое модального окна не определено');\r\n        this.modalBody = this._modalElement.querySelector('.' + CLASSNAME_MODAL_BODY);\r\n        this.modalBody.appendChild(bodyContent);\r\n    };\r\n\r\n    _createButtons() {\r\n        if (!this.options.buttons)\r\n            return;\r\n        let parent = this._modalElement.querySelector('.' + CLASSNAME_MODAL_FOOTER);\r\n\r\n        for (let buttonConfig of this.options.buttons) {\r\n            let button = this._getButton(buttonConfig);\r\n            parent.appendChild(button);\r\n\r\n            this.buttonsData.push({\r\n                element: button,\r\n                visibility: typeof buttonConfig.visibility == 'function' ? buttonConfig.visibility : true\r\n            });\r\n        }\r\n    };\r\n\r\n    _getButton(config) {\r\n        let button = document.createElement('button');\r\n        button.className = config.className ? config.className : CLASSNAME_BUTTON_DEFAULT;\r\n        button.innerText = config.text;\r\n        button.addEventListener('click', onBtnClick.bind(this));\r\n\r\n        return button;\r\n\r\n        async function onBtnClick(event) {\r\n            event.preventDefault();\r\n            event.target.disabled = true;\r\n            const canExecute = this._getContentValidationResult();\r\n            if (!canExecute) {\r\n                event.target.disabled = false;\r\n                return;\r\n            }\r\n            await config.action(this.model);\r\n        }\r\n    };\r\n\r\n    _updateModel(path, value) {\r\n        let props = path.split('.');\r\n        let obj = this.model;\r\n\r\n        for (let i = 0; i < props.length; i++) {\r\n            if (i === props.length - 1)\r\n                obj[props[i]] = value;\r\n            else {\r\n                if (!obj[props[i]])\r\n                    obj[props[i]] = {};\r\n                obj = obj[props[i]];\r\n            }\r\n        }\r\n    };\r\n\r\n    _getValue(path) {\r\n        if (path === null)\r\n            return null;\r\n\r\n        let obj = this.model;\r\n        let props = path.split('.');\r\n\r\n        for (let i = 0; i < props.length; i++) {\r\n            if (i === props.length - 1)\r\n                return obj[props[i]];\r\n            else\r\n                obj = obj[props[i]];\r\n        }\r\n    };\r\n\r\n    _setTitle() {\r\n        const title = this.options.title;\r\n        const titleElement = this._modalElement.querySelector('.' + CLASSNAME_MODAL_TITLE);\r\n        switch (typeof (title)) {\r\n            case 'string':\r\n                titleElement.innerText = title;\r\n                break;\r\n            case 'function':\r\n                titleElement.innerText = title(this.model);\r\n                break;\r\n        }\r\n    };\r\n}\r\n\r\nexport default CustomBootstrapModalBase;","﻿import Util from '../common';\r\nimport CustomDataTable from '../custom-datatable';\r\nimport CustomBootstrapModalBase from './custom-modal-base';\r\n\r\n\r\n// Options\r\n// --- title : string | function (model) : void (required) // Заголовок модального окна\r\n// --- columns : [] // Столбцы таблицы\r\n// ------ title : string // Название столбца\r\n// --- buttons : [] // Кнопки модального окна\r\n// ------ text : string (required) // Текст\r\n// ------ action : async function (model) : void (required) // Действие, выполняемое при клике\r\n// ------ className : string // CSS классы\r\n// ------ visibility : function (model) : boolean // Условие видимости кнопки, в зависимости от состояния модели\r\n// --- dataTableOptions : Object // Конфигурация DataTables\r\n\r\n\r\nconst CLASSNAME_TABLE = \"table table-bordered table-striped w-100\";\r\n\r\n\r\nclass ModalDataTable extends CustomBootstrapModalBase {\r\n    constructor(options) {\r\n        super(options);\r\n\r\n        this.options.dataTableOptions.tableId = this._getDataTableId();\r\n        this.dataTable = new CustomDataTable(this.options.dataTableOptions).getTable();\r\n    }\r\n\r\n\r\n    seedTable() { // конфигурация ajax dataTables не используется из-за сложностей замены url\r\n        Util.getData(this.model.sourceURL)\r\n            .then(newData => {\r\n                if (newData) {\r\n                    this.dataTable.clear();\r\n                    this.dataTable.rows.add(newData);\r\n                    this.dataTable.draw();\r\n                }\r\n            });\r\n    }\r\n\r\n\r\n    // Overrides\r\n\r\n    //_getContentValidationResult() {\r\n    //    return true;\r\n    //}\r\n\r\n    _getModalBodyContent() {\r\n        return this._createTable();\r\n    }\r\n\r\n    _onModalHidden() {\r\n        super._onModalHidden();\r\n\r\n        this.dataTable.clear();\r\n    }\r\n\r\n    _prepareToShow(model) {\r\n        super._prepareToShow(model);\r\n\r\n        this.seedTable();\r\n    }\r\n\r\n\r\n    // Private\r\n\r\n    _createTable() {\r\n        const tr = document.createElement('tr');\r\n\r\n        for (let column of this.options.columns) {\r\n            const th = document.createElement('th');\r\n            th.innerText = column.title;\r\n\r\n            tr.appendChild(th);\r\n        }\r\n\r\n        const thead = document.createElement('thead');\r\n        thead.appendChild(tr);\r\n\r\n        const table = document.createElement('table');\r\n        table.id = this._getDataTableId();\r\n        table.className = CLASSNAME_TABLE;\r\n        table.appendChild(thead);\r\n\r\n        return table;\r\n    }\r\n\r\n    _getDataTableId() {\r\n        if (this._dataTableId) {\r\n            return this._dataTableId;\r\n        }\r\n        this._dataTableId = this.getId() + '-table';\r\n        return this._dataTableId;\r\n    }\r\n}\r\n\r\nexport default ModalDataTable;","﻿import Util from '../common';\r\nimport CustomBootstrapModalBase from './custom-modal-base';\r\nimport { addValidation, validate, resetValidation } from '../custom-validation';\r\n\r\n\r\n// Options\r\n// --- title : string | function (model) : void (required) // Заголовок модального окна\r\n// --- data : [] (required) // Элементы данных модального окна\r\n// ------ id : string (required, unique) // Уникальный идентификатор\r\n// ------ path : string (required) // Путь к свойству объекта модели\r\n// ------ label : string (required) // Label (название) для соответствующего html-тега\r\n// ------ type : string ('input-text' | 'input-password' | 'textarea' | 'select') (required) // Тип элемента формы\r\n// ------ render : function (any) : string // Функция, преобразующая отображаемое значение текстового поля. Редактирование данных не будет отражаться в модели\r\n// ------ readonly : boolean // Если true, значение будет недоступно для редактирования\r\n// ------ validityCheck : ValidityCheck // Объект, описывающий условие валидности элемента формы\r\n// ------ options : [] of Option (for 'select' type only)\r\n// --- buttons : [] // Кнопки модального окна\r\n// ------ text : string (required) // Текст\r\n// ------ action : async function (model) : void (required) // Действие, выполняемое при клике\r\n// ------ className : string // CSS классы\r\n// ------ visibility : function (model) : boolean // Условие видимости кнопки, в зависимости от состояния модели\r\n// --- readonly : boolean // Если true, все элементы будут недоступны для редактирования\r\n\r\n\r\nconst CLASSNAME_CUSTOM_MODAL = 'js-custom-modal';\r\nconst CLASSNAME_FORM_CONTROL = 'form-control';\r\n\r\nconst ID_DATA_ATTR = 'data-custom-modal-id';\r\nconst ID_DATA_ATTR_DATASET = 'customModalId';\r\nconst RENDER_DATA_ATTR_DATASET = 'customModalRendered';\r\nconst RENDER_DATA_ATTR_VALUE = 'true';\r\n\r\nconst TEMPLATE_FORM_ROW = '<div class=\"form-group\"></div>';\r\n\r\n\r\nclass ModalForm extends CustomBootstrapModalBase {\r\n    constructor(options) {\r\n        super(options);\r\n    };\r\n\r\n\r\n    // Overrides\r\n\r\n    _getContentValidationResult() {\r\n        this._dataElements.forEach(element => element.dispatchEvent(new Event('change')));\r\n        validate(this._dataElements);\r\n        return this._form.checkValidity()\r\n    }\r\n\r\n    _getModalBodyContent() {\r\n        return this._createForm();\r\n    }\r\n\r\n    _onModalHidden() {\r\n        super._onModalHidden();\r\n\r\n        this._form.reset();\r\n        resetValidation(this._dataElements);\r\n        this.model = null;\r\n    }\r\n\r\n    _prepareToShow(model) {\r\n        super._prepareToShow(model);\r\n\r\n        if (model)\r\n            this._seedData();\r\n    }\r\n\r\n\r\n    // Private\r\n\r\n    _createForm() {\r\n        this._form = document.createElement('form');\r\n        for (let dataObj of this.options.data) {\r\n            let dataElement = this._createDataElement(dataObj);\r\n            this._form.appendChild(dataElement);\r\n        }\r\n\r\n        this._addFormEventListeners();\r\n\r\n        return this._form;\r\n    };\r\n\r\n    _addFormEventListeners() {\r\n        this._dataElements = this._form.querySelectorAll(`.${CLASSNAME_CUSTOM_MODAL}`);\r\n        for (let item of this._dataElements) {\r\n            item.addEventListener('keyup', onElementValueChanged.bind(this));\r\n            item.addEventListener('change', onElementValueChanged.bind(this));\r\n        }\r\n\r\n        function onElementValueChanged(event) {\r\n            let element = event.target;\r\n            let id = element.dataset[ID_DATA_ATTR_DATASET];\r\n            let path = this._getPathById(id);\r\n            if (path && element.dataset[RENDER_DATA_ATTR_DATASET] !== RENDER_DATA_ATTR_VALUE) {\r\n                if (element.type === 'checkbox') {\r\n                    this._updateModel(path, element.checked);\r\n                } else {\r\n                    this._updateModel(path, element.value);\r\n                }\r\n            }\r\n        };\r\n    };\r\n\r\n    _createDataElement(data) {\r\n        const isDisabled = data.readonly || this.options.readonly;\r\n        let control = null;\r\n        switch (data.type) {\r\n            case 'input-text':\r\n                control = _getInput('text');\r\n                break;\r\n            case 'input-password':\r\n                control = _getInput('password');\r\n                break;\r\n            case 'input-checkbox':\r\n                return _getCheckbox();\r\n            case 'textarea':\r\n                control = _getFormControl('textarea');\r\n                break;\r\n            case 'select':\r\n                return _getVisibleDataElement(_getSelect());\r\n        }\r\n\r\n        if (data.validityCheck && !data.readonly)\r\n            this._addValidation(data.validityCheck, control);\r\n\r\n        if (data.render) {\r\n            control.dataset[RENDER_DATA_ATTR_DATASET] = RENDER_DATA_ATTR_VALUE;\r\n        }\r\n\r\n        return _getVisibleDataElement(control);\r\n\r\n        function _getVisibleDataElement(dataElement) {\r\n            let container = _getDataContainer();\r\n            container.appendChild(dataElement);\r\n\r\n            let row = _getFormRow();\r\n            row.appendChild(container);\r\n            return row;\r\n        };\r\n\r\n        function _getInput(type) {\r\n            let input = _getFormControl('input');\r\n            input.type = type;\r\n            return input;\r\n        };\r\n\r\n        function _getSelect() {\r\n            let select = _getFormControl('select');\r\n            for (let option of data.options) {\r\n                select.options.add(option);\r\n            }\r\n            return select;\r\n        };\r\n\r\n        function _getFormControl(tagName) {\r\n            let control = document.createElement(tagName);\r\n            control.className = CLASSNAME_CUSTOM_MODAL + ' ' + CLASSNAME_FORM_CONTROL;\r\n            control.dataset[ID_DATA_ATTR_DATASET] = data.id;\r\n            control.disabled = isDisabled;\r\n            return control;\r\n        };\r\n\r\n        function _getDataContainer() {\r\n            let html = `<label style=\"display:block;\"><span style=\"display:block; margin-bottom: .5rem;\">${data.label}</span></label>`;\r\n            return Util.toElement(html);\r\n        };\r\n\r\n        function _getFormRow() {\r\n            return Util.toElement(TEMPLATE_FORM_ROW);\r\n        };\r\n\r\n        function _getCheckbox() {\r\n            const template = `<div class=\"form-group form-check\">    \r\n                                <label class=\"form-check-label\">${data.label}</label>\r\n                              </div>`;\r\n            const container = Util.toElement(template);\r\n\r\n            const checkbox = document.createElement('input');\r\n            checkbox.type = 'checkbox';\r\n            checkbox.classList.add(CLASSNAME_CUSTOM_MODAL, 'form-check-input');\r\n            checkbox.dataset[ID_DATA_ATTR_DATASET] = data.id;\r\n            checkbox.disabled = isDisabled;\r\n\r\n            container.insertBefore(checkbox, container.firstChild);\r\n            return container;\r\n        }\r\n    };\r\n\r\n    _addValidation(validityCheck, element) {\r\n        if (element.tagName !== 'select') {\r\n            addValidation(element, validityCheck);\r\n        }\r\n    };\r\n\r\n    _getPathById(id) {\r\n        for (let dataObj of this.options.data) {\r\n            if (dataObj.id === id)\r\n                return dataObj.path;\r\n        }\r\n        return null;\r\n    };\r\n\r\n    _seedData() {\r\n        for (let dataObj of this.options.data) {\r\n            let value = this._getValue(dataObj.path);\r\n            if (value === null || value === undefined)\r\n                continue;\r\n            let element = this._modalElement.querySelector(`[${ID_DATA_ATTR}=\"${dataObj.id}\"]`);\r\n            if (element.type === 'checkbox') {\r\n                element.checked = value ? true : false;\r\n            } else {\r\n                element.value = dataObj.render ? dataObj.render(value) : value;\r\n            }\r\n        }\r\n    };\r\n}\r\n\r\nexport default ModalForm;","﻿import Util from './common';\r\n\r\n/*\r\n *  Добавление опций в селекты пунктов приказа\r\n */\r\nasync function initOrderItemsSelect() {\r\n    const orderData = await Util.getData('/api/order/getOrder');\r\n    if (orderData) {\r\n        workWithSelect('#OrderItems', orderData);\r\n    }\r\n}\r\n\r\nfunction workWithSelect(selector, orderData) {\r\n    const _formatOption = option => {\r\n        const text = Util.escapeHTML(option.text);\r\n        const html = `<span style=\"display: block; overflow: hidden; white-space: nowrap;\" title=\"${text}\">${text}</span>`;\r\n        return $(html);\r\n    };\r\n    const _formatSelection = option => option.key;\r\n\r\n\r\n    $(selector).select2({\r\n        data: orderData.map(getSelect2Data),\r\n        multiple: true,\r\n        placeholder: 'Найти по номеру или названию пункта...',\r\n        theme: 'bootstrap4',\r\n        width: $(this).data('width') ? $(this).data('width') : $(this).hasClass('w-100') ? '100%' : 'style',\r\n        templateResult: _formatOption,\r\n        templateSelection: _formatSelection,\r\n        language: {\r\n            noResults: () => 'Совпадений не найдено'\r\n        }\r\n    });\r\n}\r\n\r\nfunction getSelect2Data(orderItem) {\r\n    return {\r\n        id: orderItem.id,\r\n        text: `${orderItem.key}. ${orderItem.name}`,\r\n        key: orderItem.key\r\n    }\r\n}\r\n\r\nexport { initOrderItemsSelect };","﻿// Запускает определенные функции на заданных страницах.\r\n\r\nclass ScriptManager {\r\n\r\n    constructor(namespace) {\r\n        this.namespace = namespace;\r\n    }\r\n\r\n    load() {\r\n        const pageId = this._getPageId();\r\n\r\n        this._fire('common');\r\n        this._fire(pageId);\r\n    }\r\n\r\n    _getPageId() {\r\n        return document.body.dataset.page;\r\n    }\r\n\r\n    _fire(funcName) {\r\n        if (funcName !== '' && this.namespace[funcName] && typeof this.namespace[funcName] == 'function') {\r\n            this.namespace[funcName]();\r\n        }\r\n    }\r\n}\r\n\r\nexport default ScriptManager;","﻿// Простой список. Предназначен для создания модели и представления данных, вводимых пользователем\r\n//\r\n// Options\r\n// --- itemTemplate : string // например: <div>Название: {0}, автор: {1})</div>. Значение в фигурных скобках должно соответствовать индексу объекта, описывающего данные, в массиве data\r\n// --- data : [] // массив объектов, описывающих свойства элемента списка. Значения объектов, индексы которых не представлены в шаблоне, не будут отображаться в документе, но сохранятся в модели\r\n// ------ source : function () // функция, возвращающая значение для добавляемого элемента, например () => anyInput.value;\r\n// ------ path : string // название свойства модели элемента списка\r\n// ------ render : function(source) : string // функция, обрабатывающая отображаемые значения (опционально)\r\n// --- target : string // селектор блока, в котором будет находиться список\r\n// --- reverse : boolean // если true, новые элементы добавляются в список над последним\r\n\r\nimport Util from './common';\r\n\r\nconst TEMPLATE_ITEM_CONTAINER = '<div class=\"row align-items-center mb-2 position-relative\"></div>';\r\nconst TEMPLATE_BUTTON_REMOVE_ITEM = '<button class=\"btn btn-danger btn-sm\" style=\"position: absolute; right: 0; top: 0; opacity: 0.8\">Удалить</button>';\r\n\r\nclass SimpleList {\r\n    constructor(options) {\r\n        this._options = options;\r\n        this._modelMap = new Map();\r\n        this._listElement = document.querySelector(this._options.target);\r\n        this._processButtonRemoveItem();\r\n    }\r\n\r\n\r\n    // Public\r\n\r\n    // Добавляет новый элемент в список. Сохраняет его модель и рендерит, в соответствии с заданным шаблоном\r\n    add() {\r\n        let itemTemplate = this._options.itemTemplate;\r\n        let model = {};\r\n\r\n        this._options.data.forEach((item, index, array) => {\r\n            // сохраняем свойство модели\r\n            let value = item.source();\r\n            model[item.path] = value;\r\n\r\n            // если требуется, вставляем его в шаблон\r\n            let placeholder = '{' + index + '}';\r\n            if (itemTemplate.includes(placeholder)) {\r\n                if (item.render)\r\n                    value = item.render(value);\r\n                itemTemplate = itemTemplate.replace(placeholder, value);\r\n            }\r\n        });\r\n\r\n        let itemElement = this._renderNewItem(itemTemplate);\r\n        this._addEventListeners(itemElement);\r\n        this._modelMap.set(itemElement, model);\r\n    }\r\n\r\n    // Возвращает модель данных списка\r\n    getData() {\r\n        return Array.from(this._modelMap.values());\r\n    }\r\n\r\n    // Удаляет элемент списка\r\n    remove(itemElement) {\r\n        this._modelMap.delete(itemElement);\r\n        itemElement.remove();\r\n    }\r\n\r\n\r\n    // Private\r\n\r\n    _addEventListeners(itemElement) {\r\n        itemElement.addEventListener('mouseenter', (e) => e.target.appendChild(this._buttonRemoveItem));\r\n        itemElement.addEventListener('mouseleave', (e) => e.target.removeChild(this._buttonRemoveItem));\r\n    }\r\n\r\n    _processButtonRemoveItem() {\r\n        this._buttonRemoveItem = Util.toElement(TEMPLATE_BUTTON_REMOVE_ITEM);\r\n\r\n        this._buttonRemoveItem.addEventListener('click', (e) => {\r\n            const button = e.target;\r\n            button.disabled = true;\r\n            this.remove(button.parentElement);\r\n            button.disabled = false;\r\n        })\r\n    }\r\n\r\n    _renderNewItem(itemTemplate) {\r\n        let itemElement = Util.toElement(TEMPLATE_ITEM_CONTAINER);\r\n        itemElement.innerHTML = itemTemplate;\r\n\r\n        if (this._options.reverse) {\r\n            this._listElement.insertBefore(itemElement, this._listElement.firstChild);\r\n        }\r\n        else {\r\n            this._listElement.appendChild(itemElement);\r\n        }\r\n        return itemElement;\r\n    }\r\n}\r\n\r\nexport default SimpleList;","﻿// Всплывающее в правом нижнем углу сообщение об успешности операции. Основано на Bootstrap toast.\r\n\r\nimport Util from './common';\r\n\r\nconst Default = {\r\n    id: 'SuccessToast', // id элемента toast\r\n    millisecondsDelay: 3000, // задержка перед исчезнованием сообщения\r\n    className: 'toast-body alert-success font-weight-bold' // классы оформления блока сообщения\r\n}\r\n\r\nconst TEMPLATE = `<div class=\"toast\" id=\"${Default.id}\" role=\"alert\" data-delay=\"${Default.millisecondsDelay}\" \r\nstyle=\"position: fixed; bottom: 15px; right: 20px; min-width: 250px;\">\r\n    <div class=\"${Default.className}\">\r\n        Операция выполнена успешно\r\n    </div>\r\n</div>`\r\n\r\nclass SuccessToast {\r\n    constructor() {\r\n        this._createToastElement();\r\n\r\n    }\r\n\r\n    show() {\r\n        $('#' + Default.id).toast('show');\r\n    }\r\n\r\n    _createToastElement() {\r\n        let existing = document.getElementById(Default.id);\r\n        if (existing)\r\n            return;\r\n\r\n        let element = Util.toElement(TEMPLATE);\r\n        document.body.appendChild(element);\r\n    }\r\n\r\n    _initToast() {\r\n        $('#' + Default.id).toast();\r\n    }\r\n}\r\n\r\nexport default SuccessToast;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => module['default'] :\n\t\t() => module;\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// Promise = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t\"main\": 0\n};\n\nvar deferredModules = [\n\t[\"./wwwroot/js/src/main.js\",\"vendor\"]\n];\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\nvar checkDeferredModules = () => {\n\n};\nfunction checkDeferredModulesImpl() {\n\tvar result;\n\tfor(var i = 0; i < deferredModules.length; i++) {\n\t\tvar deferredModule = deferredModules[i];\n\t\tvar fulfilled = true;\n\t\tfor(var j = 1; j < deferredModule.length; j++) {\n\t\t\tvar depId = deferredModule[j];\n\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferredModules.splice(i--, 1);\n\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n\t\t}\n\t}\n\tif(deferredModules.length === 0) {\n\t\t__webpack_require__.x();\n\t\t__webpack_require__.x = () => {\n\n\t\t}\n\t}\n\treturn result;\n}\n__webpack_require__.x = () => {\n\t// reset startup function so it can be called again when more startup code is added\n\t__webpack_require__.x = () => {\n\n\t}\n\tchunkLoadingGlobal = chunkLoadingGlobal.slice();\n\tfor(var i = 0; i < chunkLoadingGlobal.length; i++) webpackJsonpCallback(chunkLoadingGlobal[i]);\n\treturn (checkDeferredModules = checkDeferredModulesImpl)();\n};\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (data) => {\n\tvar [chunkIds, moreModules, runtime, executeModules] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0, resolves = [];\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tresolves.push(installedChunks[chunkId][0]);\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\tfor(moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\tparentChunkLoadingFunction(data);\n\twhile(resolves.length) {\n\t\tresolves.shift()();\n\t}\n\n\t// add entry modules from loaded chunk to deferred list\n\tif(executeModules) deferredModules.push.apply(deferredModules, executeModules);\n\n\t// run deferred modules when all chunks ready\n\treturn checkDeferredModules();\n}\n\nvar chunkLoadingGlobal = globalThis[\"webpackChunkProfOsmotr_Web\"] = globalThis[\"webpackChunkProfOsmotr_Web\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = webpackJsonpCallback;","// run startup\nreturn __webpack_require__.x();\n"],"sourceRoot":""}